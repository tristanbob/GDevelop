{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/variablescontainer.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  /**\n   * VariablesContainer stores variables, usually for a a RuntimeGame, a RuntimeScene\n   * or a RuntimeObject.\n   */\n  export class VariablesContainer {\n    _variables: Hashtable<gdjs.Variable>;\n    _variablesArray: gdjs.Variable[] = [];\n\n    /**\n     * @param [initialVariablesData] Optional array containing representations of the base variables.\n     */\n    constructor(initialVariablesData?: VariableData[]) {\n      this._variables = new Hashtable();\n\n      if (initialVariablesData !== undefined) {\n        this.initFrom(initialVariablesData);\n      }\n    }\n\n    /**\n     * Initialize variables from a container data.<br>\n     * If `keepOldVariables` is set to false (by default), all already existing variables will be\n     * erased, but the new variables will be accessible thanks to getFromIndex. <br>\n     * if `keepOldVariables` is set to true, already existing variables won't be erased and will be\n     * still accessible thanks to getFromIndex.\n     *\n     * @param data The array containing data used to initialize variables.\n     * @param [keepOldVariables] If set to true, already existing variables won't be erased.\n     */\n    initFrom(data: VariableData[], keepOldVariables?: Boolean) {\n      if (keepOldVariables === undefined) {\n        keepOldVariables = false;\n      }\n      if (!keepOldVariables) {\n        VariablesContainer._deletedVars = VariablesContainer._deletedVars || [];\n        // @ts-ignore\n        this._variables.keys(VariablesContainer._deletedVars);\n      }\n      const that = this;\n      let i = 0;\n      for (let j = 0; j < data.length; ++j) {\n        const varData = data[j];\n        if (!varData.name) continue;\n\n        //Get the variable:\n        const variable = that.get(varData.name);\n        variable.reinitialize(varData);\n        if (!keepOldVariables) {\n          //Register the variable in the extra array to ensure a fast lookup using getFromIndex.\n          if (i < that._variablesArray.length) {\n            that._variablesArray[i] = variable;\n          } else {\n            that._variablesArray.push(variable);\n          }\n          ++i;\n\n          //Remove the variable from the list of variables to be deleted.\n          const idx = VariablesContainer._deletedVars.indexOf(varData.name);\n          if (idx !== -1) {\n            VariablesContainer._deletedVars[idx] = undefined;\n          }\n        }\n      }\n      if (!keepOldVariables) {\n        this._variablesArray.length = i;\n\n        //If we do not want to keep the already existing variables,\n        //remove all the variables not assigned above.\n        //(Here, remove means flag the variable as not existing, to avoid garbage creation ).\n        for (\n          let i = 0, len = VariablesContainer._deletedVars.length;\n          i < len;\n          ++i\n        ) {\n          const variableName = VariablesContainer._deletedVars[i];\n          if (variableName !== undefined) {\n            this._variables.get(variableName).setUndefinedInContainer();\n          }\n        }\n      }\n    }\n\n    /**\n     * Add a new variable.\n     * This can be costly, don't use in performance sensitive paths.\n     *\n     * @param name Variable name\n     * @param newVariable The variable to be added\n     */\n    add(name: string, newVariable: gdjs.Variable) {\n      const oldVariable = this._variables.get(name);\n\n      // Variable is either already defined, considered as undefined\n      // in the container or missing in the container.\n      // Whatever the case, replace it by the new.\n      this._variables.put(name, newVariable);\n      if (oldVariable) {\n        // If variable is indexed, ensure that the variable as the index\n        // is replaced too. This can be costly (indexOf) but we assume `add` is not\n        // used in performance sensitive code.\n        const variableIndex = this._variablesArray.indexOf(oldVariable);\n        if (variableIndex !== -1) {\n          this._variablesArray[variableIndex] = newVariable;\n        }\n      }\n    }\n\n    /**\n     * Remove a variable.\n     * (the variable is not really removed from the container to avoid creating garbage, but marked as undefined)\n     * @param name Variable to be removed\n     */\n    remove(name: string) {\n      const variable = this._variables.get(name);\n      if (variable) {\n        variable.setUndefinedInContainer();\n      }\n    }\n\n    /**\n     * Get a variable.\n     * @param name The variable's name\n     * @return The specified variable. If not found, an empty variable is added to the container.\n     */\n    get(name: string): gdjs.Variable {\n      let variable = this._variables.get(name);\n      if (!variable) {\n        //Add automatically non-existing variables.\n        variable = new gdjs.Variable();\n        this._variables.put(name, variable);\n      } else {\n        if (\n          //Reuse variables removed before.\n          variable.isUndefinedInContainer()\n        ) {\n          variable.reinitialize();\n        }\n      }\n      return variable;\n    }\n\n    /**\n     * Get a variable using its index. If you're unsure about how to use this method, prefer to use `get`.\n     * The index of a variable is its index in the data passed to initFrom.\n     *\n     * This method is generally used by events generated code to increase lookup speed for variables.\n     *\n     * @param id The variable index\n     * @return The specified variable. If not found, an empty variable is added to the container, but it\n     * should not happen.\n     */\n    getFromIndex(id: number): gdjs.Variable {\n      if (id >= this._variablesArray.length) {\n        //Add automatically non-existing variables.\n        let variable = new gdjs.Variable();\n        this._variables.put('', variable);\n        return variable;\n      } else {\n        let variable: gdjs.Variable = this._variablesArray[id];\n        //Reuse variables removed before.\n        if (variable.isUndefinedInContainer()) {\n          variable.reinitialize();\n        }\n        return variable;\n      }\n    }\n\n    /**\n     * Check if a variable exists in the container.\n     * @param name The variable's name\n     * @return true if the variable exists.\n     */\n    has(name: string): boolean {\n      const variable = this._variables.get(name);\n      return variable && !variable.isUndefinedInContainer();\n    }\n    static _deletedVars: Array<string | undefined> = [];\n\n    /**\n     * \"Bad\" variable container, used by events when no other valid container can be found.\n     * This container has no state and always returns the bad variable ( see VariablesContainer.badVariable ).\n     * @static\n     */\n    static badVariablesContainer: VariablesContainer = {\n      _variables: new Hashtable(),\n      _variablesArray: [],\n      has: function () {\n        return false;\n      },\n      getFromIndex: function () {\n        return VariablesContainer.badVariable;\n      },\n      get: function () {\n        return VariablesContainer.badVariable;\n      },\n      remove: function () {\n        return;\n      },\n      add: function () {\n        return;\n      },\n      initFrom: function () {\n        return;\n      },\n    };\n\n    /**\n     * \"Bad\" variable, used by events when no other valid variable can be found.\n     * This variable has no state and always return 0 or the empty string.\n     * @static\n     */\n    static badVariable: Variable = {\n      _type: 'number',\n      _bool: false,\n      _children: {},\n      _childrenArray: [],\n      _str: '',\n      _undefinedInContainer: true,\n      _value: 0,\n      fromJSON: () => gdjs.VariablesContainer.badVariable,\n      toJSObject: () => 0,\n      fromJSObject: () => gdjs.VariablesContainer.badVariable,\n      reinitialize: () => {},\n      addChild: () => gdjs.VariablesContainer.badVariable,\n      castTo: () => {},\n      clearChildren: () => {},\n      clone: () => gdjs.VariablesContainer.badVariable,\n      getChildrenCount: () => 0,\n      replaceChildren: () => {},\n      replaceChildrenArray: () => {},\n      getType: function () {\n        return 'number';\n      },\n      isPrimitive: function () {\n        return true;\n      },\n      setValue: () => {},\n      getValue: () => 0,\n      getChild: () => gdjs.VariablesContainer.badVariable,\n      getChildAt: () => gdjs.VariablesContainer.badVariable,\n      hasChild: function () {\n        return false;\n      },\n      isStructure: function () {\n        return false;\n      },\n      isNumber: function () {\n        return true;\n      },\n      removeChild: function () {\n        return;\n      },\n      setNumber: function () {\n        return;\n      },\n      setString: function () {\n        return;\n      },\n      setBoolean: function () {\n        return;\n      },\n      getAsString: function () {\n        return '0';\n      },\n      getAsNumber: function () {\n        return 0;\n      },\n      getAsBoolean: function () {\n        return false;\n      },\n      getAllChildren: function () {\n        return {};\n      },\n      getAllChildrenArray: function () {\n        return [];\n      },\n      pushVariableCopy: () => {},\n      pushValue: () => {},\n      removeAtIndex: function () {\n        return;\n      },\n      add: function () {\n        return;\n      },\n      sub: function () {\n        return;\n      },\n      mul: function () {\n        return;\n      },\n      div: function () {\n        return;\n      },\n      concatenate: function () {\n        return;\n      },\n      concatenateString: function () {\n        return;\n      },\n      setUndefinedInContainer: function () {\n        return;\n      },\n      isUndefinedInContainer: function () {\n        return true;\n      },\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
