{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/inputmanager.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  type Touch = { x: float; y: float; justEnded: boolean };\n\n  /**\n   * Store input made on a canvas: mouse position, key pressed\n   * and touches states.\n   */\n  export class InputManager {\n    static MOUSE_LEFT_BUTTON: integer = 0;\n    static MOUSE_RIGHT_BUTTON: integer = 1;\n    static MOUSE_MIDDLE_BUTTON: integer = 2;\n    static MOUSE_BACK_BUTTON: integer = 3;\n    static MOUSE_FORWARD_BUTTON: integer = 4;\n    static MOUSE_TOUCH_ID: integer = 1;\n\n    /**\n     * Holds the raw keyCodes of the keys which only have left/right\n     * variants and should default to their left variant values\n     * if location is not specified.\n     */\n    static _DEFAULT_LEFT_VARIANT_KEYS: integer[] = [16, 17, 18, 91];\n    _pressedKeys: Hashtable<boolean>;\n    _releasedKeys: Hashtable<boolean>;\n    _lastPressedKey: float = 0;\n    _pressedMouseButtons: Array<boolean>;\n    _releasedMouseButtons: Array<boolean>;\n    /**\n     * The cursor X position (moved by mouse and touch events).\n     */\n    _cursorX: float = 0;\n    /**\n     * The cursor Y position (moved by mouse and touch events).\n     */\n    _cursorY: float = 0;\n    /**\n     * The mouse X position (only moved by mouse events).\n     */\n    _mouseX: float = 0;\n    /**\n     * The mouse Y position (only moved by mouse events).\n     */\n    _mouseY: float = 0;\n    _isMouseInsideCanvas: boolean = true;\n    _mouseWheelDelta: float = 0;\n    // TODO Remove _touches when there is no longer SpritePanelButton 1.2.0\n    // extension in the wild.\n    _touches = {\n      firstKey: (): string | number | null => {\n        for (const key in this._mouseOrTouches.items) {\n          // Exclude mouse key.\n          if (key !== '1') {\n            return key;\n          }\n        }\n        return null;\n      },\n    };\n    _mouseOrTouches: Hashtable<Touch>;\n    //Identifiers of the touches that started during/before the frame.\n    _startedTouches: Array<integer> = [];\n\n    //Identifiers of the touches that ended during/before the frame.\n    _endedTouches: Array<integer> = [];\n    _touchSimulateMouse: boolean = true;\n\n    /**\n     * @deprecated\n     */\n    _lastStartedTouchIndex = 0;\n    /**\n     * @deprecated\n     */\n    _lastEndedTouchIndex = 0;\n\n    constructor() {\n      this._pressedKeys = new Hashtable();\n      this._releasedKeys = new Hashtable();\n      this._pressedMouseButtons = new Array(5);\n      this._releasedMouseButtons = new Array(5);\n      this._mouseOrTouches = new Hashtable();\n    }\n\n    /**\n     * Returns the \"location-aware\" keyCode, given a raw keyCode\n     * and location. The location corresponds to KeyboardEvent.location,\n     * which should be 0 for standard keys, 1 for left keys,\n     * 2 for right keys, and 3 for numpad keys.\n     *\n     * @param keyCode The raw key code\n     * @param location The location\n     */\n    _getLocationAwareKeyCode(\n      keyCode: number,\n      location: number | null | undefined\n    ): integer {\n      if (location) {\n        // If it is a numpad number, do not modify it.\n        if (96 <= keyCode && keyCode <= 105) {\n          return keyCode;\n        }\n        return keyCode + 1000 * location;\n      }\n      if (InputManager._DEFAULT_LEFT_VARIANT_KEYS.indexOf(keyCode) !== -1) {\n        return keyCode + 1000;\n      }\n      return keyCode;\n    }\n\n    /**\n     * Should be called whenever a key is pressed. The location corresponds to\n     * KeyboardEvent.location, which should be 0 for standard keys, 1 for left keys,\n     * 2 for right keys, and 3 for numpad keys.\n     * @param keyCode The raw key code associated to the key press.\n     * @param location The location of the event.\n     */\n    onKeyPressed(keyCode: number, location?: number): void {\n      const locationAwareKeyCode = this._getLocationAwareKeyCode(\n        keyCode,\n        location\n      );\n      this._pressedKeys.put(locationAwareKeyCode, true);\n      this._lastPressedKey = locationAwareKeyCode;\n    }\n\n    /**\n     * Should be called whenever a key is released. The location corresponds to\n     * KeyboardEvent.location, which should be 0 for standard keys, 1 for left keys,\n     * 2 for right keys, and 3 for numpad keys.\n     * @param keyCode The raw key code associated to the key release.\n     * @param location The location of the event.\n     */\n    onKeyReleased(keyCode: number, location?: number): void {\n      const locationAwareKeyCode = this._getLocationAwareKeyCode(\n        keyCode,\n        location\n      );\n      this._pressedKeys.put(locationAwareKeyCode, false);\n      this._releasedKeys.put(locationAwareKeyCode, true);\n    }\n\n    /**\n     * Return the location-aware code of the last key that was pressed.\n     * @return The location-aware code of the last key pressed.\n     */\n    getLastPressedKey(): number {\n      return this._lastPressedKey;\n    }\n\n    /**\n     * Return true if the key corresponding to the location-aware keyCode is pressed.\n     * @param locationAwareKeyCode The location-aware key code to be tested.\n     */\n    isKeyPressed(locationAwareKeyCode: number): boolean {\n      return (\n        this._pressedKeys.containsKey(locationAwareKeyCode) &&\n        this._pressedKeys.get(locationAwareKeyCode)\n      );\n    }\n\n    /**\n     * Return true if the key corresponding to the location-aware keyCode was released during the last frame.\n     * @param locationAwareKeyCode The location-aware key code to be tested.\n     */\n    wasKeyReleased(locationAwareKeyCode: number) {\n      return (\n        this._releasedKeys.containsKey(locationAwareKeyCode) &&\n        this._releasedKeys.get(locationAwareKeyCode)\n      );\n    }\n\n    /**\n     * Return true if any key is pressed.\n     * @return true if any key is pressed.\n     */\n    anyKeyPressed(): boolean {\n      for (const keyCode in this._pressedKeys.items) {\n        if (this._pressedKeys.items.hasOwnProperty(keyCode)) {\n          if (this._pressedKeys.items[keyCode]) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n    /**\n     * Return true if any key is released.\n     * @return true if any key is released.\n     */\n    anyKeyReleased(): boolean {\n      for (const keyCode in this._releasedKeys.items) {\n        if (this._releasedKeys.items.hasOwnProperty(keyCode)) {\n          if (this._releasedKeys.items[keyCode]) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Should be called when the mouse is moved.\n     *\n     * Please note that the coordinates must be expressed relative to the view position.\n     *\n     * @param x The mouse new X position\n     * @param y The mouse new Y position\n     */\n    onMouseMove(x: float, y: float): void {\n      this._setCursorPosition(x, y);\n      this._mouseX = x;\n      this._mouseY = y;\n      if (this.isMouseButtonPressed(InputManager.MOUSE_LEFT_BUTTON)) {\n        this._moveTouch(\n          InputManager.MOUSE_TOUCH_ID,\n          this.getCursorX(),\n          this.getCursorY()\n        );\n      }\n    }\n\n    _setCursorPosition(x: float, y: float): void {\n      this._cursorX = x;\n      this._cursorY = y;\n    }\n\n    /**\n     * Get the cursor X position.\n     * The cursor is moved by mouse and touch events.\n     *\n     * @return the cursor X position, relative to the game view.\n     */\n    getCursorX(): float {\n      return this._cursorX;\n    }\n\n    /**\n     * Get the cursor Y position.\n     * The cursor is moved by mouse and touch events.\n     *\n     * @return the cursor Y position, relative to the game view.\n     */\n    getCursorY(): float {\n      return this._cursorY;\n    }\n\n    /**\n     * Get the mouse X position.\n     *\n     * @return the mouse X position, relative to the game view.\n     */\n    getMouseX(): float {\n      return this._mouseX;\n    }\n\n    /**\n     * Get the mouse Y position.\n     *\n     * @return the mouse Y position, relative to the game view.\n     */\n    getMouseY(): float {\n      return this._mouseY;\n    }\n\n    /**\n     * Should be called when the mouse leave the canvas.\n     */\n    onMouseLeave(): void {\n      this._isMouseInsideCanvas = false;\n    }\n\n    /**\n     * Should be called when the mouse enter the canvas.\n     */\n    onMouseEnter(): void {\n      this._isMouseInsideCanvas = true;\n    }\n\n    /**\n     * @return true when the mouse is inside the canvas.\n     */\n    isMouseInsideCanvas(): boolean {\n      return this._isMouseInsideCanvas;\n    }\n\n    /**\n     * Should be called whenever a mouse button is pressed.\n     * @param buttonCode The mouse button code associated to the event.\n     * See InputManager.MOUSE_LEFT_BUTTON, InputManager.MOUSE_RIGHT_BUTTON, InputManager.MOUSE_MIDDLE_BUTTON\n     */\n    onMouseButtonPressed(buttonCode: number): void {\n      this._setMouseButtonPressed(buttonCode);\n      if (buttonCode === InputManager.MOUSE_LEFT_BUTTON) {\n        this._addTouch(\n          InputManager.MOUSE_TOUCH_ID,\n          this.getCursorX(),\n          this.getCursorY()\n        );\n      }\n    }\n\n    _setMouseButtonPressed(buttonCode: number): void {\n      this._pressedMouseButtons[buttonCode] = true;\n      this._releasedMouseButtons[buttonCode] = false;\n    }\n\n    /**\n     * Should be called whenever a mouse button is released.\n     * @param buttonCode The mouse button code associated to the event. (see onMouseButtonPressed)\n     */\n    onMouseButtonReleased(buttonCode: number): void {\n      this._setMouseButtonReleased(buttonCode);\n      if (buttonCode === InputManager.MOUSE_LEFT_BUTTON) {\n        this._removeTouch(InputManager.MOUSE_TOUCH_ID);\n      }\n    }\n\n    _setMouseButtonReleased(buttonCode: number): void {\n      this._pressedMouseButtons[buttonCode] = false;\n      this._releasedMouseButtons[buttonCode] = true;\n    }\n\n    /**\n     * Return true if the mouse button corresponding to buttonCode is pressed.\n     * @param buttonCode The mouse button code (0: Left button, 1: Right button).\n     */\n    isMouseButtonPressed(buttonCode: number): boolean {\n      return (\n        this._pressedMouseButtons[buttonCode] !== undefined &&\n        this._pressedMouseButtons[buttonCode]\n      );\n    }\n\n    /**\n     * Return true if the mouse button corresponding to buttonCode was just released.\n     * @param buttonCode The mouse button code (0: Left button, 1: Right button).\n     */\n    isMouseButtonReleased(buttonCode: number): boolean {\n      return (\n        this._releasedMouseButtons[buttonCode] !== undefined &&\n        this._releasedMouseButtons[buttonCode]\n      );\n    }\n\n    /**\n     * Should be called whenever the mouse wheel is used\n     * @param wheelDelta The mouse wheel delta\n     */\n    onMouseWheel(wheelDelta: number): void {\n      this._mouseWheelDelta = wheelDelta;\n    }\n\n    /**\n     * Return the mouse wheel delta\n     */\n    getMouseWheelDelta(): float {\n      return this._mouseWheelDelta;\n    }\n\n    /**\n     * Get a touch X position.\n     *\n     * @return the touch X position, relative to the game view.\n     */\n    getTouchX(publicIdentifier: integer): float {\n      if (!this._mouseOrTouches.containsKey(publicIdentifier)) {\n        return 0;\n      }\n      return this._mouseOrTouches.get(publicIdentifier).x;\n    }\n\n    /**\n     * Get a touch Y position.\n     *\n     * @return the touch Y position, relative to the game view.\n     */\n    getTouchY(publicIdentifier: integer): float {\n      if (!this._mouseOrTouches.containsKey(publicIdentifier)) {\n        return 0;\n      }\n      return this._mouseOrTouches.get(publicIdentifier).y;\n    }\n\n    /**\n     * @param publicIdentifier the touch identifier\n     * @returns true if the touch has just ended.\n     */\n    hasTouchEnded(publicIdentifier: integer): boolean {\n      return (\n        this._endedTouches.includes(publicIdentifier) &&\n        // A touch that end then start in one frame is ignored\n        // because it's probably noise.\n        this._mouseOrTouches.get(publicIdentifier).justEnded\n      );\n    }\n\n    /**\n     * Update and return the array containing the identifiers of all touches.\n     */\n    getAllTouchIdentifiers(): Array<integer> {\n      InputManager._allTouchIds.length = 0;\n      for (const id in this._mouseOrTouches.items) {\n        if (this._mouseOrTouches.items.hasOwnProperty(id)) {\n          InputManager._allTouchIds.push(parseInt(id, 10));\n        }\n      }\n      return InputManager._allTouchIds;\n    }\n\n    onTouchStart(rawIdentifier: integer, x: float, y: float): void {\n      this._addTouch(this.getPublicTouchIdentifier(rawIdentifier), x, y);\n      if (this._touchSimulateMouse) {\n        this._setCursorPosition(x, y);\n        this._setMouseButtonPressed(InputManager.MOUSE_LEFT_BUTTON);\n      }\n    }\n\n    _addTouch(publicIdentifier: integer, x: float, y: float): void {\n      // A touch that end then start in one frame is ignored\n      // because it's probably noise.\n      if (!this._endedTouches.includes(publicIdentifier)) {\n        this._startedTouches.push(publicIdentifier);\n        this._mouseOrTouches.put(publicIdentifier, {\n          x: x,\n          y: y,\n          justEnded: false,\n        });\n      }\n    }\n\n    onTouchMove(rawIdentifier: integer, x: float, y: float): void {\n      this._moveTouch(this.getPublicTouchIdentifier(rawIdentifier), x, y);\n      if (this._touchSimulateMouse) {\n        this._setCursorPosition(x, y);\n      }\n    }\n\n    _moveTouch(publicIdentifier: integer, x: float, y: float): void {\n      const touch = this._mouseOrTouches.get(publicIdentifier);\n      if (!touch) {\n        return;\n      }\n      touch.x = x;\n      touch.y = y;\n    }\n\n    onTouchEnd(rawIdentifier: number): void {\n      this._removeTouch(this.getPublicTouchIdentifier(rawIdentifier));\n      if (this._touchSimulateMouse) {\n        this._setMouseButtonReleased(InputManager.MOUSE_LEFT_BUTTON);\n      }\n    }\n\n    onTouchCancel(rawIdentifier: number): void {\n      // Don't do anything specific for canceled touches to avoid to make\n      // touches handling more complex for users.\n      this.onTouchEnd(rawIdentifier);\n    }\n\n    _removeTouch(publicIdentifier: number): void {\n      this._endedTouches.push(publicIdentifier);\n      if (this._mouseOrTouches.containsKey(publicIdentifier)) {\n        //Postpone deletion at the end of the frame\n        this._mouseOrTouches.get(publicIdentifier).justEnded = true;\n      }\n    }\n\n    /**\n     * Add 2 to the identifier to avoid identifiers taking the GDevelop default\n     * variable value which is 0 and reserve 1 for the mouse.\n     * @param rawIdentifier The identifier given by the browser.\n     * @returns The identifier used in events.\n     */\n    private getPublicTouchIdentifier(rawIdentifier: integer): integer {\n      return rawIdentifier + 2;\n    }\n\n    getStartedTouchIdentifiers(): integer[] {\n      return this._startedTouches;\n    }\n\n    /**\n     * @deprecated\n     */\n    popStartedTouch(): integer | undefined {\n      const publicIdentifier = this._startedTouches[\n        this._lastStartedTouchIndex\n      ];\n      this._lastStartedTouchIndex++;\n      return publicIdentifier;\n    }\n\n    /**\n     * @deprecated\n     */\n    popEndedTouch(): integer | undefined {\n      const publicIdentifier = this._endedTouches[this._lastEndedTouchIndex];\n      this._lastEndedTouchIndex++;\n      return publicIdentifier;\n    }\n\n    /**\n     * Set if touch events should simulate mouse events.\n     *\n     * If true, any touch will move the mouse position and set mouse buttons\n     * as pressed/released.\n     * @param enable true to simulate mouse events, false to disable it.\n     */\n    touchSimulateMouse(enable: boolean): void {\n      if (enable === undefined) {\n        enable = true;\n      }\n      this._touchSimulateMouse = enable;\n    }\n\n    /**\n     * @returns true if the touch events are used to simulate mouse events.\n     */\n    isSimulatingMouseWithTouch(): boolean {\n      return this._touchSimulateMouse;\n    }\n\n    /**\n     * Notify the input manager that the frame ended, so anything that last\n     * only for one frame (started/ended touches) should be reset.\n     *\n     * This method should be called in the game loop (see `gdjs.RuntimeGame.startGameLoop`).\n     * You don't need to call it otherwise.\n     */\n    onFrameEnded(): void {\n      //Only clear the ended touches at the end of the frame.\n      for (const id in this._mouseOrTouches.items) {\n        if (this._mouseOrTouches.items.hasOwnProperty(id)) {\n          const touch = this._mouseOrTouches.items[id];\n          if (touch.justEnded) {\n            this._mouseOrTouches.remove(id);\n          }\n        }\n      }\n      this._startedTouches.length = 0;\n      this._endedTouches.length = 0;\n      this._releasedKeys.clear();\n      this._releasedMouseButtons.length = 0;\n      this._mouseWheelDelta = 0;\n      this._lastStartedTouchIndex = 0;\n      this._lastEndedTouchIndex = 0;\n    }\n\n    /**\n     * Return true if the mouse wheel scroll to up\n     */\n    isScrollingUp(): boolean {\n      return this.getMouseWheelDelta() > 0;\n    }\n\n    /**\n     * Return true if the mouse wheel scroll to down\n     */\n    isScrollingDown(): boolean {\n      return this.getMouseWheelDelta() < 0;\n    }\n\n    static _allTouchIds: Array<integer> = [];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
