{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/runtimebehavior.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  /**\n   * Allow to store a behavior in a RBush (spatial data structure).\n   * Because this duplicates the AABB, this ensures the RBush AABB\n   * stays the same even if the underlying object is moved\n   * (in which case the behavior is responsible for removing/adding\n   * back/updating this BehaviorRBushAABB).\n   */\n  export class BehaviorRBushAABB<T extends RuntimeBehavior> {\n    minX: float = 0;\n    minY: float = 0;\n    maxX: float = 0;\n    maxY: float = 0;\n    behavior: T;\n\n    constructor(behavior: T) {\n      this.behavior = behavior;\n      this.updateAABBFromOwner();\n    }\n\n    updateAABBFromOwner() {\n      this.minX = this.behavior.owner.getAABB().min[0];\n      this.minY = this.behavior.owner.getAABB().min[1];\n      this.maxX = this.behavior.owner.getAABB().max[0];\n      this.maxY = this.behavior.owner.getAABB().max[1];\n    }\n  }\n\n  /**\n   * RuntimeBehavior represents a behavior being used by a RuntimeObject.\n   */\n  export class RuntimeBehavior {\n    name: string;\n    type: string;\n    _nameId: integer;\n    _activated: boolean = true;\n\n    /**\n     * @param instanceContainer The container owning the object of the behavior\n     * @param behaviorData The properties used to setup the behavior\n     * @param owner The object owning the behavior\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      behaviorData: BehaviorData,\n      public owner: gdjs.RuntimeObject\n    ) {\n      this.name = behaviorData.name || '';\n      this.type = behaviorData.type || '';\n      this._nameId = gdjs.RuntimeObject.getNameIdentifier(this.name);\n    }\n\n    /**\n     * Called when the behavior must be updated using the specified behaviorData. This is the\n     * case during hot-reload, and is only called if the behavior was modified.\n     *\n     * @see gdjs.RuntimeBehavior#onObjectHotReloaded\n     *\n     * @param oldBehaviorData The previous data for the behavior.\n     * @param newBehaviorData The new data for the behavior.\n     * @returns true if the behavior was updated, false if it could not (i.e: hot-reload is not supported).\n     */\n    updateFromBehaviorData(\n      oldBehaviorData: BehaviorData,\n      newBehaviorData: BehaviorData\n    ): boolean {\n      // If not redefined, mark by default the hot-reload as failed.\n      return false;\n    }\n\n    /**\n     * Get the name of the behavior.\n     * @return The behavior's name.\n     */\n    getName(): string {\n      return this.name;\n    }\n\n    /**\n     * Get the name identifier of the behavior.\n     * @return The behavior's name identifier.\n     */\n    getNameId(): integer {\n      return this._nameId;\n    }\n\n    /**\n     * Called at each frame before events. Call doStepPreEvents.<br>\n     * Behaviors writers: Please do not redefine this method. Redefine doStepPreEvents instead.\n     * @param instanceContainer The instanceContainer owning the object\n     */\n    stepPreEvents(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      if (this._activated) {\n        const profiler = instanceContainer.getScene().getProfiler();\n        if (profiler) {\n          profiler.begin(this.name);\n        }\n        this.doStepPreEvents(instanceContainer);\n        if (profiler) {\n          profiler.end(this.name);\n        }\n      }\n    }\n\n    /**\n     * Called at each frame after events. Call doStepPostEvents.<br>\n     * Behaviors writers: Please do not redefine this method. Redefine doStepPreEvents instead.\n     * @param instanceContainer The instanceContainer owning the object\n     */\n    stepPostEvents(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      if (this._activated) {\n        const profiler = instanceContainer.getScene().getProfiler();\n        if (profiler) {\n          profiler.begin(this.name);\n        }\n        this.doStepPostEvents(instanceContainer);\n        if (profiler) {\n          profiler.end(this.name);\n        }\n      }\n    }\n\n    /**\n     * De/Activate the behavior\n     * @param enable true to enable the behavior, false to disable it\n     */\n    activate(enable: boolean): void {\n      if (enable === undefined) {\n        enable = true;\n      }\n      if (!this._activated && enable) {\n        this._activated = true;\n        this.onActivate();\n      } else {\n        if (this._activated && !enable) {\n          this._activated = false;\n          this.onDeActivate();\n        }\n      }\n    }\n\n    /**\n     * Reimplement this to do extra work when the behavior is created (i.e: an\n     * object using it was created), after the object is fully initialized (so\n     * you can use `this.owner` without risk).\n     */\n    onCreated(): void {}\n\n    /**\n     * Return true if the behavior is activated\n     */\n    activated(): boolean {\n      return this._activated;\n    }\n\n    /**\n     * Reimplement this method to do extra work when the behavior is activated (after\n     * it has been deactivated, see `onDeActivate`).\n     */\n    onActivate(): void {}\n\n    /**\n     * Reimplement this method to do extra work when the behavior is deactivated.\n     */\n    onDeActivate(): void {}\n\n    /**\n     * This method is called each tick before events are done.\n     * @param instanceContainer The instanceContainer owning the object\n     */\n    doStepPreEvents(instanceContainer: gdjs.RuntimeInstanceContainer): void {}\n\n    /**\n     * This method is called each tick after events are done.\n     * @param instanceContainer The instanceContainer owning the object\n     */\n    doStepPostEvents(instanceContainer: gdjs.RuntimeInstanceContainer): void {}\n\n    /**\n     * This method is called when the owner of the behavior\n     * is being removed from the scene and is about to be destroyed/reused later\n     * or when the behavior is removed from an object (can happen in case of\n     * hot-reloading only. Otherwise, behaviors are just de-activated,\n     * not removed. See `onDeActivate`).\n     */\n    onDestroy(): void {}\n\n    /**\n     * This method is called when the owner of the behavior\n     * was hot reloaded, so its position, angle, size can have been changed outside\n     * of events.\n     */\n    onObjectHotReloaded(): void {}\n  }\n  gdjs.registerBehavior('', gdjs.RuntimeBehavior);\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CAQS,OAAmD,CAOxD,YAAY,EAAa,CANzB,UAAc,EACd,UAAc,EACd,UAAc,EACd,UAAc,EAIZ,KAAK,SAAW,EAChB,KAAK,sBAGP,qBAAsB,CACpB,KAAK,KAAO,KAAK,SAAS,MAAM,UAAU,IAAI,GAC9C,KAAK,KAAO,KAAK,SAAS,MAAM,UAAU,IAAI,GAC9C,KAAK,KAAO,KAAK,SAAS,MAAM,UAAU,IAAI,GAC9C,KAAK,KAAO,KAAK,SAAS,MAAM,UAAU,IAAI,IAhB3C,EAAM,oBAuBN,OAAsB,CAW3B,YACE,EACA,EACO,EACP,CADO,aAVT,gBAAsB,GAYpB,KAAK,KAAO,EAAa,MAAQ,GACjC,KAAK,KAAO,EAAa,MAAQ,GACjC,KAAK,QAAU,EAAK,cAAc,kBAAkB,KAAK,MAa3D,uBACE,EACA,EACS,CAET,MAAO,GAOT,SAAkB,CAChB,MAAO,MAAK,KAOd,WAAqB,CACnB,MAAO,MAAK,QAQd,cAAc,EAAwD,CACpE,GAAI,KAAK,WAAY,CACnB,KAAM,GAAW,EAAkB,WAAW,cAC9C,AAAI,GACF,EAAS,MAAM,KAAK,MAEtB,KAAK,gBAAgB,GACjB,GACF,EAAS,IAAI,KAAK,OAUxB,eAAe,EAAwD,CACrE,GAAI,KAAK,WAAY,CACnB,KAAM,GAAW,EAAkB,WAAW,cAC9C,AAAI,GACF,EAAS,MAAM,KAAK,MAEtB,KAAK,iBAAiB,GAClB,GACF,EAAS,IAAI,KAAK,OASxB,SAAS,EAAuB,CAC9B,AAAI,IAAW,QACb,GAAS,IAEX,AAAI,CAAC,KAAK,YAAc,EACtB,MAAK,WAAa,GAClB,KAAK,cAED,KAAK,YAAc,CAAC,GACtB,MAAK,WAAa,GAClB,KAAK,gBAUX,WAAkB,EAKlB,WAAqB,CACnB,MAAO,MAAK,WAOd,YAAmB,EAKnB,cAAqB,EAMrB,gBAAgB,EAAwD,EAMxE,iBAAiB,EAAwD,EASzE,WAAkB,EAOlB,qBAA4B,GAjKvB,EAAM,kBAmKb,EAAK,iBAAiB,GAAI,EAAK,mBAlMvB",
  "names": []
}
