{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/variable.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Variables');\n\n  /**\n   * Children of a structure.\n   */\n  type Children = Record<string, gdjs.Variable>;\n\n  /**\n   * A Variable is an object storing a value (number or a string) or children variables.\n   */\n  export class Variable {\n    // TODO: convert this to an integer to speed up the type checks at runtime.\n    _type: VariableType = 'number';\n    _value: float = 0;\n    _str: string = '0';\n    _bool: boolean = false;\n    _children: Children = {};\n    _childrenArray: gdjs.Variable[] = [];\n    _undefinedInContainer: boolean = false;\n\n    /**\n     * @param [varData] The optional initial content of the variable.\n     */\n    constructor(varData?: VariableData) {\n      this.reinitialize(varData);\n    }\n\n    reinitialize(varData?: VariableData | undefined) {\n      this._type = 'number';\n      this._value = 0;\n      this._str = '0';\n      this._bool = false;\n      this._children = {};\n      this._childrenArray = [];\n      this._undefinedInContainer = false;\n\n      if (varData !== undefined) {\n        this._type = varData.type || 'number';\n        if (this._type === 'number') {\n          this._value = parseFloat((varData.value as string) || '0');\n          // Protect against NaN.\n          if (this._value !== this._value) this._value = 0;\n        } else if (this._type === 'string') {\n          this._str = '' + varData.value || '0';\n        } else if (this._type === 'boolean') {\n          this._bool = !!varData.value;\n        } else if (this._type === 'structure') {\n          if (varData.children !== undefined) {\n            for (var i = 0, len = varData.children.length; i < len; ++i) {\n              var childData = varData.children[i];\n              if (childData.name === undefined) continue;\n              this._children[childData.name] = new gdjs.Variable(childData);\n            }\n          }\n        } else if (this._type === 'array' && varData.children) {\n          for (const childData of varData.children)\n            this._childrenArray.push(new gdjs.Variable(childData));\n        }\n      }\n    }\n\n    /**\n     * Return true if the variable type is a primitive type.\n     */\n    static isPrimitive(\n      type: VariableType\n    ): type is 'string' | 'number' | 'boolean' {\n      return type === 'string' || type === 'number' || type === 'boolean';\n    }\n\n    /**\n     * Deeply copies a variable into another.\n     * @param source The source variable.\n     * @param target The target variable.\n     * @param merge Should the target be merged with the source, or be an exact copy?\n     * @returns The target variable.\n     */\n    static copy(\n      source: gdjs.Variable,\n      target: gdjs.Variable,\n      merge?: boolean\n    ): gdjs.Variable {\n      if (!merge) target.clearChildren();\n      target.castTo(source.getType());\n      if (source.isPrimitive()) {\n        target.setValue(source.getValue());\n      } else if (source.getType() === 'structure') {\n        const children = source.getAllChildren();\n        for (const p in children) {\n          if (children.hasOwnProperty(p))\n            target.addChild(p, children[p].clone());\n        }\n      } else if (source.getType() === 'array') {\n        for (const p of source.getAllChildrenArray())\n          target.pushVariableCopy(p);\n      }\n      return target;\n    }\n\n    /**\n     * Converts a JavaScript object into a value compatible\n     * with GDevelop variables and store it inside this variable.\n     * @param obj - The value to convert.\n     */\n    fromJSObject(obj: any): this {\n      if (obj === null) {\n        this.setString('null');\n      } else if (typeof obj === 'number') {\n        if (Number.isNaN(obj)) {\n          logger.warn('Variables cannot be set to NaN, setting it to 0.');\n          this.setNumber(0);\n        } else {\n          this.setNumber(obj);\n        }\n      } else if (typeof obj === 'string') {\n        this.setString(obj);\n      } else if (typeof obj === 'undefined') {\n        // Do not modify the variable, as there is no value to set it to.\n      } else if (typeof obj === 'boolean') {\n        this.setBoolean(obj);\n      } else if (Array.isArray(obj)) {\n        this.castTo('array');\n        this.clearChildren();\n        for (const i in obj) this.getChild(i).fromJSObject(obj[i]);\n      } else if (typeof obj === 'object') {\n        this.castTo('structure');\n        this.clearChildren();\n        for (var p in obj)\n          if (obj.hasOwnProperty(p)) this.getChild(p).fromJSObject(obj[p]);\n      } else if (typeof obj === 'symbol') {\n        this.setString(obj.toString());\n      } else if (typeof obj === 'bigint') {\n        if (obj > Number.MAX_SAFE_INTEGER)\n          logger.warn(\n            'Error while converting JS variable to GDevelop variable: Integers bigger than ' +\n              Number.MAX_SAFE_INTEGER +\n              \" aren't supported by GDevelop variables, it will be reduced to that size.\"\n          );\n        // @ts-ignore\n        variable.setNumber(parseInt(obj, 10));\n      } else if (typeof obj === 'function') {\n        logger.error(\n          'Error while converting JS variable to GDevelop variable: Impossible to set variable value to a function.'\n        );\n      } else {\n        logger.error(\n          'Error while converting JS variable to GDevelop variable: Cannot identify type of object ' +\n            obj\n        );\n      }\n      return this;\n    }\n\n    /**\n     * Unserialize a JSON string into this variable.\n     *\n     * This just logs an error if the JSON is invalid.\n     *\n     * @param json - A JSON string.\n     */\n    fromJSON(json: string): this {\n      try {\n        var obj = JSON.parse(json);\n      } catch (e) {\n        logger.error('Unable to parse JSON: ' + json + e);\n        return this;\n      }\n      this.fromJSObject(obj);\n      return this;\n    }\n\n    /**\n     * Converts this variable into an equivalent JavaScript object.\n     * @returns A JavaScript object equivalent to the variable.\n     */\n    toJSObject(): any {\n      switch (this._type) {\n        case 'string':\n          return this.getAsString();\n        case 'number':\n          return this.getAsNumber();\n        case 'boolean':\n          return this.getAsBoolean();\n        case 'structure':\n          const obj = {};\n          for (const name in this._children)\n            obj[name] = this._children[name].toJSObject();\n          return obj;\n        case 'array':\n          const arr: any[] = [];\n          for (const item of this._childrenArray) {\n            // item can be undefined if there are empty elements in the array.\n            // A variable can have empty items in its children array if one inserts\n            // a variable at an index greater than highest index. All the array elements\n            // in the gap will be empty elements.\n            arr.push(item === undefined ? undefined : item.toJSObject());\n          }\n          return arr;\n      }\n    }\n\n    /**\n     * Return true if the type of the variable is a primitive type.\n     */\n    isPrimitive() {\n      return gdjs.Variable.isPrimitive(this._type);\n    }\n\n    /**\n     * Returns a deep copy of this variable.\n     */\n    clone(): gdjs.Variable {\n      return gdjs.Variable.copy(this, new gdjs.Variable());\n    }\n\n    /**\n     * Used (usually by gdjs.VariablesContainer) to set that the variable must be\n     * considered as not existing in the container.\n     */\n    setUndefinedInContainer() {\n      this._undefinedInContainer = true;\n    }\n\n    /**\n     * Check if the variable must be considered as not existing in its container\n     * (usually a gdjs.VariablesContainer).\n     * @return true if the container must consider that the variable does not exist.\n     */\n    isUndefinedInContainer(): boolean {\n      return this._undefinedInContainer;\n    }\n\n    /**\n     * Converts the variable into another type.\n     * @param newType The new type of the variable\n     */\n    castTo(newType: VariableType) {\n      if (newType === 'string') this.setString(this.getAsString());\n      else if (newType === 'number') this.setNumber(this.getAsNumber());\n      else if (newType === 'boolean') this.setBoolean(this.getAsBoolean());\n      else if (newType === 'structure') {\n        if (this._type === 'structure') return;\n        this._children = this.getAllChildren();\n        this._type = 'structure';\n      } else if (newType === 'array') {\n        if (this._type === 'array') return;\n        this._childrenArray = this.getAllChildrenArray();\n        this._type = 'array';\n      }\n    }\n\n    /**\n     * Get the child with the specified name.\n     *\n     * If the variable has not the specified child, an empty variable with the specified name\n     * is added as child.\n     * @returns The child variable\n     */\n    getChild(childName: string): gdjs.Variable {\n      // Make sure the variable is a collection\n      if (this.isPrimitive()) this.castTo('structure');\n\n      if (this._type === 'array')\n        return this.getChildAt(parseInt(childName, 10) || 0);\n\n      if (\n        this._children[childName] === undefined ||\n        this._children[childName] === null\n      )\n        this._children[childName] = new gdjs.Variable();\n      return this._children[childName];\n    }\n\n    /**\n     * Add a child variable with the specified name.\n     *\n     * If there is an existing child variable with this name, it is erased.\n     * @param childName The name of the variable to add\n     * @param childVariable The variable to add as a child\n     * @returns The variable (for chaining calls)\n     */\n    addChild(childName: string, childVariable: gdjs.Variable): this {\n      // Make sure this is a structure\n      this.castTo('structure');\n      this._children[childName] = childVariable;\n      return this;\n    }\n\n    /**\n     * Return the child in a variable.\n     *\n     * Check if the variable has the specified children\n     * @return true if variable has the children with the specified name\n     */\n    hasChild(childName: string): boolean {\n      return (\n        this._type === 'structure' && this._children.hasOwnProperty(childName)\n      );\n    }\n\n    /**\n     * Remove the child with the specified name.\n     *\n     * If the variable has not the specified child, nothing is done.\n     * @param childName The name of the child to be removed\n     */\n    removeChild(childName: string) {\n      if (this._type !== 'structure') return;\n      delete this._children[childName];\n    }\n\n    /**\n     * Remove all the children.\n     */\n    clearChildren() {\n      this._children = {};\n      this._childrenArray = [];\n    }\n\n    /**\n     * Replaces all the children with a new map of children.\n     * @param newChildren The map of new children.\n     */\n    replaceChildren(newChildren: Children) {\n      this._type = 'structure';\n      this._children = newChildren;\n    }\n\n    /**\n     * Replaces all the children with a new array of children.\n     * @param newChildren The array of new children.\n     */\n    replaceChildrenArray(newChildren: gdjs.Variable[]) {\n      this._type = 'array';\n      this._childrenArray = newChildren;\n    }\n\n    /**\n     * Get the value of the variable, considered as a number\n     * @return The number stored in the variable\n     */\n    getAsNumber(): float {\n      if (this._type !== 'number') {\n        let number = 0;\n        if (this._type === 'string') number = parseFloat(this._str);\n        else if (this._type === 'boolean') number = this._bool ? 1 : 0;\n\n        return number === number ? number : 0; //Ensure NaN is not returned as a value.\n      }\n\n      return this._value;\n    }\n\n    /**\n     * Change the value of the variable, considered as a number\n     * @param newValue The new value to be set\n     */\n    setNumber(newValue: float) {\n      this._type = 'number';\n      //@ts-ignore parseFloat does accept numbers.\n      newValue = parseFloat(newValue);\n      this._value = newValue === newValue ? newValue : 0; // Prevent NaN\n    }\n\n    /**\n     * Get the value of the variable, considered as a string\n     * @return The string stored in the variable\n     */\n    getAsString(): string {\n      if (this._type !== 'string') {\n        if (this._type === 'number') return this._value.toString();\n        else if (this._type === 'boolean') return this._bool ? 'true' : 'false';\n        else if (this._type === 'structure') return '[Structure]';\n        else if (this._type === 'array') return '[Array]';\n        else return '';\n      }\n\n      return this._str;\n    }\n\n    /**\n     * Change the value of the variable, considered as a string\n     * @param newValue The new string to be set\n     */\n    setString(newValue: string): void {\n      this._type = 'string';\n      this._str = '' + newValue;\n    }\n\n    /**\n     * Get the value of the variable, considered as a boolean\n     * @return The boolean value of the variable.\n     */\n    getAsBoolean(): boolean {\n      if (this._type !== 'boolean') {\n        if (this._type === 'number') return this._value !== 0;\n        else if (this._type === 'string')\n          return this._str !== '0' && this._str !== '' && this._str !== 'false';\n        else return true;\n      }\n\n      return this._bool;\n    }\n\n    /**\n     * Change the value of the variable, considered as a boolean\n     * @param newValue The new boolean to be set.\n     */\n    setBoolean(newValue: boolean) {\n      this._type = 'boolean';\n      this._bool = !!newValue;\n    }\n\n    /**\n     * Sets the primitive value using the setter of the current type.\n     * @param newValue The primitive value of the variable.\n     */\n    setValue(newValue: string | float | boolean) {\n      if (this._type === 'string') this.setString(newValue as string);\n      else if (this._type === 'number') this.setNumber(newValue as float);\n      else if (this._type === 'boolean') this.setBoolean(newValue as boolean);\n    }\n\n    /**\n     * Gets the primitive value using the getter of the current type.\n     */\n    getValue(): string | float | boolean {\n      return this._type === 'number'\n        ? this.getAsNumber()\n        : this._type === 'boolean'\n        ? this.getAsBoolean()\n        : this.getAsString();\n    }\n\n    /**\n     * Return true if the variable is a structure.\n     * @return true if the variable is a structure.\n     * @deprecated Use {@link gdjs.Variable.getType} instead.\n     */\n    isStructure(): boolean {\n      return this._type === 'structure';\n    }\n\n    /**\n     * Return true if the variable is a number.\n     * @return true if the variable is a number.\n     * @deprecated Use {@link gdjs.Variable.getType} instead.\n     */\n    isNumber(): boolean {\n      return this._type === 'number';\n    }\n\n    /**\n     * Returns the type of the variable.\n     */\n    getType(): VariableType {\n      return this._type;\n    }\n\n    /**\n     * Return the object containing all the children of the variable.\n     * @return All the children of the variable\n     */\n    getAllChildren(): Children {\n      return this._type === 'structure'\n        ? this._children\n        : this._type === 'array'\n        ? ((Object.assign({}, this._childrenArray) as unknown) as Children)\n        : {};\n    }\n\n    /**\n     * Return an Array containing all the children of the variable.\n     */\n    getAllChildrenArray(): gdjs.Variable[] {\n      return this._type === 'structure'\n        ? Object.values(this._children)\n        : this._type === 'array'\n        ? this._childrenArray\n        : [];\n    }\n\n    /**\n     * Return the length of the collection.\n     */\n    getChildrenCount(): integer {\n      return this._type === 'structure'\n        ? Object.keys(this._children).length\n        : this._type === 'array'\n        ? this._childrenArray.length\n        : 0;\n    }\n\n    /**\n     * Add the given number to the variable value\n     * @param val the number to add\n     */\n    add(val: float) {\n      this.setNumber(this.getAsNumber() + val);\n    }\n\n    /**\n     * Subtract the given number to the variable value\n     * @param val the number to subtract\n     */\n    sub(val: float) {\n      this.setNumber(this.getAsNumber() - val);\n    }\n\n    /**\n     * Multiply the variable value by the given number\n     * @param val the factor\n     */\n    mul(val: float) {\n      this.setNumber(this.getAsNumber() * val);\n    }\n\n    /**\n     * Divide the variable value by the given number\n     * @param val the divisor\n     */\n    div(val: float) {\n      this.setNumber(this.getAsNumber() / val);\n    }\n\n    /**\n     * Concatenate the given string at the end of the variable value\n     * @param str the string to append\n     */\n    concatenateString(str: string) {\n      this.setString(this.getAsString() + str);\n    }\n\n    /**\n     * @deprecated\n     * @private\n     * @alias concatenateString\n     */\n    concatenate(str: string) {\n      this.setString(this.getAsString() + str);\n    }\n\n    /**\n     * Get a variable at a given index of the array.\n     */\n    getChildAt(index: integer) {\n      this.castTo('array');\n      if (\n        this._childrenArray[index] === undefined ||\n        this._childrenArray[index] === null\n      )\n        this._childrenArray[index] = new gdjs.Variable();\n      return this._childrenArray[index];\n    }\n\n    /**\n     * Removes a variable at a given index of the array.\n     */\n    removeAtIndex(index: integer) {\n      if (this._type === 'array') this._childrenArray.splice(index, 1);\n    }\n\n    /**\n     * Pushes a copy of a variable into the array.\n     */\n    pushVariableCopy(variable: gdjs.Variable) {\n      this.castTo('array');\n      this._childrenArray.push(variable.clone());\n    }\n\n    /**\n     * Pushes a value into the array.\n     */\n    pushValue(value: string | float | boolean) {\n      this.castTo('array');\n      this._childrenArray.push(\n        new gdjs.Variable({\n          type: typeof value as 'string' | 'number' | 'boolean',\n          value,\n        })\n      );\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
