{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/fontfaceobserver-font-manager/fontfaceobserver-font-manager.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-present Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Font manager');\n\n  /**\n   * FontFaceObserverFontManager loads fonts (using `FontFace` or `fontfaceobserver` library)\n   * from the game resources (see `loadFonts`), and allow to access to\n   * the font families of the loaded fonts during the game (see `getFontFamily`).\n   */\n  export class FontFaceObserverFontManager {\n    _resourcesLoader: RuntimeGameResourcesLoader;\n    _resources: ResourceData[];\n    // Associate font resource names to the loaded font family\n    _loadedFontFamily: { [key: string]: string } = {};\n    // Associate font resource names to the resources, for faster access\n    _loadedFonts: { [key: string]: ResourceData } = {};\n    _filenameToFontFamily: { [key: string]: string } = {};\n\n    /**\n     * @param resources The resources data of the game.\n     * @param resourcesLoader The resources loader of the game.\n     */\n    constructor(\n      resources: ResourceData[],\n      resourcesLoader: RuntimeGameResourcesLoader\n    ) {\n      this._resources = resources;\n      this._resourcesLoader = resourcesLoader;\n    }\n\n    // Cache the result of transforming a filename to a font family - useful to avoid duplicates.\n    /**\n     * Update the resources data of the game. Useful for hot-reloading, should not be used otherwise.\n     *\n     * @param resources The resources data of the game.\n     */\n    setResources(resources: ResourceData[]): void {\n      this._resources = resources;\n    }\n\n    /**\n     * Return the font family associated to the specified font resource name.\n     * The font resource must have been loaded before. If that's not the case,\n     * a default font family will be returned (\"Arial\").\n     *\n     * @param resourceName The name of the resource to get.\n     * @returns The font family to be used for this font resource,\n     * or \"Arial\" if not loaded.\n     */\n    getFontFamily(resourceName: string): string {\n      if (this._loadedFontFamily[resourceName]) {\n        return this._loadedFontFamily[resourceName];\n      }\n      return 'Arial';\n    }\n\n    /**\n     * Return the font file associated to the specified font resource name.\n     * The font resource must have been loaded before. If that's not the case,\n     * the resource name will be returned (to\n     * keep compatibility with GDevelop 5.0-beta56 and previous).\n     *\n     * Should only be useful for renderers running on a non HTML5/non browser environment.\n     *\n     * @param resourceName The name of the resource to get.\n     * @returns The file of the font resource.\n     */\n    getFontFile(resourceName: string): string {\n      if (this._loadedFonts[resourceName]) {\n        return this._loadedFonts[resourceName].file || '';\n      }\n      return resourceName;\n    }\n\n    /**\n     * Return the font family to use for a given filename.\n     * Each filename is guaranteed to have a unique font family. You should not rely\n     * on the font family formatting (consider it as an \"opaque string\") - it's slugified\n     * (no spaces, no dots, no non-alphanumeric characters) to avoid issues when using the\n     * font family in various contexts.\n     *\n     * @param filename The filename of the font.\n     * @returns The font family to be used for this font resource.\n     */\n    _getFontFamilyFromFilename(filename: string): string {\n      if (this._filenameToFontFamily[filename]) {\n        return this._filenameToFontFamily[filename];\n      }\n\n      // Replaces all non-alphanumeric characters with dashes to ensure no issues when\n      // referring to this font family (see https://github.com/4ian/GDevelop/issues/1521).\n      let baseSlugifiedName =\n        'gdjs_font_' + filename.toLowerCase().replace(/[^\\w]/gi, '-');\n\n      // Ensure the generated font family is unique.\n      const slugifiedName = baseSlugifiedName;\n      let uniqueSuffix = 2;\n      while (!!this._filenameToFontFamily[baseSlugifiedName]) {\n        baseSlugifiedName = baseSlugifiedName + '-' + uniqueSuffix;\n        uniqueSuffix++;\n      }\n\n      // Cache the result to avoid collision with a similar slugified name for another filename.\n      return (this._filenameToFontFamily[filename] = slugifiedName);\n    }\n\n    /**\n     * Load the font at the given `src` location (relative to the project), giving\n     * it the specified `fontFamily` name.\n     *\n     * This uses FontFace (if supported) or @font-face + FontFaceObserver\n     * to load a font from an url and be notified when loading is done (or failed).\n     *\n     * @param fontFamily The font\n     * @returns The font family to be used for this font resource.\n     */\n    private _loadFont(fontFamily: string, src): Promise<void> {\n      const descriptors = {};\n      const srcWithUrl = 'url(' + encodeURI(src) + ')';\n\n      // @ts-ignore\n      if (typeof FontFace !== 'undefined') {\n        // Load the given font using CSS Font Loading API.\n        return fetch(this._resourcesLoader.getFullUrl(src), {\n          credentials: this._resourcesLoader.checkIfCredentialsRequired(src)\n            ? // Any resource stored on the GDevelop Cloud buckets needs the \"credentials\" of the user,\n              // i.e: its gdevelop.io cookie, to be passed.\n              'include'\n            : // For other resources, use \"same-origin\" as done by default by fetch.\n              'same-origin',\n        })\n          .then((response) => {\n            if (!response.ok) {\n              const errorMessage =\n                'Unable to fetch ' +\n                src +\n                ' to be loaded as a font. HTTP status is: ' +\n                response.status +\n                '.';\n              logger.error(errorMessage);\n              throw new Error(errorMessage);\n            }\n\n            return response.arrayBuffer();\n          })\n          .then((arrayBuffer) => {\n            // @ts-ignore\n            const fontFace = new FontFace(fontFamily, arrayBuffer, descriptors);\n\n            // @ts-ignore\n            document.fonts.add(fontFace);\n          });\n      } else {\n        // TODO: this method of loading font should be removed as old and not allowing\n        // to handle loading with credentials. All moderns and not-so-modern browsers\n        // that we support also support FontFace API.\n\n        // Add @font-face and use FontFaceObserver to be notified when the\n        // font is ready.\n        const newStyle = document.createElement('style');\n        newStyle.appendChild(\n          document.createTextNode(\n            \"@font-face { font-family: '\" +\n              fontFamily +\n              \"'; src: \" +\n              srcWithUrl +\n              '; }'\n          )\n        );\n        document.head.appendChild(newStyle);\n\n        // @ts-ignore\n        return new FontFaceObserver(fontFamily, descriptors).load();\n      }\n    }\n\n    /**\n     * Load the specified resources, so that fonts are loaded and can then be\n     * used by using the font family returned by getFontFamily.\n     * @param onProgress Callback called each time a new file is loaded.\n     * @param onComplete Callback called when loading is done.\n     */\n    loadFonts(onProgress, onComplete) {\n      const resources = this._resources;\n\n      // Construct the list of files to be loaded.\n      // For one loaded file, it can have one or more resources\n      // that use it.\n      const filesResources: { [key: string]: ResourceData[] } = {};\n      for (let i = 0, len = resources.length; i < len; ++i) {\n        const res = resources[i];\n        if (res.file && res.kind === 'font') {\n          if (!!this._loadedFonts[res.name]) {\n            continue;\n          }\n          filesResources[res.file] = filesResources[res.file]\n            ? filesResources[res.file].concat(res)\n            : [res];\n        }\n      }\n      const totalCount = Object.keys(filesResources).length;\n      if (totalCount === 0) {\n        return onComplete(\n          // Nothing to load.\n          totalCount\n        );\n      }\n      let loadingCount = 0;\n\n      const onFontLoaded = (\n        fontFamily: string,\n        fontResources: ResourceData[]\n      ) => {\n        fontResources.forEach((resource) => {\n          this._loadedFontFamily[resource.name] = fontFamily;\n          this._loadedFonts[resource.name] = resource;\n        });\n        loadingCount++;\n        onProgress(loadingCount, totalCount);\n        if (loadingCount === totalCount) {\n          onComplete(totalCount);\n        }\n      };\n      Object.keys(filesResources).forEach((file) => {\n        const fontFamily = this._getFontFamilyFromFilename(file);\n        const fontResources = filesResources[file];\n        this._loadFont(fontFamily, file).then(\n          () => {\n            onFontLoaded(fontFamily, fontResources);\n          },\n          (error) => {\n            logger.error(\n              'Error loading font resource \"' +\n                fontResources[0].name +\n                '\" (file: ' +\n                file +\n                '): ' +\n                (error.message || 'Unknown error')\n            );\n            onFontLoaded(fontFamily, fontResources);\n          }\n        );\n      });\n    }\n  }\n\n  //Register the class to let the engine use it.\n  export type FontManager = FontFaceObserverFontManager;\n  export const FontManager = FontFaceObserverFontManager;\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,gBAOxB,OAAkC,CAavC,YACE,EACA,EACA,CAZF,uBAA+C,GAE/C,kBAAgD,GAChD,2BAAmD,GAUjD,KAAK,WAAa,EAClB,KAAK,iBAAmB,EAS1B,aAAa,EAAiC,CAC5C,KAAK,WAAa,EAYpB,cAAc,EAA8B,CAC1C,MAAI,MAAK,kBAAkB,GAClB,KAAK,kBAAkB,GAEzB,QAcT,YAAY,EAA8B,CACxC,MAAI,MAAK,aAAa,GACb,KAAK,aAAa,GAAc,MAAQ,GAE1C,EAaT,2BAA2B,EAA0B,CACnD,GAAI,KAAK,sBAAsB,GAC7B,MAAO,MAAK,sBAAsB,GAKpC,GAAI,GACF,aAAe,EAAS,cAAc,QAAQ,UAAW,KAG3D,KAAM,GAAgB,EACtB,GAAI,GAAe,EACnB,KAAS,KAAK,sBAAsB,IAClC,EAAoB,EAAoB,IAAM,EAC9C,IAIF,MAAQ,MAAK,sBAAsB,GAAY,EAazC,UAAU,EAAoB,EAAoB,CACxD,KAAM,GAAc,GACd,EAAa,OAAS,UAAU,GAAO,IAG7C,GAAI,MAAO,WAAa,YAEtB,MAAO,OAAM,KAAK,iBAAiB,WAAW,GAAM,CAClD,YAAa,KAAK,iBAAiB,2BAA2B,GAG1D,UAEA,gBAEH,KAAK,AAAC,GAAa,CAClB,GAAI,CAAC,EAAS,GAAI,CAChB,KAAM,GACJ,mBACA,EACA,4CACA,EAAS,OACT,IACF,QAAO,MAAM,GACP,GAAI,OAAM,GAGlB,MAAO,GAAS,gBAEjB,KAAK,AAAC,GAAgB,CAErB,KAAM,GAAW,GAAI,UAAS,EAAY,EAAa,GAGvD,SAAS,MAAM,IAAI,KAElB,CAOL,KAAM,GAAW,SAAS,cAAc,SACxC,SAAS,YACP,SAAS,eACP,8BACE,EACA,WACA,EACA,QAGN,SAAS,KAAK,YAAY,GAGnB,GAAI,kBAAiB,EAAY,GAAa,QAUzD,UAAU,EAAY,EAAY,CAChC,KAAM,GAAY,KAAK,WAKjB,EAAoD,GAC1D,OAAS,GAAI,EAAG,EAAM,EAAU,OAAQ,EAAI,EAAK,EAAE,EAAG,CACpD,KAAM,GAAM,EAAU,GACtB,GAAI,EAAI,MAAQ,EAAI,OAAS,OAAQ,CACnC,GAAM,KAAK,aAAa,EAAI,MAC1B,SAEF,EAAe,EAAI,MAAQ,EAAe,EAAI,MAC1C,EAAe,EAAI,MAAM,OAAO,GAChC,CAAC,IAGT,KAAM,GAAa,OAAO,KAAK,GAAgB,OAC/C,GAAI,IAAe,EACjB,MAAO,GAEL,GAGJ,GAAI,GAAe,EAEnB,KAAM,GAAe,CACnB,EACA,IACG,CACH,EAAc,QAAQ,AAAC,GAAa,CAClC,KAAK,kBAAkB,EAAS,MAAQ,EACxC,KAAK,aAAa,EAAS,MAAQ,IAErC,IACA,EAAW,EAAc,GACrB,IAAiB,GACnB,EAAW,IAGf,OAAO,KAAK,GAAgB,QAAQ,AAAC,GAAS,CAC5C,KAAM,GAAa,KAAK,2BAA2B,GAC7C,EAAgB,EAAe,GACrC,KAAK,UAAU,EAAY,GAAM,KAC/B,IAAM,CACJ,EAAa,EAAY,IAE3B,AAAC,GAAU,CACT,EAAO,MACL,gCACE,EAAc,GAAG,KACjB,YACA,EACA,MACC,GAAM,SAAW,kBAEtB,EAAa,EAAY,QAtO5B,EAAM,8BA+OA,cAAc,IAvPnB",
  "names": []
}
