{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/events-tools/storagetools.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Storage');\n  export namespace evtTools {\n    /**\n     * Functions to store and load basic values (strings or numbers), organized\n     * into objects:\n     * * Each object has a name\n     * * Each value can be accessed using a path-like string\n     *   (for example: `Root/Some folder/MyValueName`), where each segment is\n     *   separated by a slash.\n     *\n     * These objects are persisted into the environment `localStorage` - which\n     * might not always be available (if not, objects won't be persisted).\n     */\n    export namespace storage {\n      let localStorage: Storage | null = null;\n      try {\n        // @ts-ignore\n        if (typeof cc !== 'undefined') {\n          // @ts-ignore\n          localStorage = cc.sys.localStorage;\n        } else {\n          if (typeof window !== 'undefined') {\n            // @ts-ignore\n            localStorage = window.localStorage;\n          }\n        }\n      } catch (error) {\n        logger.error('Unable to get access to the localStorage: ' + error);\n      }\n      if (!localStorage) {\n        logger.error(\n          \"Storage actions won't work as no localStorage was found.\"\n        );\n      }\n\n      /** The stored objects that are loaded in memory */\n      const loadedObjects = new Hashtable();\n\n      /**\n       * Load into memory a JSON serialized object, from the local storage\n       * provided by the browser/environment.\n       *\n       * The object name is prefixed with `GDJS_` in `localStorage`.\n       *\n       * @param name The name of the object to load\n       */\n      export const loadJSONFileFromStorage = (name: string) => {\n        if (\n          loadedObjects.containsKey(\n            // Already loaded.\n            name\n          )\n        ) {\n          return;\n        }\n        let serializedString: string | null = null;\n        try {\n          if (localStorage) {\n            serializedString = localStorage.getItem('GDJS_' + name);\n          }\n        } catch (error) {\n          logger.error(\n            'Unable to load data from localStorage for \"' + name + '\": ' + error\n          );\n        }\n        let jsObject = {};\n        try {\n          if (serializedString) {\n            jsObject = JSON.parse(serializedString);\n          }\n        } catch (error) {\n          logger.error(\n            'Unable to load data from \"' +\n              name +\n              '\" - data is not valid JSON: ' +\n              error\n          );\n        }\n        loadedObjects.put(name, jsObject);\n      };\n\n      /**\n       * Unload from memory an object, which is then serialized as JSON and\n       * stored in the local storage provided by the browser/environment.\n       *\n       * The object name is prefixed with `GDJS_` in `localStorage`.\n       *\n       * @param name The name of the object to load\n       */\n      export const unloadJSONFile = (name: string) => {\n        if (\n          !loadedObjects.containsKey(\n            // Not loaded.\n            name\n          )\n        ) {\n          return;\n        }\n        const jsObject = loadedObjects.get(name);\n        const serializedString = JSON.stringify(jsObject);\n        try {\n          if (localStorage) {\n            localStorage.setItem('GDJS_' + name, serializedString);\n          }\n        } catch (error) {\n          logger.error(\n            'Unable to save data to localStorage for \"' + name + '\": ' + error\n          );\n        }\n        loadedObjects.remove(name);\n      };\n      const loadObject = (name: string, cb: Function) => {\n        let notPermanentlyLoaded = false;\n        if (!loadedObjects.containsKey(name)) {\n          notPermanentlyLoaded = true;\n          loadJSONFileFromStorage(name);\n        }\n        const returnValue = cb(loadedObjects.get(name));\n        if (notPermanentlyLoaded) {\n          unloadJSONFile(name);\n        }\n        return returnValue;\n      };\n\n      export const clearJSONFile = (name: string) => {\n        return loadObject(name, (jsObject) => {\n          for (const p in jsObject) {\n            if (jsObject.hasOwnProperty(p)) {\n              delete jsObject[p];\n            }\n          }\n          return true;\n        });\n      };\n\n      export const elementExistsInJSONFile = (\n        name: string,\n        elementPath: string\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              return false;\n            }\n            currentElem = currentElem[pathSegments[i]];\n          }\n          return true;\n        });\n      };\n\n      export const deleteElementFromJSONFile = (\n        name: string,\n        elementPath: string\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              return false;\n            }\n            if (i === pathSegments.length - 1) {\n              delete currentElem[pathSegments[i]];\n            } else {\n              currentElem = currentElem[pathSegments[i]];\n            }\n          }\n          return true;\n        });\n      };\n\n      export const writeNumberInJSONFile = (\n        name: string,\n        elementPath: string,\n        val: any\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              currentElem[pathSegments[i]] = {};\n            }\n            if (i === pathSegments.length - 1) {\n              currentElem[pathSegments[i]].value = val;\n            } else {\n              currentElem = currentElem[pathSegments[i]];\n            }\n          }\n          return true;\n        });\n      };\n\n      export const writeStringInJSONFile = (\n        name: string,\n        elementPath: string,\n        str: any\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              currentElem[pathSegments[i]] = {};\n            }\n            if (i === pathSegments.length - 1) {\n              currentElem[pathSegments[i]].str = str;\n            } else {\n              currentElem = currentElem[pathSegments[i]];\n            }\n          }\n          return true;\n        });\n      };\n\n      export const readNumberFromJSONFile = (\n        name: string,\n        elementPath: string,\n        instanceContainer: gdjs.RuntimeInstanceContainer | null,\n        variable: gdjs.Variable\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              return false;\n            }\n            if (\n              i === pathSegments.length - 1 &&\n              typeof currentElem[pathSegments[i]].value !== 'undefined'\n            ) {\n              variable.setNumber(currentElem[pathSegments[i]].value);\n            } else {\n              currentElem = currentElem[pathSegments[i]];\n            }\n          }\n          return true;\n        });\n      };\n\n      export const readStringFromJSONFile = (\n        name: string,\n        elementPath: string,\n        instanceContainer: gdjs.RuntimeInstanceContainer | null,\n        variable: gdjs.Variable\n      ) => {\n        return loadObject(name, (jsObject) => {\n          const pathSegments = elementPath.split('/');\n          let currentElem = jsObject;\n          for (let i = 0; i < pathSegments.length; ++i) {\n            if (!currentElem[pathSegments[i]]) {\n              return false;\n            }\n            if (\n              i === pathSegments.length - 1 &&\n              typeof currentElem[pathSegments[i]].str !== 'undefined'\n            ) {\n              variable.setString(currentElem[pathSegments[i]].str);\n            } else {\n              currentElem = currentElem[pathSegments[i]];\n            }\n          }\n          return true;\n        });\n      };\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
