{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/events-tools/stringtools.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  export namespace evtTools {\n    /**\n     * Tools related to strings manipulation, for events generated code.\n     */\n    export namespace string {\n      /**\n       * Return a string containing a new line character.\n       */\n      export const newLine = function () {\n        return '\\n';\n      };\n\n      /**\n       * Return a character from its codepoint.\n       */\n      export const fromCodePoint = function (codePoint) {\n        return String.fromCodePoint(codePoint);\n      };\n\n      /**\n       * Return the uppercased version of the string.\n       */\n      export const toUpperCase = function (str: string) {\n        return str.toUpperCase();\n      };\n\n      /**\n       * Return the lowercased version of the string.\n       */\n      export const toLowerCase = function (str: string) {\n        return str.toLowerCase();\n      };\n\n      /**\n       * Return a new string containing the substring of the original string.\n       */\n      export const subStr = function (\n        str: string,\n        start: integer,\n        len: integer\n      ) {\n        if (start < str.length && start >= 0) {\n          return str.substr(start, len);\n        }\n        return '';\n      };\n\n      /**\n       * Return a new string containing the character at the specified position.\n       */\n      export const strAt = function (str: string, start: integer) {\n        if (start < str.length && start >= 0) {\n          return str.substr(start, 1);\n        }\n        return '';\n      };\n\n      /**\n       * Return the string repeated.\n       */\n      export const strRepeat = function (str: string, count: integer) {\n        let result = '';\n        for (let i = 0; i < count; i++) {\n          result += str;\n        }\n        return result;\n      };\n\n      /**\n       * Return the length of the string\n       */\n      export const strLen = function (str: string) {\n        return str.length;\n      };\n\n      /**\n       * Search the first occurrence in a string (return the position of the result, from the beginning of the string, or -1 if not found)\n       */\n      export const strFind = function (str: string, what: string) {\n        return str.indexOf(what);\n      };\n\n      /**\n       * Search the last occurrence in a string (return the position of the result, from the beginning of the string, or -1 if not found)\n       */\n      export const strFindLast = function (str: string, what: string) {\n        return str.lastIndexOf(what);\n      };\n\n      /**\n       * @deprecated\n       */\n      export const strRFind = gdjs.evtTools.string.strFindLast;\n\n      /**\n       * Search the first occurrence in a string, starting from a specified position (return the position of the result, from the beginning of the string, or -1 if not found)\n       */\n      export const strFindFrom = function (\n        str: string,\n        what: string,\n        pos: integer\n      ) {\n        return str.indexOf(what, pos);\n      };\n\n      /**\n       * Search the last occurrence in a string, starting from a specified position (return the position of the result, from the beginning of the string, or -1 if not found)\n       */\n      export const strFindLastFrom = function (\n        str: string,\n        what: string,\n        pos: integer\n      ) {\n        return str.lastIndexOf(what, pos);\n      };\n\n      /**\n       * Return a new string with the content of `str` where the first occurrence of `pattern`\n       * is replaced by `replacement`.\n       */\n      export const strReplaceOne = function (\n        str: string,\n        pattern: string,\n        replacement: string\n      ) {\n        return str.replace(pattern, replacement);\n      };\n\n      /**\n       * Return a new string with the content of `str` where all occurrences of `pattern`\n       * are replaced by `replacement`.\n       */\n      export const strReplaceAll = function (\n        str: string,\n        pattern: string,\n        replacement: string\n      ) {\n        let updatedStr = str;\n        let searchStartPosition = 0;\n\n        let patternPosition = updatedStr.indexOf(pattern, searchStartPosition);\n        while (patternPosition !== -1) {\n          // Replace the pattern by the replacement.\n          updatedStr =\n            updatedStr.substring(0, patternPosition) +\n            replacement +\n            updatedStr.substring(\n              patternPosition + pattern.length,\n              updatedStr.length\n            );\n\n          // Start the search again after the replacement.\n          // If the pattern to search is empty, add 1 because an empty pattern means that every \"empty\n          // space\" between each character will be matched. If we don't add 1, we would match again the\n          // \"empty space\" just after where we added the replacement.\n          searchStartPosition =\n            patternPosition +\n            replacement.length +\n            (pattern.length === 0 ? 1 : 0);\n\n          // An empty string `indexOf` will return 0 when the pattern is an empty string,\n          // even if `searchStartPosition` is *after* the end of the string.\n          // So bail out manually.\n          // Note that if we are just at the end of the string (`searchStartPosition === updatedStr.length`),\n          // it's still valid to do a search because if the pattern is an empty string,\n          // it should match the \"empty space\" which is at the very end.\n          if (searchStartPosition > updatedStr.length) break;\n          patternPosition = updatedStr.indexOf(pattern, searchStartPosition);\n        }\n\n        return updatedStr;\n      };\n\n      /**\n       * @deprecated\n       */\n      export const strRFindFrom = gdjs.evtTools.string.strFindLastFrom;\n    }\n  }\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CAIE,GAAU,GAAV,UAAU,EAAV,CAIE,AAAM,UAAU,UAAY,CACjC,MAAO;AAAA,GAMI,gBAAgB,SAAU,EAAW,CAChD,MAAO,QAAO,cAAc,IAMjB,cAAc,SAAU,EAAa,CAChD,MAAO,GAAI,eAMA,cAAc,SAAU,EAAa,CAChD,MAAO,GAAI,eAMA,SAAS,SACpB,EACA,EACA,EACA,CACA,MAAI,GAAQ,EAAI,QAAU,GAAS,EAC1B,EAAI,OAAO,EAAO,GAEpB,IAMI,QAAQ,SAAU,EAAa,EAAgB,CAC1D,MAAI,GAAQ,EAAI,QAAU,GAAS,EAC1B,EAAI,OAAO,EAAO,GAEpB,IAMI,YAAY,SAAU,EAAa,EAAgB,CAC9D,GAAI,GAAS,GACb,OAAS,GAAI,EAAG,EAAI,EAAO,IACzB,GAAU,EAEZ,MAAO,IAMI,SAAS,SAAU,EAAa,CAC3C,MAAO,GAAI,QAMA,UAAU,SAAU,EAAa,EAAc,CAC1D,MAAO,GAAI,QAAQ,IAMR,cAAc,SAAU,EAAa,EAAc,CAC9D,MAAO,GAAI,YAAY,IAMZ,WAAW,EAAK,SAAS,OAAO,YAKhC,cAAc,SACzB,EACA,EACA,EACA,CACA,MAAO,GAAI,QAAQ,EAAM,IAMd,kBAAkB,SAC7B,EACA,EACA,EACA,CACA,MAAO,GAAI,YAAY,EAAM,IAOlB,gBAAgB,SAC3B,EACA,EACA,EACA,CACA,MAAO,GAAI,QAAQ,EAAS,IAOjB,gBAAgB,SAC3B,EACA,EACA,EACA,CACA,GAAI,GAAa,EACb,EAAsB,EAEtB,EAAkB,EAAW,QAAQ,EAAS,GAClD,KAAO,IAAoB,IAEzB,GACE,EAAW,UAAU,EAAG,GACxB,EACA,EAAW,UACT,EAAkB,EAAQ,OAC1B,EAAW,QAOf,EACE,EACA,EAAY,OACX,GAAQ,SAAW,EAAI,EAAI,GAQ1B,IAAsB,EAAW,UACrC,EAAkB,EAAW,QAAQ,EAAS,GAGhD,MAAO,IAMI,eAAe,EAAK,SAAS,OAAO,kBA5KlC,6BAJF,iCADT",
  "names": []
}
