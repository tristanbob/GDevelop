{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/events-tools/windowtools.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  export namespace evtTools {\n    /**\n     * Tools related to window, for events generated code.\n     */\n    export namespace window {\n      export const setMargins = function (\n        runtimeScene: gdjs.RuntimeScene,\n        top: number,\n        right: number,\n        bottom: number,\n        left: number\n      ) {\n        runtimeScene\n          .getGame()\n          .getRenderer()\n          .setMargins(top, right, bottom, left);\n      };\n\n      export const setFullScreen = function (\n        runtimeScene: gdjs.RuntimeScene,\n        enable: boolean,\n        keepAspectRatio: boolean\n      ) {\n        runtimeScene.getGame().getRenderer().keepAspectRatio(keepAspectRatio);\n        runtimeScene.getGame().getRenderer().setFullScreen(enable);\n      };\n\n      export const isFullScreen = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): boolean {\n        return runtimeScene.getGame().getRenderer().isFullScreen();\n      };\n\n      export const setWindowSize = function (\n        runtimeScene: gdjs.RuntimeScene,\n        width: float,\n        height: float,\n        updateGameResolution: boolean\n      ) {\n        runtimeScene.getGame().getRenderer().setWindowSize(width, height);\n        if (updateGameResolution) {\n          runtimeScene.getGame().setGameResolutionSize(width, height);\n        }\n      };\n\n      export const centerWindow = function (runtimeScene: gdjs.RuntimeScene) {\n        runtimeScene.getGame().getRenderer().centerWindow();\n      };\n\n      export const setGameResolutionSize = function (\n        runtimeScene: gdjs.RuntimeScene,\n        width: float,\n        height: float\n      ) {\n        runtimeScene.getGame().setGameResolutionSize(width, height);\n      };\n\n      export const setGameResolutionResizeMode = function (\n        runtimeScene: gdjs.RuntimeScene,\n        resizeMode: string\n      ) {\n        runtimeScene.getGame().setGameResolutionResizeMode(resizeMode);\n      };\n\n      export const setAdaptGameResolutionAtRuntime = function (\n        runtimeScene: gdjs.RuntimeScene,\n        enable: boolean\n      ) {\n        runtimeScene.getGame().setAdaptGameResolutionAtRuntime(enable);\n      };\n\n      export const setWindowTitle = function (\n        runtimeScene: gdjs.RuntimeScene,\n        title: string\n      ) {\n        runtimeScene.getGame().getRenderer().setWindowTitle(title);\n      };\n\n      export const getWindowTitle = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): string {\n        return runtimeScene.getGame().getRenderer().getWindowTitle();\n      };\n\n      export const getWindowInnerWidth = function (): number {\n        if (\n          gdjs.RuntimeGameRenderer &&\n          gdjs.RuntimeGameRenderer.getWindowInnerWidth\n        ) {\n          return gdjs.RuntimeGameRenderer.getWindowInnerWidth();\n        }\n        // @ts-ignore\n        return typeof window !== 'undefined' ? window.innerWidth : 800;\n      };\n\n      export const getWindowInnerHeight = function (): number {\n        if (\n          gdjs.RuntimeGameRenderer &&\n          gdjs.RuntimeGameRenderer.getWindowInnerHeight\n        ) {\n          return gdjs.RuntimeGameRenderer.getWindowInnerHeight();\n        }\n        // @ts-ignore\n        return typeof window !== 'undefined' ? window.innerHeight : 800;\n      };\n\n      export const getGameResolutionWidth = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): number {\n        return runtimeScene.getGame().getGameResolutionWidth();\n      };\n\n      export const getGameResolutionHeight = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): number {\n        return runtimeScene.getGame().getGameResolutionHeight();\n      };\n\n      export const openURL = function (\n        url: string,\n        runtimeScene: gdjs.RuntimeScene\n      ) {\n        return runtimeScene.getGame().getRenderer().openURL(url);\n      };\n    }\n  }\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CAIE,GAAU,GAAV,UAAU,EAAV,CACE,AAAM,aAAa,SACxB,EACA,EACA,EACA,EACA,EACA,CACA,EACG,UACA,cACA,WAAW,EAAK,EAAO,EAAQ,IAGvB,gBAAgB,SAC3B,EACA,EACA,EACA,CACA,EAAa,UAAU,cAAc,gBAAgB,GACrD,EAAa,UAAU,cAAc,cAAc,IAGxC,eAAe,SAC1B,EACS,CACT,MAAO,GAAa,UAAU,cAAc,gBAGjC,gBAAgB,SAC3B,EACA,EACA,EACA,EACA,CACA,EAAa,UAAU,cAAc,cAAc,EAAO,GACtD,GACF,EAAa,UAAU,sBAAsB,EAAO,IAI3C,eAAe,SAAU,EAAiC,CACrE,EAAa,UAAU,cAAc,gBAG1B,wBAAwB,SACnC,EACA,EACA,EACA,CACA,EAAa,UAAU,sBAAsB,EAAO,IAGzC,8BAA8B,SACzC,EACA,EACA,CACA,EAAa,UAAU,4BAA4B,IAGxC,kCAAkC,SAC7C,EACA,EACA,CACA,EAAa,UAAU,gCAAgC,IAG5C,iBAAiB,SAC5B,EACA,EACA,CACA,EAAa,UAAU,cAAc,eAAe,IAGzC,iBAAiB,SAC5B,EACQ,CACR,MAAO,GAAa,UAAU,cAAc,kBAGjC,sBAAsB,UAAoB,CACrD,MACE,GAAK,qBACL,EAAK,oBAAoB,oBAElB,EAAK,oBAAoB,sBAG3B,MAAO,IAAW,YAAc,EAAO,WAAa,KAGhD,uBAAuB,UAAoB,CACtD,MACE,GAAK,qBACL,EAAK,oBAAoB,qBAElB,EAAK,oBAAoB,uBAG3B,MAAO,IAAW,YAAc,EAAO,YAAc,KAGjD,yBAAyB,SACpC,EACQ,CACR,MAAO,GAAa,UAAU,0BAGnB,0BAA0B,SACrC,EACQ,CACR,MAAO,GAAa,UAAU,2BAGnB,UAAU,SACrB,EACA,EACA,CACA,MAAO,GAAa,UAAU,cAAc,QAAQ,MAtHvC,6BAJF,iCADT",
  "names": []
}
