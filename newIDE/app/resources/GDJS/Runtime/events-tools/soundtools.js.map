{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/events-tools/soundtools.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  export namespace evtTools {\n    export namespace sound {\n      const logger = new gdjs.Logger('Audio events');\n\n      export const getGlobalVolume = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): float {\n        return runtimeScene.getScene().getSoundManager().getGlobalVolume();\n      };\n\n      export const setGlobalVolume = function (\n        runtimeScene: gdjs.RuntimeScene,\n        globalVolume: float\n      ): void {\n        runtimeScene.getScene().getSoundManager().setGlobalVolume(globalVolume);\n      };\n\n      export const unloadAllAudio = function (\n        runtimeScene: gdjs.RuntimeScene\n      ): void {\n        runtimeScene.getScene().getSoundManager().unloadAll();\n      };\n\n      // Sounds:\n      export const playSound = function (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string,\n        loop: boolean,\n        volume: float,\n        pitch: float\n      ): void {\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .playSound(soundFile, loop, volume, pitch);\n      };\n\n      export const playSoundOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string,\n        channel: integer,\n        loop: boolean,\n        volume: float,\n        pitch: float\n      ): void {\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .playSoundOnChannel(soundFile, channel, loop, volume, pitch);\n      };\n\n      export const stopSoundOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) sound.stop();\n        else {\n          logger.error(`Cannot stop non-existing sound on channel ${channel}.`);\n        }\n      };\n\n      export const pauseSoundOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) sound.pause();\n        else {\n          logger.error(\n            `Cannot pause non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n\n      export const continueSoundOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) {\n          if (!sound.playing()) sound.play();\n        } else {\n          logger.error(\n            `Cannot continue playing non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n\n      export const isSoundOnChannelPlaying = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        return sound ? sound.playing() : false;\n      };\n\n      export const isSoundOnChannelPaused = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) return sound.paused();\n        else {\n          logger.error(\n            `Cannot check if non-existing sound on channel ${channel} is paused.`\n          );\n          return false;\n        }\n      };\n\n      export const isSoundOnChannelStopped = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) return sound.stopped();\n        else {\n          logger.error(\n            `Cannot check if non-existing sound on channel ${channel} is stopped.`\n          );\n          return true;\n        }\n      };\n\n      export const getSoundOnChannelVolume = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) return sound.getVolume() * 100;\n        else {\n          logger.error(\n            `Cannot get the volume of a non-existing sound on channel ${channel}.`\n          );\n          return 100;\n        }\n      };\n\n      export const setSoundOnChannelVolume = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        volume: float\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) sound.setVolume(volume / 100);\n        else {\n          logger.error(\n            `Cannot set the volume of a non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n\n      export const getSoundOnChannelPlayingOffset = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) return sound.getSeek();\n        else {\n          logger.error(\n            `Cannot get the playing offset of a non-existing sound on channel ${channel}.`\n          );\n          return 0;\n        }\n      };\n\n      export const setSoundOnChannelPlayingOffset = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        playingOffset: float\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) sound.setSeek(playingOffset);\n        else {\n          logger.error(\n            `Cannot set the playing offset of a non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n\n      export const getSoundOnChannelPitch = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) return sound.getRate();\n        else {\n          logger.error(\n            `Cannot get the pitch of a non-existing sound on channel ${channel}.`\n          );\n          return 1;\n        }\n      };\n\n      export const setSoundOnChannelPitch = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        pitch: float\n      ): void {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) sound.setRate(pitch);\n        else {\n          logger.error(\n            `Cannot get the pitch of a non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n\n      export const preloadSound = (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string\n      ) =>\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .loadAudio(soundFile, /* isMusic= */ false);\n\n      export const unloadSound = (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string\n      ) =>\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .unloadAudio(soundFile, /* isMusic= */ false);\n\n      // Musics:\n      export const playMusic = function (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string,\n        loop: boolean,\n        volume: float,\n        pitch: float\n      ): void {\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .playMusic(soundFile, loop, volume, pitch);\n      };\n\n      export const playMusicOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string,\n        channel: integer,\n        loop: boolean,\n        volume: float,\n        pitch: float\n      ): void {\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .playMusicOnChannel(soundFile, channel, loop, volume, pitch);\n      };\n\n      export const stopMusicOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) music.stop();\n        else {\n          logger.error(\n            `Cannot stop a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const pauseMusicOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) music.pause();\n        else {\n          logger.error(\n            `Cannot pause a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const continueMusicOnChannel = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) {\n          if (!music.playing()) music.play();\n        } else {\n          logger.error(\n            `Cannot stop a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const isMusicOnChannelPlaying = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        return music ? music.playing() : false;\n      };\n\n      export const isMusicOnChannelPaused = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) return music.paused();\n        else {\n          logger.error(\n            `Cannot check if non-existing music on channel ${channel} is paused.`\n          );\n          return false;\n        }\n      };\n\n      export const isMusicOnChannelStopped = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): boolean {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) return music.stopped();\n        else {\n          logger.error(\n            `Cannot check if non-existing music on channel ${channel} is stopped.`\n          );\n          return true;\n        }\n      };\n\n      export const getMusicOnChannelVolume = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) return music.getVolume() * 100;\n        else {\n          logger.error(\n            `Cannot get the volume of a non-existing music on channel ${channel}.`\n          );\n          return 100;\n        }\n      };\n\n      export const setMusicOnChannelVolume = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        volume: float\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) music.setVolume(volume / 100);\n        else {\n          logger.error(\n            `Cannot set the volume of a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const getMusicOnChannelPlayingOffset = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) return music.getSeek();\n        else {\n          logger.error(\n            `Cannot get the playing offset of a non-existing music on channel ${channel}.`\n          );\n          return 0;\n        }\n      };\n\n      export const setMusicOnChannelPlayingOffset = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        playingOffset: float\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) music.setSeek(playingOffset);\n        else {\n          logger.error(\n            `Cannot set the playing offset of a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const getMusicOnChannelPitch = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer\n      ): float {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) return music.getRate();\n        else {\n          logger.error(\n            `Cannot get the pitch of a non-existing music on channel ${channel}.`\n          );\n          return 1;\n        }\n      };\n\n      export const setMusicOnChannelPitch = function (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        pitch: float\n      ): void {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) music.setRate(pitch);\n        else {\n          logger.error(\n            `Cannot get the pitch of a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n\n      export const preloadMusic = (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string\n      ) =>\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .loadAudio(soundFile, /* isMusic= */ true);\n\n      export const unloadMusic = (\n        runtimeScene: gdjs.RuntimeScene,\n        soundFile: string\n      ) =>\n        runtimeScene\n          .getScene()\n          .getSoundManager()\n          .unloadAudio(soundFile, /* isMusic= */ true);\n\n      export const fadeSoundVolume = (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        toVolume: float,\n        timeOfFade: float /* in seconds */\n      ) => {\n        const sound = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getSoundOnChannel(channel);\n        if (sound) {\n          sound.fade(sound.getVolume(), toVolume / 100, timeOfFade * 1000);\n        } else {\n          logger.error(\n            `Cannot fade the volume of a non-existing sound on channel ${channel}.`\n          );\n        }\n      };\n      export const fadeMusicVolume = (\n        runtimeScene: gdjs.RuntimeScene,\n        channel: integer,\n        toVolume: float,\n        timeOfFade: float /* in seconds */\n      ) => {\n        const music = runtimeScene\n          .getScene()\n          .getSoundManager()\n          .getMusicOnChannel(channel);\n        if (music) {\n          music.fade(music.getVolume(), toVolume / 100, timeOfFade * 1000);\n        } else {\n          logger.error(\n            `Cannot fade the volume of a non-existing music on channel ${channel}.`\n          );\n        }\n      };\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
