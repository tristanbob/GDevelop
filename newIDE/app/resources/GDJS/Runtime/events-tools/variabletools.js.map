{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/events-tools/variabletools.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  export namespace evtTools {\n    /**\n     * A namespace of functional equivalents to the gdjs.Variable methods, needed for events code generation.\n     * @private\n     * @namespace\n     */\n    export namespace variable {\n      /**\n       * Get the value of a variable. Equivalent to `variable.getAsNumber()`.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const getVariableNumber = function (\n        variable: gdjs.Variable\n      ): number {\n        return variable.getAsNumber();\n      };\n\n      /**\n       * Get the string of a variable. Equivalent to `variable.getAsString()`.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const getVariableString = function (\n        variable: gdjs.Variable\n      ): string {\n        return variable.getAsString();\n      };\n\n      /**\n       * Compares the boolean value of a variable.\n       * Equivalent to `variable.getAsBoolean() === boolean`.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const getVariableBoolean = function (\n        variable: gdjs.Variable,\n        compareWith: boolean\n      ): boolean {\n        return variable.getAsBoolean() === compareWith;\n      };\n\n      /**\n       * Set the boolean value of a variable. Equivalent to `variable.setBoolean()`.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const setVariableBoolean = function (\n        variable: gdjs.Variable,\n        newValue: boolean\n      ) {\n        variable.setBoolean(newValue);\n      };\n\n      /**\n       * Toggles the boolean value of a variable.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const toggleVariableBoolean = function (variable: gdjs.Variable) {\n        variable.setBoolean(!variable.getAsBoolean());\n      };\n\n      /**\n       * Check if a scene variable exists.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const sceneVariableExists = function (\n        runtimeScene: gdjs.RuntimeScene,\n        variableName: string\n      ): boolean {\n        return runtimeScene.getScene().getVariables().has(variableName);\n      };\n\n      /**\n       * Check if a global variable exists.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const globalVariableExists = function (\n        instanceContainer: gdjs.RuntimeInstanceContainer,\n        variableName: string\n      ): boolean {\n        return instanceContainer.getGame().getVariables().has(variableName);\n      };\n\n      /**\n       * Check if a child exists in a variable.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const variableChildExists = function (\n        variable: gdjs.Variable,\n        childName: string\n      ): boolean {\n        return variable.hasChild(childName);\n      };\n\n      /**\n       * Remove the child with the given name in a variable.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const variableRemoveChild = function (\n        variable: gdjs.Variable,\n        childName: string\n      ): void {\n        variable.removeChild(childName);\n      };\n\n      /**\n       * Clear the children in a variable.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const variableClearChildren = function (variable: gdjs.Variable) {\n        variable.clearChildren();\n      };\n\n      /**\n       * Pushes a variable onto an array.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const variablePushCopy = function (\n        array: gdjs.Variable,\n        variable: gdjs.Variable\n      ) {\n        array.pushVariableCopy(variable);\n      };\n\n      /**\n       * Pushes a value onto an array.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const valuePush = function (\n        array: gdjs.Variable,\n        value: string | float | boolean\n      ) {\n        array.pushValue(value);\n      };\n\n      /**\n       * Removes an index from an array.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const variableRemoveAt = function (\n        array: gdjs.Variable,\n        index: number\n      ) {\n        array.removeAtIndex(index);\n      };\n\n      /**\n       * Get the number of children in a variable.\n       * This shortcut function is needed for events code generation.\n       * @private\n       */\n      export const getVariableChildCount = function (\n        variable: gdjs.Variable\n      ): number {\n        return variable.getChildrenCount();\n      };\n\n      /**\n       * Shortcut to get the first value of an array variable as a number.\n       */\n      export const getFirstVariableNumber = function (\n        array: gdjs.Variable\n      ): number {\n        if (array.getChildrenCount() === 0) {\n          return 0;\n        }\n        return array.getAllChildrenArray()[0].getAsNumber();\n      };\n\n      /**\n       * Shortcut to get the last value of an array variable as a string.\n       */\n      export const getFirstVariableString = function (\n        array: gdjs.Variable\n      ): string {\n        if (array.getChildrenCount() === 0) {\n          return '';\n        }\n        return array.getAllChildrenArray()[0].getAsString();\n      };\n\n      /**\n       * Shortcut to get the last value of an array variable as a number.\n       */\n      export const getLastVariableNumber = function (\n        array: gdjs.Variable\n      ): number {\n        const children = array.getAllChildrenArray();\n        return children.length === 0\n          ? 0\n          : children[children.length - 1].getAsNumber();\n      };\n\n      /**\n       * Shortcut to get the last value of an array variable as a string.\n       */\n      export const getLastVariableString = function (\n        array: gdjs.Variable\n      ): string {\n        const children = array.getAllChildrenArray();\n        return children.length === 0\n          ? ''\n          : children[children.length - 1].getAsString();\n      };\n    }\n\n    export namespace common {\n      /** @deprecated */\n      export const getVariableNumber = gdjs.evtTools.variable.getVariableNumber;\n      /** @deprecated */\n      export const getVariableString = gdjs.evtTools.variable.getVariableString;\n      /** @deprecated */\n      export const getVariableBoolean =\n        gdjs.evtTools.variable.getVariableBoolean;\n      /** @deprecated */\n      export const setVariableBoolean =\n        gdjs.evtTools.variable.setVariableBoolean;\n      /** @deprecated */\n      export const toggleVariableBoolean =\n        gdjs.evtTools.variable.toggleVariableBoolean;\n      /** @deprecated */\n      export const sceneVariableExists =\n        gdjs.evtTools.variable.sceneVariableExists;\n      /** @deprecated */\n      export const globalVariableExists =\n        gdjs.evtTools.variable.globalVariableExists;\n      /** @deprecated */\n      export const variableChildExists =\n        gdjs.evtTools.variable.variableChildExists;\n      /** @deprecated */\n      export const variableRemoveChild =\n        gdjs.evtTools.variable.variableRemoveChild;\n      /** @deprecated */\n      export const variableClearChildren =\n        gdjs.evtTools.variable.variableClearChildren;\n      /** @deprecated */\n      export const variablePushCopy = gdjs.evtTools.variable.variablePushCopy;\n      /** @deprecated */\n      export const valuePush = gdjs.evtTools.variable.valuePush;\n      /** @deprecated */\n      export const variableRemoveAt = gdjs.evtTools.variable.variableRemoveAt;\n      /** @deprecated */\n      export const getVariableChildCount =\n        gdjs.evtTools.variable.getVariableChildCount;\n    }\n  }\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CAME,GAAU,GAAV,UAAU,EAAV,CAME,AAAM,oBAAoB,SAC/B,EACQ,CACR,MAAO,GAAS,eAQL,oBAAoB,SAC/B,EACQ,CACR,MAAO,GAAS,eASL,qBAAqB,SAChC,EACA,EACS,CACT,MAAO,GAAS,iBAAmB,GAQxB,qBAAqB,SAChC,EACA,EACA,CACA,EAAS,WAAW,IAQT,wBAAwB,SAAU,EAAyB,CACtE,EAAS,WAAW,CAAC,EAAS,iBAQnB,sBAAsB,SACjC,EACA,EACS,CACT,MAAO,GAAa,WAAW,eAAe,IAAI,IAQvC,uBAAuB,SAClC,EACA,EACS,CACT,MAAO,GAAkB,UAAU,eAAe,IAAI,IAQ3C,sBAAsB,SACjC,EACA,EACS,CACT,MAAO,GAAS,SAAS,IAQd,sBAAsB,SACjC,EACA,EACM,CACN,EAAS,YAAY,IAQV,wBAAwB,SAAU,EAAyB,CACtE,EAAS,iBAQE,mBAAmB,SAC9B,EACA,EACA,CACA,EAAM,iBAAiB,IAQZ,YAAY,SACvB,EACA,EACA,CACA,EAAM,UAAU,IAQL,mBAAmB,SAC9B,EACA,EACA,CACA,EAAM,cAAc,IAQT,wBAAwB,SACnC,EACQ,CACR,MAAO,GAAS,oBAML,yBAAyB,SACpC,EACQ,CACR,MAAI,GAAM,qBAAuB,EACxB,EAEF,EAAM,sBAAsB,GAAG,eAM3B,yBAAyB,SACpC,EACQ,CACR,MAAI,GAAM,qBAAuB,EACxB,GAEF,EAAM,sBAAsB,GAAG,eAM3B,wBAAwB,SACnC,EACQ,CACR,KAAM,GAAW,EAAM,sBACvB,MAAO,GAAS,SAAW,EACvB,EACA,EAAS,EAAS,OAAS,GAAG,eAMvB,wBAAwB,SACnC,EACQ,CACR,KAAM,GAAW,EAAM,sBACvB,MAAO,GAAS,SAAW,EACvB,GACA,EAAS,EAAS,OAAS,GAAG,iBA9MrB,+BAkNV,GAAU,GAAV,UAAU,EAAV,CAEE,AAAM,oBAAoB,EAAK,SAAS,SAAS,kBAE3C,oBAAoB,EAAK,SAAS,SAAS,kBAE3C,qBACX,EAAK,SAAS,SAAS,mBAEZ,qBACX,EAAK,SAAS,SAAS,mBAEZ,wBACX,EAAK,SAAS,SAAS,sBAEZ,sBACX,EAAK,SAAS,SAAS,oBAEZ,uBACX,EAAK,SAAS,SAAS,qBAEZ,sBACX,EAAK,SAAS,SAAS,oBAEZ,sBACX,EAAK,SAAS,SAAS,oBAEZ,wBACX,EAAK,SAAS,SAAS,sBAEZ,mBAAmB,EAAK,SAAS,SAAS,iBAE1C,YAAY,EAAK,SAAS,SAAS,UAEnC,mBAAmB,EAAK,SAAS,SAAS,iBAE1C,wBACX,EAAK,SAAS,SAAS,wBArCV,6BAxNF,iCADT",
  "names": []
}
