{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/runtimegame.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2016 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Game manager');\n\n  /** Identify a script file, with its content hash (useful for hot-reloading). */\n  export type RuntimeGameOptionsScriptFile = {\n    /** The path for this script file. */\n    path: string;\n    /** The hash of the script file content. */\n    hash: number;\n  };\n\n  /** Options given to the game at startup. */\n  export type RuntimeGameOptions = {\n    /** if true, force fullscreen. */\n    forceFullscreen?: boolean;\n    /** if true, game is run as a preview launched from an editor. */\n    isPreview?: boolean;\n    /** The name of the external layout to create in the scene at position 0;0. */\n    injectExternalLayout?: string;\n    /** Script files, used for hot-reloading. */\n    scriptFiles?: Array<RuntimeGameOptionsScriptFile>;\n    /** if true, export is a partial preview without events. */\n    projectDataOnlyExport?: boolean;\n    /** The address of the debugger server, to reach out using WebSocket. */\n    websocketDebuggerServerAddress?: string;\n    /** The port of the debugger server, to reach out using WebSocket. */\n    websocketDebuggerServerPort?: string;\n\n    /**\n     * The path to require `@electron/remote` module.\n     * This is only useful in a preview, where this can't be required from\n     * `@electron/remote` directly as previews don't have any node_modules.\n     * On the contrary, a game packaged with Electron as a standalone app\n     * has its node_modules.\n     * This can be removed once there are no more dependencies on\n     * `@electron/remote` in the game engine and extensions.\n     */\n    electronRemoteRequirePath?: string;\n\n    /**\n     * the token to use by the game engine when requiring any resource stored on\n     * GDevelop Cloud buckets. Note that this is only useful during previews.\n     */\n    gdevelopResourceToken?: string;\n\n    /**\n     * Check if, in some exceptional cases, we allow authentication\n     * to be done through a iframe.\n     * This is usually discouraged as the user can't verify that the authentication\n     * window is a genuine one. It's only to be used in trusted contexts.\n     */\n    allowAuthenticationUsingIframeForPreview?: boolean;\n\n    /**\n     * If set, the game should use the specified environment for making calls\n     * to GDevelop APIs (\"dev\" = development APIs).\n     */\n    environment?: 'dev';\n  };\n\n  const addSearchParameterToUrl = (\n    url: string,\n    urlEncodedParameterName: string,\n    urlEncodedValue: string\n  ) => {\n    if (url.startsWith('data:') || url.startsWith('blob:')) {\n      // blob/data protocol does not support search parameters, which are useless anyway.\n      return url;\n    }\n\n    const separator = url.indexOf('?') === -1 ? '?' : '&';\n    return url + separator + urlEncodedParameterName + '=' + urlEncodedValue;\n  };\n\n  const checkIfIsGDevelopCloudBucketUrl = (url: string): boolean => {\n    return (\n      url.startsWith('https://project-resources.gdevelop.io/') ||\n      url.startsWith('https://project-resources-dev.gdevelop.io/')\n    );\n  };\n\n  /**\n   * Gives helper methods used when resources are loaded from an URL.\n   */\n  export class RuntimeGameResourcesLoader {\n    _runtimeGame: RuntimeGame;\n\n    constructor(runtimeGame: RuntimeGame) {\n      this._runtimeGame = runtimeGame;\n    }\n\n    /**\n     * Complete the given URL with any specific parameter required to access\n     * the resource (this can be for example a token needed to access the resource).\n     */\n    getFullUrl(url: string) {\n      const { gdevelopResourceToken } = this._runtimeGame._options;\n      if (!gdevelopResourceToken) return url;\n\n      if (!checkIfIsGDevelopCloudBucketUrl(url)) return url;\n\n      return addSearchParameterToUrl(\n        url,\n        'gd_resource_token',\n        encodeURIComponent(gdevelopResourceToken)\n      );\n    }\n\n    /**\n     * Return true if the specified URL must be loaded with cookies (\"credentials\")\n     * sent to grant access to them.\n     */\n    checkIfCredentialsRequired(url: string) {\n      if (this._runtimeGame._options.gdevelopResourceToken) return false;\n\n      // Any resource stored on the GDevelop Cloud buckets needs the \"credentials\" of the user,\n      // i.e: its gdevelop.io cookie, to be passed.\n      // Note that this is only useful during previews.\n      if (checkIfIsGDevelopCloudBucketUrl(url)) return true;\n\n      // For other resources, use the default way of loading resources (\"anonymous\" or \"same-site\").\n      return false;\n    }\n  }\n\n  /**\n   * Represents a game being played.\n   */\n  export class RuntimeGame {\n    _resourcesLoader: RuntimeGameResourcesLoader;\n    _variables: VariablesContainer;\n    _data: ProjectData;\n    _eventsBasedObjectDatas: Map<String, EventsBasedObjectData>;\n    _imageManager: ImageManager;\n    _soundManager: SoundManager;\n    _fontManager: FontManager;\n    _jsonManager: JsonManager;\n    _model3DManager: Model3DManager;\n    _effectsManager: EffectsManager;\n    _bitmapFontManager: BitmapFontManager;\n    _maxFPS: integer;\n    _minFPS: integer;\n    _gameResolutionWidth: integer;\n    _gameResolutionHeight: integer;\n    _originalWidth: float;\n    _originalHeight: float;\n    _resizeMode: 'adaptWidth' | 'adaptHeight' | string;\n    _adaptGameResolutionAtRuntime: boolean;\n    _scaleMode: 'linear' | 'nearest';\n    _pixelsRounding: boolean;\n    _antialiasingMode: 'none' | 'MSAA';\n    _isAntialisingEnabledOnMobile: boolean;\n    /**\n     * Game loop management (see startGameLoop method)\n     */\n    _renderer: RuntimeGameRenderer;\n    _sessionId: string | null;\n    _playerId: string | null;\n    _watermark: watermark.RuntimeWatermark;\n\n    _sceneStack: SceneStack;\n    /**\n     * When set to true, the scenes are notified that game resolution size changed.\n     */\n    _notifyScenesForGameResolutionResize: boolean = false;\n\n    /**\n     * When paused, the game won't step and will be freezed. Useful for debugging.\n     */\n    _paused: boolean = false;\n\n    /**\n     * True during the first frame the game is back from being hidden.\n     * This has nothing to do with `_paused`.\n     */\n    _hasJustResumed: boolean = false;\n\n    //Inputs :\n    _inputManager: InputManager;\n\n    /**\n     * Allow to specify an external layout to insert in the first scene.\n     */\n    _injectExternalLayout: any;\n    _options: RuntimeGameOptions;\n\n    /**\n     * The mappings for embedded resources\n     */\n    _embeddedResourcesMappings: Map<string, Record<string, string>>;\n\n    /**\n     * Optional client to connect to a debugger server.\n     */\n    _debuggerClient: gdjs.AbstractDebuggerClient | null;\n    _sessionMetricsInitialized: boolean = false;\n    _disableMetrics: boolean = false;\n    _isPreview: boolean;\n\n    /**\n     * @param data The object (usually stored in data.json) containing the full project data\n     * @param\n     */\n    constructor(data: ProjectData, options?: RuntimeGameOptions) {\n      this._options = options || {};\n      this._variables = new gdjs.VariablesContainer(data.variables);\n      this._data = data;\n      this._resourcesLoader = new gdjs.RuntimeGameResourcesLoader(this);\n      this._imageManager = new gdjs.ImageManager(\n        this._data.resources.resources,\n        this._resourcesLoader\n      );\n      this._soundManager = new gdjs.SoundManager(\n        this._data.resources.resources,\n        this._resourcesLoader\n      );\n      this._fontManager = new gdjs.FontManager(\n        this._data.resources.resources,\n        this._resourcesLoader\n      );\n      this._jsonManager = new gdjs.JsonManager(\n        this._data.resources.resources,\n        this._resourcesLoader\n      );\n      this._bitmapFontManager = new gdjs.BitmapFontManager(\n        this._data.resources.resources,\n        this._resourcesLoader,\n        this._imageManager\n      );\n      this._model3DManager = new gdjs.Model3DManager(\n        this._data.resources.resources,\n        this._resourcesLoader\n      );\n      this._effectsManager = new gdjs.EffectsManager();\n      this._maxFPS = this._data.properties.maxFPS;\n      this._minFPS = this._data.properties.minFPS;\n      this._gameResolutionWidth = this._data.properties.windowWidth;\n      this._gameResolutionHeight = this._data.properties.windowHeight;\n      this._originalWidth = this._gameResolutionWidth;\n      this._originalHeight = this._gameResolutionHeight;\n      this._resizeMode = this._data.properties.sizeOnStartupMode;\n      this._adaptGameResolutionAtRuntime = this._data.properties.adaptGameResolutionAtRuntime;\n      this._scaleMode = data.properties.scaleMode || 'linear';\n      this._pixelsRounding = this._data.properties.pixelsRounding;\n      this._antialiasingMode = this._data.properties.antialiasingMode;\n      this._isAntialisingEnabledOnMobile = this._data.properties.antialisingEnabledOnMobile;\n      this._renderer = new gdjs.RuntimeGameRenderer(\n        this,\n        this._options.forceFullscreen || false\n      );\n      this._watermark = new gdjs.watermark.RuntimeWatermark(\n        this,\n        data.properties.authorUsernames,\n        this._data.properties.watermark\n      );\n      this._sceneStack = new gdjs.SceneStack(this);\n      this._inputManager = new gdjs.InputManager();\n      this._injectExternalLayout = this._options.injectExternalLayout || '';\n      this._debuggerClient = gdjs.DebuggerClient\n        ? new gdjs.DebuggerClient(this)\n        : null;\n      this._isPreview = this._options.isPreview || false;\n      this._sessionId = null;\n      this._playerId = null;\n\n      this._embeddedResourcesMappings = new Map();\n      for (const resource of this._data.resources.resources) {\n        if (resource.metadata) {\n          try {\n            const metadata = JSON.parse(resource.metadata);\n            if (metadata?.embeddedResourcesMapping) {\n              this._embeddedResourcesMappings.set(\n                resource.name,\n                metadata.embeddedResourcesMapping\n              );\n            }\n          } catch {\n            logger.error(\n              'Some metadata of resources can not be successfully parsed.'\n            );\n          }\n        }\n      }\n\n      this._eventsBasedObjectDatas = new Map<String, EventsBasedObjectData>();\n      if (this._data.eventsFunctionsExtensions) {\n        for (const extension of this._data.eventsFunctionsExtensions) {\n          for (const eventsBasedObject of extension.eventsBasedObjects) {\n            this._eventsBasedObjectDatas.set(\n              extension.name + '::' + eventsBasedObject.name,\n              eventsBasedObject\n            );\n          }\n        }\n      }\n\n      if (this.isUsingGDevelopDevelopmentEnvironment()) {\n        logger.info(\n          'This game will run on the development version of GDevelop APIs.'\n        );\n      }\n    }\n\n    /**\n     * Update the project data. Useful for hot-reloading, should not be used otherwise.\n     *\n     * @param projectData The object (usually stored in data.json) containing the full project data\n     */\n    setProjectData(projectData: ProjectData): void {\n      this._data = projectData;\n      this._imageManager.setResources(this._data.resources.resources);\n      this._soundManager.setResources(this._data.resources.resources);\n      this._fontManager.setResources(this._data.resources.resources);\n      this._jsonManager.setResources(this._data.resources.resources);\n      this._bitmapFontManager.setResources(this._data.resources.resources);\n      this._model3DManager.setResources(this._data.resources.resources);\n    }\n\n    /**\n     * Return the additional options passed to the RuntimeGame when created.\n     * @returns The additional options, if any.\n     */\n    getAdditionalOptions(): RuntimeGameOptions | null {\n      return this._options;\n    }\n\n    getRenderer(): gdjs.RuntimeGameRenderer {\n      return this._renderer;\n    }\n\n    /**\n     * Get the variables of the RuntimeGame.\n     * @return The global variables\n     */\n    getVariables(): gdjs.VariablesContainer {\n      return this._variables;\n    }\n\n    /**\n     * Get the gdjs.SoundManager of the RuntimeGame.\n     * @return The sound manager.\n     */\n    getSoundManager(): gdjs.HowlerSoundManager {\n      return this._soundManager;\n    }\n\n    /**\n     * Get the gdjs.ImageManager of the RuntimeGame.\n     * @return The image manager.\n     */\n    getImageManager(): gdjs.PixiImageManager {\n      return this._imageManager;\n    }\n\n    /**\n     * Get the gdjs.FontManager of the RuntimeGame.\n     * @return The font manager.\n     */\n    getFontManager(): gdjs.FontFaceObserverFontManager {\n      return this._fontManager;\n    }\n\n    /**\n     * Get the gdjs.BitmapFontManager of the RuntimeGame.\n     * @return The bitmap font manager.\n     */\n    getBitmapFontManager(): gdjs.BitmapFontManager {\n      // @ts-ignore\n      return this._bitmapFontManager;\n    }\n\n    /**\n     * Get the input manager of the game, storing mouse, keyboard\n     * and touches states.\n     * @return The input manager owned by the game\n     */\n    getInputManager(): gdjs.InputManager {\n      return this._inputManager;\n    }\n\n    /**\n     * Get the JSON manager of the game, used to load JSON from game\n     * resources.\n     * @return The json manager for the game\n     */\n    getJsonManager(): gdjs.JsonManager {\n      return this._jsonManager;\n    }\n\n    /**\n     * Get the 3D model manager of the game, used to load 3D model from game\n     * resources.\n     * @return The 3D model manager for the game\n     */\n    getModel3DManager(): gdjs.Model3DManager {\n      return this._model3DManager;\n    }\n\n    /**\n     * Get the effects manager of the game, which allows to manage\n     * effects on runtime objects or runtime layers.\n     * @return The effects manager for the game\n     */\n    getEffectsManager(): gdjs.EffectsManager {\n      return this._effectsManager;\n    }\n\n    /**\n     * Get the object containing the game data\n     * @return The object associated to the game.\n     */\n    getGameData(): ProjectData {\n      return this._data;\n    }\n\n    getEventsBasedObjectData(type: string): EventsBasedObjectData | null {\n      const eventsBasedObjectData = this._eventsBasedObjectDatas.get(type);\n      if (!eventsBasedObjectData) {\n        logger.error(\n          'The game has no events-based object of the type \"' + type + '\"'\n        );\n        return null;\n      }\n      return eventsBasedObjectData;\n    }\n\n    /**\n     * Get the data associated to a scene.\n     *\n     * @param sceneName The name of the scene. If not defined, the first scene will be returned.\n     * @return The data associated to the scene.\n     */\n    getSceneData(sceneName?: string): LayoutData | null {\n      let scene: LayoutData | null = null;\n      for (let i = 0, len = this._data.layouts.length; i < len; ++i) {\n        const sceneData = this._data.layouts[i];\n        if (sceneName === undefined || sceneData.name === sceneName) {\n          scene = sceneData;\n          break;\n        }\n      }\n      if (scene === null) {\n        logger.error('The game has no scene called \"' + sceneName + '\"');\n      }\n      return scene;\n    }\n\n    /**\n     * Check if a scene exists\n     *\n     * @param sceneName The name of the scene to search.\n     * @return true if the scene exists. If sceneName is undefined, true if the game has a scene.\n     */\n    hasScene(sceneName?: string): boolean {\n      let isTrue = false;\n      for (let i = 0, len = this._data.layouts.length; i < len; ++i) {\n        const sceneData = this._data.layouts[i];\n        if (sceneName === undefined || sceneData.name == sceneName) {\n          isTrue = true;\n          break;\n        }\n      }\n      return isTrue;\n    }\n\n    /**\n     * Get the data associated to an external layout.\n     *\n     * @param name The name of the external layout.\n     * @return The data associated to the external layout or null if not found.\n     */\n    getExternalLayoutData(name: string): ExternalLayoutData | null {\n      let externalLayout: ExternalLayoutData | null = null;\n      for (let i = 0, len = this._data.externalLayouts.length; i < len; ++i) {\n        const layoutData = this._data.externalLayouts[i];\n        if (layoutData.name === name) {\n          externalLayout = layoutData;\n          break;\n        }\n      }\n      return externalLayout;\n    }\n\n    /**\n     * Get the data representing all the global objects of the game.\n     * @return The data associated to the global objects.\n     */\n    getInitialObjectsData(): ObjectData[] {\n      return this._data.objects || [];\n    }\n\n    /**\n     * Get the original width of the game, as set on the startup of the game.\n     *\n     * This is guaranteed to never change, even if the size of the game is changed afterwards.\n     */\n    getOriginalWidth(): float {\n      return this._originalWidth;\n    }\n\n    /**\n     * Get the original height of the game, as set on the startup of the game.\n     *\n     * This is guaranteed to never change, even if the size of the game is changed afterwards.\n     */\n    getOriginalHeight(): float {\n      return this._originalHeight;\n    }\n\n    /**\n     * Get the game resolution (the size at which the game is played and rendered) width.\n     * @returns The game resolution width, in pixels.\n     */\n    getGameResolutionWidth(): float {\n      return this._gameResolutionWidth;\n    }\n\n    /**\n     * Get the game resolution (the size at which the game is played and rendered) height.\n     * @returns The game resolution height, in pixels.\n     */\n    getGameResolutionHeight(): float {\n      return this._gameResolutionHeight;\n    }\n\n    /**\n     * Change the game resolution.\n     *\n     * @param width The new width\n     * @param height The new height\n     */\n    setGameResolutionSize(width: float, height: float): void {\n      this._gameResolutionWidth = width;\n      this._gameResolutionHeight = height;\n      if (this._adaptGameResolutionAtRuntime) {\n        if (\n          gdjs.RuntimeGameRenderer &&\n          gdjs.RuntimeGameRenderer.getWindowInnerWidth &&\n          gdjs.RuntimeGameRenderer.getWindowInnerHeight\n        ) {\n          const windowInnerWidth = gdjs.RuntimeGameRenderer.getWindowInnerWidth();\n          const windowInnerHeight = gdjs.RuntimeGameRenderer.getWindowInnerHeight();\n\n          // Enlarge either the width or the eight to fill the inner window space.\n          if (this._resizeMode === 'adaptWidth') {\n            this._gameResolutionWidth =\n              (this._gameResolutionHeight * windowInnerWidth) /\n              windowInnerHeight;\n          } else {\n            if (this._resizeMode === 'adaptHeight') {\n              this._gameResolutionHeight =\n                (this._gameResolutionWidth * windowInnerHeight) /\n                windowInnerWidth;\n            }\n          }\n        }\n      } else {\n      }\n\n      // Don't alter the game resolution. The renderer\n      // will maybe adapt the size of the canvas or whatever is used to render the\n      // game in the window, but this does not change the \"game resolution\".\n\n      // Notify the renderer that game resolution changed (so that the renderer size\n      // can be updated, and maybe other things like the canvas size), and let the\n      // scenes know too.\n      this._renderer.updateRendererSize();\n      this._notifyScenesForGameResolutionResize = true;\n    }\n\n    /**\n     * Set if the width or the height of the game resolution\n     * should be changed to fit the game window - or if the game\n     * resolution should not be updated automatically.\n     *\n     * @param resizeMode Either \"\" (don't change game resolution), \"adaptWidth\" or \"adaptHeight\".\n     */\n    setGameResolutionResizeMode(resizeMode: string): void {\n      this._resizeMode = resizeMode;\n      this._forceGameResolutionUpdate();\n    }\n\n    /**\n     * Returns if the width or the height of the game resolution\n     * should be changed to fit the game window - or if the game\n     * resolution should not be updated automatically (empty string).\n     *\n     * @returns Either \"\" (don't change game resolution), \"adaptWidth\" or \"adaptHeight\".\n     */\n    getGameResolutionResizeMode(): string {\n      return this._resizeMode;\n    }\n\n    /**\n     * Set if the game resolution should be automatically adapted\n     * when the game window or screen size change. This will only\n     * be the case if the game resolution resize mode is\n     * configured to adapt the width or the height of the game.\n     * @param enable true to change the game resolution according to the window/screen size.\n     */\n    setAdaptGameResolutionAtRuntime(enable: boolean): void {\n      this._adaptGameResolutionAtRuntime = enable;\n      this._forceGameResolutionUpdate();\n    }\n\n    /**\n     * Returns if the game resolution should be automatically adapted\n     * when the game window or screen size change. This will only\n     * be the case if the game resolution resize mode is\n     * configured to adapt the width or the height of the game.\n     * @returns true if the game resolution is automatically changed according to the window/screen size.\n     */\n    getAdaptGameResolutionAtRuntime(): boolean {\n      return this._adaptGameResolutionAtRuntime;\n    }\n\n    /**\n     * Return the minimal fps that must be guaranteed by the game\n     * (otherwise, game is slowed down).\n     */\n    getMinimalFramerate(): integer {\n      return this._minFPS;\n    }\n\n    /**\n     * Return the scale mode of the game (\"linear\" or \"nearest\").\n     */\n    getScaleMode(): 'linear' | 'nearest' {\n      return this._scaleMode;\n    }\n\n    /**\n     * Return if the game is rounding pixels when rendering.\n     */\n    getPixelsRounding(): boolean {\n      return this._pixelsRounding;\n    }\n\n    /**\n     * Return the antialiasing mode used by the game (\"none\" or \"MSAA\").\n     */\n    getAntialiasingMode(): 'none' | 'MSAA' {\n      return this._antialiasingMode;\n    }\n\n    /**\n     * Return true if antialising is enabled on mobiles.\n     */\n    isAntialisingEnabledOnMobile(): boolean {\n      return this._isAntialisingEnabledOnMobile;\n    }\n\n    /**\n     * Set or unset the game as paused.\n     * When paused, the game won't step and will be freezed. Useful for debugging.\n     * @param enable true to pause the game, false to unpause\n     */\n    pause(enable: boolean) {\n      if (this._paused === enable) return;\n\n      this._paused = enable;\n      if (this._debuggerClient) {\n        if (this._paused) this._debuggerClient.sendGamePaused();\n        else this._debuggerClient.sendGameResumed();\n      }\n    }\n\n    /**\n     * @returns true during the first frame the game is back from being hidden.\n     * This has nothing to do with `_paused`.\n     */\n    hasJustResumed() {\n      return this._hasJustResumed;\n    }\n\n    /**\n     * Load all assets, displaying progress in renderer.\n     */\n    loadAllAssets(callback: () => void, progressCallback?: (float) => void) {\n      const loadingScreen = new gdjs.LoadingScreenRenderer(\n        this.getRenderer(),\n        this._imageManager,\n        this._data.properties.loadingScreen\n      );\n      const allAssetsTotal = this._data.resources.resources.length;\n      const that = this;\n\n      // TODO: All the `loadXXX` (or `preloadXXX`) methods would be\n      // better converted to return promises, for better readability of the code.\n      // See how `loadBitmapFontData` is done.\n      this._imageManager.loadTextures(\n        function (count, total) {\n          const percent = Math.floor((count / allAssetsTotal) * 100);\n          loadingScreen.setPercent(percent);\n          if (progressCallback) {\n            progressCallback(percent);\n          }\n        },\n        function (texturesTotalCount) {\n          that._soundManager.preloadAudio(\n            function (count, total) {\n              const percent = Math.floor(\n                ((texturesTotalCount + count) / allAssetsTotal) * 100\n              );\n              loadingScreen.setPercent(percent);\n              if (progressCallback) {\n                progressCallback(percent);\n              }\n            },\n            function (audioTotalCount) {\n              that._fontManager.loadFonts(\n                function (count, total) {\n                  const percent = Math.floor(\n                    ((texturesTotalCount + audioTotalCount + count) /\n                      allAssetsTotal) *\n                      100\n                  );\n                  loadingScreen.setPercent(percent);\n                  if (progressCallback) {\n                    progressCallback(percent);\n                  }\n                },\n                function (fontTotalCount) {\n                  that._jsonManager.preloadJsons(\n                    function (count, total) {\n                      const percent = Math.floor(\n                        ((texturesTotalCount +\n                          audioTotalCount +\n                          fontTotalCount +\n                          count) /\n                          allAssetsTotal) *\n                          100\n                      );\n                      loadingScreen.setPercent(percent);\n                      if (progressCallback) {\n                        progressCallback(percent);\n                      }\n                    },\n                    function (jsonTotalCount) {\n                      that._model3DManager.loadModels(\n                        function (count, total) {\n                          const percent = Math.floor(\n                            ((texturesTotalCount +\n                              audioTotalCount +\n                              fontTotalCount +\n                              jsonTotalCount +\n                              count) /\n                              allAssetsTotal) *\n                              100\n                          );\n                          loadingScreen.setPercent(percent);\n                          if (progressCallback) {\n                            progressCallback(percent);\n                          }\n                        },\n                        function (model3DTotalCount) {\n                          that._bitmapFontManager\n                            .loadBitmapFontData((count) => {\n                              var percent = Math.floor(\n                                ((texturesTotalCount +\n                                  audioTotalCount +\n                                  fontTotalCount +\n                                  jsonTotalCount +\n                                  model3DTotalCount +\n                                  count) /\n                                  allAssetsTotal) *\n                                  100\n                              );\n                              loadingScreen.setPercent(percent);\n                              if (progressCallback) progressCallback(percent);\n                            })\n                            .then(() => loadingScreen.unload())\n                            .then(() =>\n                              gdjs.getAllAsynchronouslyLoadingLibraryPromise()\n                            )\n                            .then(() => {\n                              callback();\n                            });\n                        }\n                      );\n                    }\n                  );\n                }\n              );\n            }\n          );\n        }\n      );\n    }\n\n    /**\n     * Start the game loop, to be called once assets are loaded.\n     */\n    startGameLoop() {\n      try {\n        if (!this.hasScene()) {\n          logger.error('The game has no scene.');\n          return;\n        }\n        this._forceGameResolutionUpdate();\n\n        // Load the first scene\n        const firstSceneName = this._data.firstLayout;\n        this._sceneStack.push(\n          this.hasScene(firstSceneName)\n            ? firstSceneName\n            : // @ts-ignore - no risk of null object.\n              this.getSceneData().name,\n          this._injectExternalLayout\n        );\n        this._watermark.displayAtStartup();\n\n        //Uncomment to profile the first x frames of the game.\n        // var x = 500;\n        // var startTime = Date.now();\n        // console.profile(\"Stepping for \" + x + \" frames\")\n        // for(var i = 0; i < x; ++i) {\n        //     this._sceneStack.step(16);\n        // }\n        // console.profileEnd();\n        // var time = Date.now() - startTime;\n        // logger.log(\"Took\", time, \"ms\");\n        // return;\n\n        this._setupGameVisibilityEvents();\n\n        // The standard game loop\n        const that = this;\n        let accumulatedElapsedTime = 0;\n        this._hasJustResumed = false;\n        this._renderer.startGameLoop(function (lastCallElapsedTime) {\n          if (that._paused) {\n            return true;\n          }\n\n          // Skip the frame if we rendering frames too fast\n          accumulatedElapsedTime += lastCallElapsedTime;\n          if (\n            that._maxFPS > 0 &&\n            1000.0 / accumulatedElapsedTime > that._maxFPS + 7\n          ) {\n            // Only skip frame if the framerate is 7 frames above the maximum framerate.\n            // Most browser/engines will try to run at slightly more than 60 frames per second.\n            // If game is set to have a maximum FPS to 60, then one out of two frames will be dropped.\n            // Hence, we use a 7 frames margin to ensure that we're not skipping frames too much.\n            return true;\n          }\n          const elapsedTime = accumulatedElapsedTime;\n          accumulatedElapsedTime = 0;\n\n          // Manage resize events.\n          if (that._notifyScenesForGameResolutionResize) {\n            that._sceneStack.onGameResolutionResized();\n            that._notifyScenesForGameResolutionResize = false;\n          }\n\n          // Render and step the scene.\n          if (that._sceneStack.step(elapsedTime)) {\n            that.getInputManager().onFrameEnded();\n            that._hasJustResumed = false;\n            return true;\n          }\n          return false;\n        });\n        setTimeout(() => {\n          this._setupSessionMetrics();\n        }, 10000);\n      } catch (e) {\n        logger.error('Internal crash: ' + e);\n        throw e;\n      }\n    }\n\n    /**\n     * Set if the session should be registered.\n     */\n    enableMetrics(enable: boolean): void {\n      this._disableMetrics = !enable;\n      if (enable) {\n        this._setupSessionMetrics();\n      }\n    }\n\n    _setupGameVisibilityEvents() {\n      if (typeof navigator !== 'undefined' && typeof document !== 'undefined') {\n        document.addEventListener('visibilitychange', () => {\n          if (document.visibilityState === 'visible') {\n            this._hasJustResumed = true;\n          }\n        });\n        window.addEventListener(\n          'resume',\n          () => {\n            this._hasJustResumed = true;\n          },\n          false\n        );\n      }\n    }\n\n    /**\n     * Register a new session for the game, and set up listeners to follow the session\n     * time.\n     */\n    _setupSessionMetrics() {\n      if (this._sessionMetricsInitialized) {\n        return;\n      }\n      if (this._disableMetrics) {\n        return;\n      }\n      if (this.isPreview()) {\n        return;\n      }\n      if (typeof fetch === 'undefined') {\n        return;\n      }\n      if (!this._data.properties.projectUuid) {\n        return;\n      }\n      const baseUrl = 'https://api.gdevelop-app.com/analytics';\n      this._playerId = this._makePlayerUuid();\n      /**\n       * The duration that is already sent to the service\n       * (in milliseconds).\n       **/\n      let sentDuration = 0;\n      /**\n       * The duration that is not yet sent to the service to avoid flooding\n       * (in milliseconds).\n       **/\n      let notYetSentDuration = 0;\n      /**\n       * The last time when duration has been counted\n       * either in sendedDuration or notYetSentDuration.\n       **/\n      let lastSessionResumeTime = Date.now();\n      fetch(baseUrl + '/session', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        // It's important to ensure that the data sent here does not contain\n        // any personal information from the player or that would allow to\n        // precisely identify someone.\n        body: JSON.stringify({\n          gameId: this._data.properties.projectUuid,\n          playerId: this._playerId,\n          game: {\n            name: this._data.properties.name || '',\n            packageName: this._data.properties.packageName || '',\n            version: this._data.properties.version || '',\n            location: window.location.href,\n          },\n          platform: {\n            // @ts-ignore\n            isCordova: !!window.cordova,\n            devicePlatform:\n              // @ts-ignore\n              typeof device !== 'undefined' ? device.platform || '' : '',\n            navigatorPlatform:\n              typeof navigator !== 'undefined' ? navigator.platform : '',\n            hasTouch:\n              typeof navigator !== 'undefined'\n                ? !!navigator.maxTouchPoints && navigator.maxTouchPoints > 2\n                : false,\n          },\n        }),\n      })\n        .then((response) => {\n          // Ensure the session is correctly created to avoid sending hits that will fail.\n          if (!response.ok) {\n            console.error('Error while creating the session', response);\n            throw new Error('Error while creating the session');\n          }\n          return response;\n        })\n        .then((response) => response.text())\n        .then((returnedSessionId) => {\n          this._sessionId = returnedSessionId;\n        })\n        .catch(() => {});\n\n      /* Ignore any error */\n      const sendSessionHit = () => {\n        if (!this._sessionId) {\n          return;\n        }\n\n        const now = Date.now();\n        notYetSentDuration += now - lastSessionResumeTime;\n        lastSessionResumeTime = now;\n\n        // Group repeated calls to sendSessionHit - which could\n        // happen because of multiple event listeners being fired.\n        if (notYetSentDuration < 5 * 1000) {\n          return;\n        }\n        // The backend use seconds for duration.\n        // The milliseconds will stay in notYetSentDuration.\n        const toBeSentDuration = Math.floor(notYetSentDuration / 1000) * 1000;\n        sentDuration += toBeSentDuration;\n        notYetSentDuration -= toBeSentDuration;\n\n        navigator.sendBeacon(\n          baseUrl + '/session-hit',\n          JSON.stringify({\n            gameId: this._data.properties.projectUuid,\n            playerId: this._playerId,\n            sessionId: this._sessionId,\n            duration: Math.floor(sentDuration / 1000),\n          })\n        );\n      };\n      if (typeof navigator !== 'undefined' && typeof document !== 'undefined') {\n        document.addEventListener('visibilitychange', () => {\n          if (document.visibilityState === 'visible') {\n            // Skip the duration the game was hidden.\n            lastSessionResumeTime = Date.now();\n          } else {\n            sendSessionHit();\n          }\n        });\n        window.addEventListener('pagehide', sendSessionHit, false);\n        // Cordova events\n        window.addEventListener('pause', sendSessionHit, false);\n        window.addEventListener(\n          'resume',\n          () => {\n            // Skip the duration the game was hidden.\n            lastSessionResumeTime = Date.now();\n          },\n          false\n        );\n\n        // Detect Safari to work around Safari-specific bugs:\n        // - https://bugs.webkit.org/show_bug.cgi?id=151610\n        // - https://bugs.webkit.org/show_bug.cgi?id=151234\n        // @ts-ignore\n        const isSafari = typeof safari === 'object' && safari.pushNotification;\n        const isElectron = /electron/i.test(navigator.userAgent);\n        if (isSafari || isElectron) {\n          window.addEventListener('beforeunload', () => {\n            sendSessionHit();\n          });\n        }\n      }\n      this._sessionMetricsInitialized = true;\n      this._sessionId = this._sessionId;\n    }\n\n    /**\n     * Generate an anonymous unique identifier to differentiate\n     * the player from others in the game metrics.\n     */\n    _makePlayerUuid(): string {\n      try {\n        const key = 'GDJS-internal-player-uuid';\n        const existingPlayerUuid = localStorage.getItem(key);\n        if (existingPlayerUuid) {\n          return existingPlayerUuid;\n        }\n        const newPlayerUuid = gdjs.makeUuid();\n        localStorage.setItem(key, newPlayerUuid);\n        return newPlayerUuid;\n      } catch (err) {\n        return gdjs.makeUuid();\n      }\n    }\n\n    getSessionId(): string | null {\n      return this._sessionId;\n    }\n\n    getPlayerId(): string | null {\n      return this._playerId;\n    }\n\n    /**\n     * Called by the game renderer when the window containing the game\n     * has changed size (this can result from a resize of the window,\n     * but also other factors like a device orientation change on mobile).\n     */\n    onWindowInnerSizeChanged() {\n      this._forceGameResolutionUpdate();\n    }\n\n    /**\n     * Enlarge/reduce the width (or the height) of the game to fill the inner window.\n     */\n    _forceGameResolutionUpdate() {\n      this.setGameResolutionSize(\n        this._gameResolutionWidth,\n        this._gameResolutionHeight\n      );\n    }\n\n    /**\n     * Start a profiler for the currently running scene.\n     * @param onProfilerStopped Function to be called when the profiler is stopped. Will be passed the profiler as argument.\n     */\n    startCurrentSceneProfiler(\n      onProfilerStopped: (oldProfiler: Profiler) => void\n    ) {\n      const currentScene = this._sceneStack.getCurrentScene();\n      if (!currentScene) {\n        return false;\n      }\n      currentScene.startProfiler(onProfilerStopped);\n      return true;\n    }\n\n    /**\n     * Stop the profiler for the currently running scene.\n     */\n    stopCurrentSceneProfiler() {\n      const currentScene = this._sceneStack.getCurrentScene();\n      if (!currentScene) {\n        return;\n      }\n      currentScene.stopProfiler();\n    }\n\n    /**\n     * Return true if a scene was loaded, false otherwise (i.e: game not yet started).\n     */\n    wasFirstSceneLoaded(): boolean {\n      return this._sceneStack.wasFirstSceneLoaded();\n    }\n\n    /**\n     * Return the stack of {@link gdjs.RuntimeScene} being played.\n     */\n    getSceneStack(): gdjs.SceneStack {\n      return this._sceneStack;\n    }\n\n    /**\n     * Check if the game is running as a preview, launched from an editor.\n     * @returns true if the current game is a preview.\n     */\n    isPreview(): boolean {\n      return this._isPreview;\n    }\n\n    /**\n     * Check if the game should call GDevelop development APIs or not.\n     *\n     * Unless you are contributing to GDevelop, avoid using this.\n     */\n    isUsingGDevelopDevelopmentEnvironment(): boolean {\n      return this._options.environment === 'dev';\n    }\n\n    /**\n     * Gets an extension property from the project data.\n     * @param extensionName The extension name.\n     * @param propertyName The property name.\n     * @return The property value.\n     */\n    getExtensionProperty(\n      extensionName: string,\n      propertyName: string\n    ): string | null {\n      for (let property of this._data.properties.extensionProperties) {\n        if (\n          property.extension === extensionName &&\n          property.property === propertyName\n        ) {\n          return property.value;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Resolves the name of an embedded resource.\n     * @param mainResourceName The name of the resource containing the embedded resource.\n     * @param embeddedResourceName The name of the embedded resource.\n     * @return The resource name.\n     */\n    resolveEmbeddedResource(\n      mainResourceName: string,\n      embeddedResourceName: string\n    ): string {\n      const mapping = this._embeddedResourcesMappings.get(mainResourceName);\n      return mapping && mapping[embeddedResourceName]\n        ? mapping[embeddedResourceName]\n        : embeddedResourceName;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
