{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/AsyncTasksManager.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2022 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  /**\n   * This stores all asynchronous tasks waiting to be completed,\n   * for a given scene.\n   * @see {@link RuntimeScene.getAsyncTasksManager}.\n   */\n  export class AsyncTasksManager {\n    /**\n     * Maps a task to the callback to be executed once it is finished.\n     */\n    private tasksWithCallback = new Array<{\n      asyncTask: AsyncTask;\n      callback: (runtimeScene: gdjs.RuntimeScene) => void;\n    }>();\n\n    /**\n     * Run all pending asynchronous tasks.\n     */\n    processTasks(runtimeScene: RuntimeScene): void {\n      for (let i = 0; i < this.tasksWithCallback.length; i++) {\n        const taskWithCallback = this.tasksWithCallback[i];\n        if (taskWithCallback.asyncTask.update(runtimeScene)) {\n          // The task has finished, run the callback and remove it.\n          taskWithCallback.callback(runtimeScene);\n          this.tasksWithCallback.splice(i--, 1);\n        }\n      }\n    }\n\n    /**\n     * Adds a task to be processed between frames and a callback for when it is done to the manager.\n     * @param asyncTask The {@link AsyncTask} to run.\n     * @param callback The callback to execute once the task is finished.\n     */\n    addTask(\n      asyncTask: AsyncTask,\n      callback: (runtimeScene: RuntimeScene) => void\n    ): void {\n      this.tasksWithCallback.push({ asyncTask, callback });\n    }\n\n    /**\n     * For testing only - removes all tasks.\n     * @internal\n     */\n    clearTasks() {\n      this.tasksWithCallback.length = 0;\n    }\n  }\n\n  /**\n   * An asynchronous task to be run between frames.\n   */\n  export abstract class AsyncTask {\n    /**\n     * Called every frame where the scene is active.\n     * @param runtimeScene - The scene the task runs on.\n     * @return True if the task is finished, false if it needs to continue running.\n     */\n    abstract update(runtimeScene: RuntimeScene): boolean;\n  }\n\n  export class TaskGroup extends AsyncTask {\n    private tasks = new Array<AsyncTask>();\n\n    addTask(task: AsyncTask) {\n      this.tasks.push(task);\n    }\n\n    update(runtimeScene: gdjs.RuntimeScene) {\n      for (let i = 0; i < this.tasks.length; i++) {\n        const task = this.tasks[i];\n        if (task.update(runtimeScene)) this.tasks.splice(i--, 1);\n      }\n\n      return this.tasks.length === 0;\n    }\n  }\n\n  export class ResolveTask extends AsyncTask {\n    update() {\n      return true;\n    }\n  }\n\n  const logger = new gdjs.Logger('Internal PromiseTask');\n\n  /**\n   * A task that resolves with a promise.\n   */\n  export class PromiseTask extends AsyncTask {\n    private isResolved: boolean = false;\n    promise: Promise<void>;\n\n    constructor(promise: Promise<void>) {\n      super();\n      this.promise = promise\n        .catch((error) => {\n          logger.error(\n            `A promise error has not been handled, this should never happen!\nIf you are using JavaScript promises in an asynchronous action, make sure to add a .catch().\nOtherwise, report this as a bug on the GDevelop forums!\n${error ? 'The following error was thrown: ' + error : ''}`\n          );\n        })\n        .then(() => {\n          this.isResolved = true;\n        });\n    }\n\n    update() {\n      return this.isResolved;\n    }\n  }\n\n  export class ManuallyResolvableTask extends AsyncTask {\n    private isResolved = false;\n\n    resolve() {\n      this.isResolved = true;\n    }\n\n    update(): boolean {\n      return this.isResolved;\n    }\n  }\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CAMS,OAAwB,CAAxB,aAXT,CAeY,uBAAoB,GAAI,OAQhC,aAAa,EAAkC,CAC7C,OAAS,GAAI,EAAG,EAAI,KAAK,kBAAkB,OAAQ,IAAK,CACtD,KAAM,GAAmB,KAAK,kBAAkB,GAChD,AAAI,EAAiB,UAAU,OAAO,IAEpC,GAAiB,SAAS,GAC1B,KAAK,kBAAkB,OAAO,IAAK,KAUzC,QACE,EACA,EACM,CACN,KAAK,kBAAkB,KAAK,CAAE,YAAW,aAO3C,YAAa,CACX,KAAK,kBAAkB,OAAS,GAxC7B,EAAM,oBA+CN,OAAyB,EAAzB,EAAe,YASf,eAAwB,EAAU,CAAlC,aAnET,CAmES,oBACG,WAAQ,GAAI,OAEpB,QAAQ,EAAiB,CACvB,KAAK,MAAM,KAAK,GAGlB,OAAO,EAAiC,CACtC,OAAS,GAAI,EAAG,EAAI,KAAK,MAAM,OAAQ,IAErC,AAAI,AADS,KAAK,MAAM,GACf,OAAO,IAAe,KAAK,MAAM,OAAO,IAAK,GAGxD,MAAO,MAAK,MAAM,SAAW,GAb1B,EAAM,YAiBN,eAA0B,EAAU,CACzC,QAAS,CACP,MAAO,IAFJ,EAAM,cAMb,KAAM,GAAS,GAAI,GAAK,OAAO,wBAKxB,eAA0B,EAAU,CAIzC,YAAY,EAAwB,CAClC,QAJM,gBAAsB,GAK5B,KAAK,QAAU,EACZ,MAAM,AAAC,GAAU,CAChB,EAAO,MACL;AAAA;AAAA;AAAA,EAGV,EAAQ,mCAAqC,EAAQ,QAG9C,KAAK,IAAM,CACV,KAAK,WAAa,KAIxB,QAAS,CACP,MAAO,MAAK,YArBT,EAAM,cAyBN,eAAqC,EAAU,CAA/C,aAxHT,CAwHS,oBACG,gBAAa,GAErB,SAAU,CACR,KAAK,WAAa,GAGpB,QAAkB,CAChB,MAAO,MAAK,YART,EAAM,2BAnHL",
  "names": []
}
