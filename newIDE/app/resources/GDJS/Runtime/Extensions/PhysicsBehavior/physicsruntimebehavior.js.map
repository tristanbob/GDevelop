{
  "version": 3,
  "sources": ["../../../../../../../Extensions/PhysicsBehavior/physicsruntimebehavior.ts"],
  "sourcesContent": ["// @ts-nocheck\n// This is deprecated and not worth typing.\n/*\nGDevelop - Physics Behavior Extension\nCopyright (c) 2013-2016 Florian Rival (Florian.Rival@gmail.com)\n */\nnamespace gdjs {\n  /**\n   * Manage the common objects shared by objects having a\n   * physics behavior.\n   */\n  export class PhysicsSharedData {\n    stepped: boolean = false;\n    totalTime: float = 0;\n    fixedTimeStep: any;\n    scaleX: any;\n    scaleY: any;\n    invScaleX: any;\n    invScaleY: any;\n    world: any;\n    staticBody: any;\n\n    //...and prepare contact listeners\n    contactListener: any;\n\n    constructor(runtimeScene, sharedData) {\n      this.fixedTimeStep = 1 / 60;\n      this.scaleX = sharedData.scaleX;\n      this.scaleY = sharedData.scaleY;\n      this.invScaleX = 1 / this.scaleX;\n      this.invScaleY = 1 / this.scaleY;\n\n      //Setup world...\n      const b2World = Box2D.b2World;\n      const b2Vec2 = Box2D.b2Vec2;\n      this.world = new b2World(\n        new b2Vec2(sharedData.gravityX, -sharedData.gravityY),\n        true\n      );\n      this.world.SetAutoClearForces(false);\n      this.staticBody = this.world.CreateBody(new Box2D.b2BodyDef());\n      this.contactListener = new Box2D.JSContactListener();\n      this.contactListener.BeginContact = function (contactPtr) {\n        const contact = Box2D.wrapPointer(contactPtr, Box2D.b2Contact);\n        if (\n          contact.GetFixtureA().GetBody() == null ||\n          contact.GetFixtureB().GetBody() == null\n        ) {\n          return;\n        }\n        const behaviorA = contact.GetFixtureA().GetBody()\n            .gdjsAssociatedBehavior,\n          behaviorB = contact.GetFixtureB().GetBody().gdjsAssociatedBehavior;\n        behaviorA.currentContacts.push(behaviorB);\n        behaviorB.currentContacts.push(behaviorA);\n      };\n      this.contactListener.EndContact = function (contactPtr) {\n        const contact = Box2D.wrapPointer(contactPtr, Box2D.b2Contact);\n        if (\n          contact.GetFixtureA().GetBody() == null ||\n          contact.GetFixtureB().GetBody() == null\n        ) {\n          return;\n        }\n        if (\n          contact.GetFixtureA().GetBody() === null ||\n          contact.GetFixtureB().GetBody() === null\n        ) {\n          return;\n        }\n        const behaviorA = contact.GetFixtureA().GetBody()\n            .gdjsAssociatedBehavior,\n          behaviorB = contact.GetFixtureB().GetBody().gdjsAssociatedBehavior;\n        let i = behaviorA.currentContacts.indexOf(behaviorB);\n        if (i !== -1) {\n          behaviorA.currentContacts.splice(i, 1);\n        }\n        i = behaviorB.currentContacts.indexOf(behaviorA);\n        if (i !== -1) {\n          behaviorB.currentContacts.splice(i, 1);\n        }\n      };\n      this.contactListener.PreSolve = function () {};\n      this.contactListener.PostSolve = function () {};\n      this.world.SetContactListener(this.contactListener);\n    }\n\n    /**\n     * Get the shared data for a scene.\n     */\n    static getSharedData(runtimeScene, name) {\n      if (!runtimeScene.physicsSharedData) {\n        //Create the shared data if necessary.\n        const initialData = runtimeScene.getInitialSharedDataForBehavior(name);\n        runtimeScene.physicsSharedData = new gdjs.PhysicsSharedData(\n          runtimeScene,\n          initialData\n        );\n      }\n      return runtimeScene.physicsSharedData;\n    }\n\n    step(dt) {\n      this.totalTime += dt;\n      if (this.totalTime > this.fixedTimeStep) {\n        let numberOfSteps = Math.floor(this.totalTime / this.fixedTimeStep);\n        this.totalTime -= numberOfSteps * this.fixedTimeStep;\n        if (numberOfSteps > 5) {\n          numberOfSteps = 5;\n        }\n\n        //Process 5 steps at max.\n        for (let a = 0; a < numberOfSteps; a++) {\n          this.world.Step(this.fixedTimeStep, 6, 10);\n        }\n        this.world.ClearForces();\n      }\n      this.stepped = true;\n    }\n  }\n  gdjs.registerRuntimeSceneUnloadedCallback(function (runtimeScene) {\n    //Callback that destroys the box2d.js world of PhysicsSharedData shared data of the scene\n    if (runtimeScene.physicsSharedData) {\n      Box2D.destroy(runtimeScene.physicsSharedData.world);\n    }\n  });\n\n  /**\n   * Allows objects to be moved in a realistic way thanks to a physics engine (Box2D).\n   */\n  export class PhysicsRuntimeBehavior extends gdjs.RuntimeBehavior {\n    _box2DBody: any = null;\n    _dynamic: any;\n    _objectOldWidth: float = 0;\n    _objectOldHeight: float = 0;\n    _objectOldX: number = 0;\n    _objectOldY: number = 0;\n    _objectOldAngle: float = 0;\n    _angularDamping: any;\n    _linearDamping: any;\n    _isBullet: boolean;\n    _fixedRotation: float;\n    _massDensity: any;\n    _averageFriction: any;\n    _averageRestitution: any;\n    _shapeType: any;\n    currentContacts: any = [];\n    _sharedData: any;\n\n    //Temporary objects used to avoid creating garbage:\n    _tempb2Vec2: any;\n\n    constructor(runtimeScene, behaviorData, owner) {\n      super(runtimeScene, behaviorData, owner);\n      this._dynamic = behaviorData.dynamic;\n      this._angularDamping = behaviorData.angularDamping;\n      this._linearDamping = behaviorData.linearDamping;\n      this._isBullet = behaviorData.isBullet;\n      this._fixedRotation = behaviorData.fixedRotation;\n      this._massDensity = behaviorData.massDensity;\n      this._averageFriction = behaviorData.averageFriction;\n      this._averageRestitution = behaviorData.averageRestitution;\n      this._shapeType = behaviorData.shapeType;\n      if (this.currentContacts !== undefined) {\n        this.currentContacts.length = 0;\n      } else {\n      }\n      this._sharedData = PhysicsSharedData.getSharedData(\n        runtimeScene,\n        behaviorData.name\n      );\n\n      //Do not create body now: the object is not fully created.\n      this._tempb2Vec2 = new Box2D.b2Vec2();\n    }\n\n    //See b2Vec2 method\n    updateFromBehaviorData(oldBehaviorData, newBehaviorData): boolean {\n      if (oldBehaviorData.dynamic !== newBehaviorData.dynamic) {\n        if (newBehaviorData.dynamic) {\n          this.setDynamic();\n        } else {\n          this.setStatic();\n        }\n      }\n      if (oldBehaviorData.angularDamping !== newBehaviorData.angularDamping) {\n        this.setAngularDamping(newBehaviorData.angularDamping);\n      }\n      if (oldBehaviorData.linearDamping !== newBehaviorData.linearDamping) {\n        this.setLinearDamping(newBehaviorData.linearDamping);\n      }\n      if (oldBehaviorData.isBullet !== newBehaviorData.isBullet) {\n        if (newBehaviorData.isBullet) {\n          this.setAsBullet();\n        } else {\n          this.dontSetAsBullet();\n        }\n      }\n      if (oldBehaviorData.fixedRotation !== newBehaviorData.fixedRotation) {\n        if (newBehaviorData.fixedRotation) {\n          this.setFixedRotation();\n        } else {\n          this.setFreeRotation();\n        }\n      }\n\n      // TODO: make these properties updatable.\n      if (oldBehaviorData.massDensity !== newBehaviorData.massDensity) {\n        return false;\n      }\n      if (oldBehaviorData.averageFriction !== newBehaviorData.averageFriction) {\n        return false;\n      }\n      if (\n        oldBehaviorData.averageRestitution !==\n        newBehaviorData.averageRestitution\n      ) {\n        return false;\n      }\n      if (oldBehaviorData.shapeType !== newBehaviorData.shapeType) {\n        return false;\n      }\n      return true;\n    }\n\n    onDeActivate() {\n      if (this._box2DBody !== null) {\n        this._sharedData.world.DestroyBody(this._box2DBody);\n        this._box2DBody = null;\n      }\n    }\n\n    onDestroy() {\n      this.onDeActivate();\n    }\n\n    /**\n     * Return a Box2D.b2Vec2 with the specified coordinates.\n     * Should be used instead of doing 'new Box2D.b2Vec2(x, y)'.\n     */\n    b2Vec2(x, y) {\n      this._tempb2Vec2.set_x(x);\n      this._tempb2Vec2.set_y(y);\n      return this._tempb2Vec2;\n    }\n\n    createBody() {\n      //Create body from object\n      const bodyDef = new Box2D.b2BodyDef();\n      bodyDef.set_type(\n        this._dynamic ? Box2D.b2_dynamicBody : Box2D.b2_staticBody\n      );\n      bodyDef.set_position(\n        this.b2Vec2(\n          (this.owner.getDrawableX() + this.owner.getWidth() / 2) *\n            this._sharedData.invScaleX,\n          -(this.owner.getDrawableY() + this.owner.getHeight() / 2) *\n            this._sharedData.invScaleY\n        )\n      );\n      bodyDef.set_angle(-gdjs.toRad(this.owner.getAngle()));\n      bodyDef.set_angularDamping(\n        this._angularDamping > 0 ? this._angularDamping : 0\n      );\n      bodyDef.set_linearDamping(\n        this._linearDamping > 0 ? this._linearDamping : 0\n      );\n      bodyDef.set_bullet(this._isBullet);\n      bodyDef.set_fixedRotation(this._fixedRotation);\n      this._box2DBody = this._sharedData.world.CreateBody(bodyDef);\n      this._box2DBody.gdjsAssociatedBehavior = this;\n\n      //We do not use SetUserData which only accept integers.\n\n      //Setup the fixture\n      let fixDef = null;\n\n      /*else if ( this._shapeType === \"CustomPolygon\" ) {\n                //TODO\n            }*/\n      if (this._shapeType === 'Circle') {\n        const circle = new Box2D.b2CircleShape();\n        circle.set_m_radius(\n          (this.owner.getWidth() * this._sharedData.invScaleX +\n            this.owner.getHeight() * this._sharedData.invScaleY) /\n            4\n        );\n        if (circle.get_m_radius() <= 0) {\n          circle.set_m_radius(1);\n        }\n        fixDef = new Box2D.b2FixtureDef();\n        fixDef.set_shape(circle);\n      } else {\n        //Box\n        const box = new Box2D.b2PolygonShape();\n        box.SetAsBox(\n          ((this.owner.getWidth() > 0 ? this.owner.getWidth() : 1) *\n            this._sharedData.invScaleX) /\n            2,\n          ((this.owner.getHeight() > 0 ? this.owner.getHeight() : 1) *\n            this._sharedData.invScaleY) /\n            2\n        );\n        fixDef = new Box2D.b2FixtureDef();\n        fixDef.set_shape(box);\n      }\n      fixDef.set_density(this._massDensity);\n      fixDef.set_friction(this._averageFriction);\n      fixDef.set_restitution(this._averageRestitution);\n      this._box2DBody.CreateFixture(fixDef);\n      this._objectOldWidth = this.owner.getWidth();\n      this._objectOldHeight = this.owner.getHeight();\n    }\n\n    doStepPreEvents(runtimeScene) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n\n      //Simulate the world\n      if (!this._sharedData.stepped) {\n        this._sharedData.step(\n          runtimeScene.getTimeManager().getElapsedTime() / 1000\n        );\n      }\n\n      //Update object position according to Box2D body\n      this.owner.setX(\n        this._box2DBody.GetPosition().get_x() * this._sharedData.scaleX -\n          this.owner.getWidth() / 2 +\n          this.owner.getX() -\n          this.owner.getDrawableX()\n      );\n      this.owner.setY(\n        -this._box2DBody.GetPosition().get_y() * this._sharedData.scaleY -\n          this.owner.getHeight() / 2 +\n          this.owner.getY() -\n          this.owner.getDrawableY()\n      );\n      this.owner.setAngle(-gdjs.toDegrees(this._box2DBody.GetAngle()));\n      this._objectOldX = this.owner.getX();\n      this._objectOldY = this.owner.getY();\n      this._objectOldAngle = this.owner.getAngle();\n    }\n\n    getBox2DBody() {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return this._box2DBody;\n    }\n\n    doStepPostEvents(runtimeScene) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n\n      //Ensure the Box2D body width and height are correct.\n      if (\n        this._objectOldWidth !== this.owner.getWidth() ||\n        this._objectOldHeight !== this.owner.getHeight()\n      ) {\n        //Recreate the body, but remember its movement.\n        const oldAngularVelocity = this._box2DBody.GetAngularVelocity();\n        const oldXVelocity = this._box2DBody.GetLinearVelocity().get_x();\n        const oldYVelocity = this._box2DBody.GetLinearVelocity().get_y();\n        this._sharedData.world.DestroyBody(this._box2DBody);\n        this.createBody();\n        this._box2DBody.SetAngularVelocity(oldAngularVelocity);\n        this._box2DBody.SetLinearVelocity(\n          this.b2Vec2(oldXVelocity, oldYVelocity)\n        );\n      }\n      this._sharedData.stepped = false;\n\n      //Ensure that the Box2D body position is correct\n      if (\n        this._objectOldX == this.owner.getX() &&\n        this._objectOldY == this.owner.getY() &&\n        this._objectOldAngle == this.owner.getAngle()\n      ) {\n        return;\n      }\n      const pos = this.b2Vec2(\n        (this.owner.getDrawableX() + this.owner.getWidth() / 2) *\n          this._sharedData.invScaleX,\n        -(this.owner.getDrawableY() + this.owner.getHeight() / 2) *\n          this._sharedData.invScaleY\n      );\n      this._box2DBody.SetTransform(pos, -gdjs.toRad(this.owner.getAngle()));\n      this._box2DBody.SetAwake(true);\n    }\n\n    setStatic(): void {\n      this._dynamic = false;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetType(Box2D.b2_staticBody);\n    }\n\n    setDynamic(): void {\n      this._dynamic = true;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetType(Box2D.b2_dynamicBody);\n      this._box2DBody.SetAwake(true);\n    }\n\n    setFixedRotation(): void {\n      this._fixedRotation = true;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetFixedRotation(true);\n    }\n\n    setFreeRotation(): void {\n      this._fixedRotation = false;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetFixedRotation(false);\n    }\n\n    setAsBullet(): void {\n      this._isBullet = true;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetBullet(true);\n    }\n\n    dontSetAsBullet() {\n      this._isBullet = false;\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetBullet(false);\n    }\n\n    applyImpulse(xCoordinate, yCoordinate) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.ApplyLinearImpulse(\n        this.b2Vec2(xCoordinate, -yCoordinate),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyImpulseUsingPolarCoordinates(angle, length) {\n      angle = gdjs.toRad(angle);\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.ApplyLinearImpulse(\n        this.b2Vec2(Math.cos(angle) * length, -Math.sin(angle) * length),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyImpulseTowardPosition(xPosition, yPosition, length) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      const angle = Math.atan2(\n        yPosition * this._sharedData.invScaleY +\n          this._box2DBody.GetPosition().get_y(),\n        xPosition * this._sharedData.invScaleX -\n          this._box2DBody.GetPosition().get_x()\n      );\n      this._box2DBody.ApplyLinearImpulse(\n        this.b2Vec2(Math.cos(angle) * length, -Math.sin(angle) * length),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyForce(xCoordinate, yCoordinate) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.ApplyForce(\n        this.b2Vec2(xCoordinate, -yCoordinate),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyForceUsingPolarCoordinates(angle, length) {\n      angle = gdjs.toRad(angle);\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.ApplyForce(\n        this.b2Vec2(Math.cos(angle) * length, -Math.sin(angle) * length),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyForceTowardPosition(xPosition, yPosition, length) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      const angle = Math.atan2(\n        yPosition * this._sharedData.invScaleY +\n          this._box2DBody.GetPosition().get_y(),\n        xPosition * this._sharedData.invScaleX -\n          this._box2DBody.GetPosition().get_x()\n      );\n      this._box2DBody.ApplyForce(\n        this.b2Vec2(Math.cos(angle) * length, -Math.sin(angle) * length),\n        this._box2DBody.GetPosition()\n      );\n    }\n\n    applyTorque(torque) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.ApplyTorque(torque);\n    }\n\n    setLinearVelocity(xVelocity, yVelocity): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetLinearVelocity(this.b2Vec2(xVelocity, -yVelocity));\n    }\n\n    setAngularVelocity(angularVelocity): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetAngularVelocity(angularVelocity);\n    }\n\n    setLinearDamping(linearDamping): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetLinearDamping(linearDamping);\n    }\n\n    setAngularDamping(angularDamping): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetAngularDamping(angularDamping);\n    }\n\n    addRevoluteJointBetweenObjects(\n      object,\n      scene,\n      xPosRelativeToMassCenter,\n      yPosRelativeToMassCenter\n    ) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      if (object == null || !object.hasBehavior(this.name)) {\n        return;\n      }\n      const otherBody = object.getBehavior(this.name).getBox2DBody();\n      if (this._box2DBody == otherBody) {\n        return;\n      }\n      const jointDef = new Box2D.b2RevoluteJointDef();\n      jointDef.Initialize(\n        this._box2DBody,\n        otherBody,\n        this.b2Vec2(\n          xPosRelativeToMassCenter * this._sharedData.invScaleX +\n            this._box2DBody.GetWorldCenter().get_x(),\n          yPosRelativeToMassCenter * this._sharedData.invScaleY +\n            this._box2DBody.GetWorldCenter().get_y()\n        )\n      );\n      this._sharedData.world.CreateJoint(jointDef);\n    }\n\n    addRevoluteJoint(xPosition, yPosition) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      const jointDef = new Box2D.b2RevoluteJointDef();\n      jointDef.Initialize(\n        this._box2DBody,\n        this._sharedData.staticBody,\n        this.b2Vec2(\n          xPosition * this._sharedData.invScaleX,\n          -yPosition * this._sharedData.invScaleY\n        )\n      );\n      this._sharedData.world.CreateJoint(jointDef);\n    }\n\n    setGravity(xGravity, yGravity): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._sharedData.world.SetGravity(this.b2Vec2(xGravity, -yGravity));\n    }\n\n    addGearJointBetweenObjects(object, ratio) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      if (object == null || !object.hasBehavior(this.name)) {\n        return;\n      }\n      const otherBody = object.getBehavior(this.name).getBox2DBody();\n      if (this._box2DBody == otherBody) {\n        return;\n      }\n\n      //Gear joint need a revolute joint to the ground for the two objects\n      const jointDef1 = new Box2D.b2RevoluteJointDef();\n      jointDef1.Initialize(\n        this._sharedData.world.GetGroundBody(),\n        this._box2DBody,\n        this._box2DBody.GetWorldCenter()\n      );\n      const jointDef2 = new Box2D.b2RevoluteJointDef();\n      jointDef2.Initialize(\n        this._sharedData.world.GetGroundBody(),\n        otherBody,\n        otherBody.GetWorldCenter()\n      );\n      const jointDef = new Box2D.b2GearJointDef();\n      jointDef.set_bodyA(this._box2DBody);\n      jointDef.set_bodyB(otherBody);\n      jointDef.set_joint1(this._sharedData.world.CreateJoint(jointDef1));\n      jointDef.set_joint2(this._sharedData.world.CreateJoint(jointDef2));\n      jointDef.set_ratio(ratio * 3.14159);\n      this._sharedData.world.CreateJoint(jointDef);\n    }\n\n    setLinearVelocityX(xVelocity): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetLinearVelocity(\n        this.b2Vec2(xVelocity, this._box2DBody.GetLinearVelocity().get_y())\n      );\n    }\n\n    setLinearVelocityY(yVelocity): void {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      this._box2DBody.SetLinearVelocity(\n        this.b2Vec2(this._box2DBody.GetLinearVelocity().get_x(), -yVelocity)\n      );\n    }\n\n    getLinearVelocityX(): float {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return this._box2DBody.GetLinearVelocity().get_x();\n    }\n\n    getLinearVelocityY(): float {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return -this._box2DBody.GetLinearVelocity().get_y();\n    }\n\n    getLinearVelocity() {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return Math.sqrt(\n        this._box2DBody.GetLinearVelocity().get_x() *\n          this._box2DBody.GetLinearVelocity().get_x() +\n          this._box2DBody.GetLinearVelocity().get_y() *\n            this._box2DBody.GetLinearVelocity().get_y()\n      );\n    }\n\n    getAngularVelocity() {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return this._box2DBody.GetAngularVelocity();\n    }\n\n    getLinearDamping() {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return this._box2DBody.GetLinearDamping();\n    }\n\n    getAngularDamping() {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n      return this._box2DBody.GetAngularDamping();\n    }\n\n    collisionWith(otherObjectsTable) {\n      if (this._box2DBody === null) {\n        this.createBody();\n      }\n\n      //Getting a list of all objects which are tested\n      const objects = gdjs.staticArray(\n        PhysicsRuntimeBehavior.prototype.collisionWith\n      );\n      objects.length = 0;\n      const objectsLists = gdjs.staticArray2(\n        PhysicsRuntimeBehavior.prototype.collisionWith\n      );\n      otherObjectsTable.values(objectsLists);\n      for (let i = 0, len = objectsLists.length; i < len; ++i) {\n        objects.push.apply(objects, objectsLists[i]);\n      }\n\n      //Test if an object of the list is in collision with our object.\n      for (let i = 0, len = objects.length; i < len; ++i) {\n        for (let j = 0, lenj = this.currentContacts.length; j < lenj; ++j) {\n          if (this.currentContacts[j].owner.id === objects[i].id) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    isStatic(): boolean {\n      return !this._dynamic;\n    }\n\n    isDynamic(): boolean {\n      return this._dynamic;\n    }\n  }\n\n  gdjs.registerBehavior(\n    'PhysicsBehavior::PhysicsBehavior',\n    gdjs.PhysicsRuntimeBehavior\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
