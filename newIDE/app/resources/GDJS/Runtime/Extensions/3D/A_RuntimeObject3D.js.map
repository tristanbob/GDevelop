{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/A_RuntimeObject3D.ts"],
  "sourcesContent": ["namespace gdjs {\n  export interface Object3DDataContent {\n    width: float;\n    height: float;\n    depth: float;\n  }\n  /** Base parameters for {@link gdjs.RuntimeObject3D} */\n  export interface Object3DData extends ObjectData {\n    /** The base parameters of the RuntimeObject3D */\n    content: Object3DDataContent;\n  }\n\n  const getValidDimensionValue = (value: float | undefined) =>\n    value === undefined ? 100 : value <= 0 ? 1 : value;\n\n  /**\n   * Base class for 3D objects.\n   */\n  export abstract class RuntimeObject3D extends gdjs.RuntimeObject {\n    /**\n     * Position on the Z axis.\n     */\n    private _z: float = 0;\n    /**\n     * `_width` takes this value when the scale equals 1.\n     *\n     * It can't be 0.\n     */\n    private _originalWidth: float;\n    /**\n     * `_height` takes this value when the scale equals 1.\n     *\n     * It can't be 0.\n     */\n    private _originalHeight: float;\n    /**\n     * `depth` takes this value when the scale equals 1.\n     *\n     * It can't be 0.\n     */\n    private _originalDepth: float;\n    private _width: float;\n    private _height: float;\n    private _depth: float;\n    private _flippedX: boolean = false;\n    private _flippedY: boolean = false;\n    private _flippedZ: boolean = false;\n    /**\n     * Euler angle with the `ZYX` order.\n     *\n     * Note that `_rotationZ` is `angle` from `gdjs.RuntimeObject`.\n     */\n    private _rotationX: float = 0;\n    /**\n     * Euler angle with the `ZYX` order.\n     *\n     * Note that `_rotationZ` is `angle` from `gdjs.RuntimeObject`.\n     */\n    private _rotationY: float = 0;\n    private static _temporaryVector = new THREE.Vector3();\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: Object3DData\n    ) {\n      super(instanceContainer, objectData);\n      // TODO Should 0 be replaced by 0.01 instead of using the default value?\n      this._width = this._originalWidth = getValidDimensionValue(\n        objectData.content.width\n      );\n      this._height = this._originalHeight = getValidDimensionValue(\n        objectData.content.height\n      );\n      this._depth = this._originalDepth = getValidDimensionValue(\n        objectData.content.depth\n      );\n    }\n\n    abstract getRenderer(): gdjs.RuntimeObject3DRenderer;\n\n    getRendererObject() {\n      return null;\n    }\n\n    get3DRendererObject() {\n      return this.getRenderer().get3DRendererObject();\n    }\n\n    updateFromObjectData(\n      oldObjectData: Object3DData,\n      newObjectData: Object3DData\n    ): boolean {\n      // There is no need to check if they changed because events can't modify them.\n      this._setOriginalWidth(\n        getValidDimensionValue(newObjectData.content.width)\n      );\n      this._setOriginalHeight(\n        getValidDimensionValue(newObjectData.content.height)\n      );\n      this._setOriginalDepth(\n        getValidDimensionValue(newObjectData.content.depth)\n      );\n      return true;\n    }\n\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n      if (initialInstanceData.depth !== undefined)\n        this.setDepth(initialInstanceData.depth);\n    }\n\n    setX(x: float): void {\n      super.setX(x);\n      this.getRenderer().updatePosition();\n    }\n\n    setY(y: float): void {\n      super.setY(y);\n      this.getRenderer().updatePosition();\n    }\n\n    /**\n     * Set the object position on the Z axis.\n     */\n    setZ(z: float): void {\n      if (z === this._z) return;\n      this._z = z;\n      this.getRenderer().updatePosition();\n    }\n\n    /**\n     * Get the object position on the Z axis.\n     */\n    getZ(): float {\n      return this._z;\n    }\n\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this.getRenderer().updateRotation();\n    }\n\n    /**\n     * Set the object rotation on the X axis.\n     *\n     * This is an Euler angle. Objects use the `ZYX` order.\n     */\n    setRotationX(angle: float): void {\n      this._rotationX = angle;\n      this.getRenderer().updateRotation();\n    }\n\n    /**\n     * Set the object rotation on the Y axis.\n     *\n     * This is an Euler angle. Objects use the `ZYX` order.\n     */\n    setRotationY(angle: float): void {\n      this._rotationY = angle;\n      this.getRenderer().updateRotation();\n    }\n\n    /**\n     * Get the object rotation on the X axis.\n     *\n     * This is an Euler angle. Objects use the `ZYX` order.\n     */\n    getRotationX(): float {\n      return this._rotationX;\n    }\n\n    /**\n     * Get the object rotation on the Y axis.\n     *\n     * This is an Euler angle. Objects use the `ZYX` order.\n     */\n    getRotationY(): float {\n      return this._rotationY;\n    }\n\n    /**\n     * Turn the object around the scene x axis at its center.\n     * @param deltaAngle the rotation angle\n     */\n    turnAroundX(deltaAngle: float): void {\n      const axisX = gdjs.RuntimeObject3D._temporaryVector;\n      axisX.set(1, 0, 0);\n\n      const mesh = this.getRenderer().get3DRendererObject();\n      mesh.rotateOnWorldAxis(axisX, gdjs.toRad(deltaAngle));\n      this._rotationX = gdjs.toDegrees(mesh.rotation.x);\n      this._rotationY = gdjs.toDegrees(mesh.rotation.y);\n      this.setAngle(gdjs.toDegrees(mesh.rotation.z));\n    }\n\n    /**\n     * Turn the object around the scene y axis at its center.\n     * @param deltaAngle the rotation angle\n     */\n    turnAroundY(deltaAngle: float): void {\n      const axisY = gdjs.RuntimeObject3D._temporaryVector;\n      axisY.set(0, 1, 0);\n\n      const mesh = this.getRenderer().get3DRendererObject();\n      mesh.rotateOnWorldAxis(axisY, gdjs.toRad(deltaAngle));\n      this._rotationX = gdjs.toDegrees(mesh.rotation.x);\n      this._rotationY = gdjs.toDegrees(mesh.rotation.y);\n      this.setAngle(gdjs.toDegrees(mesh.rotation.z));\n    }\n\n    /**\n     * Turn the object around the scene z axis at its center.\n     * @param deltaAngle the rotation angle\n     */\n    turnAroundZ(deltaAngle: float): void {\n      const axisZ = gdjs.RuntimeObject3D._temporaryVector;\n      axisZ.set(0, 0, 1);\n\n      const mesh = this.getRenderer().get3DRendererObject();\n      mesh.rotateOnWorldAxis(axisZ, gdjs.toRad(deltaAngle));\n      this._rotationX = gdjs.toDegrees(mesh.rotation.x);\n      this._rotationY = gdjs.toDegrees(mesh.rotation.y);\n      this.setAngle(gdjs.toDegrees(mesh.rotation.z));\n    }\n\n    getWidth(): float {\n      return this._width;\n    }\n\n    getHeight(): float {\n      return this._height;\n    }\n\n    /**\n     * Get the object size on the Z axis (called \"depth\").\n     */\n    getDepth(): float {\n      return this._depth;\n    }\n\n    setWidth(width: float): void {\n      if (this._width === width) return;\n\n      this._width = width;\n      this.getRenderer().updateSize();\n      this.invalidateHitboxes();\n    }\n\n    setHeight(height: float): void {\n      if (this._height === height) return;\n\n      this._height = height;\n      this.getRenderer().updateSize();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the object size on the Z axis (called \"depth\").\n     */\n    setDepth(depth: float): void {\n      if (this._depth === depth) return;\n\n      this._depth = depth;\n      this.getRenderer().updateSize();\n    }\n\n    /**\n     * Return the width of the object for a scale of 1.\n     *\n     * It can't be 0.\n     */\n    _getOriginalWidth(): float {\n      return this._originalWidth;\n    }\n\n    /**\n     * Return the height of the object for a scale of 1.\n     *\n     * It can't be 0.\n     */\n    _getOriginalHeight(): float {\n      return this._originalHeight;\n    }\n\n    /**\n     * Return the object size on the Z axis (called \"depth\") when the scale equals 1.\n     */\n    _getOriginalDepth(): float {\n      return this._originalDepth;\n    }\n\n    /**\n     * Set the width of the object for a scale of 1.\n     */\n    _setOriginalWidth(originalWidth: float): void {\n      if (originalWidth <= 0) {\n        originalWidth = 1;\n      }\n      const oldOriginalWidth = this._originalWidth;\n      this._originalWidth = originalWidth;\n      if (oldOriginalWidth === this._width) {\n        this.setWidth(originalWidth);\n      }\n    }\n\n    /**\n     * Set the height of the object for a scale of 1.\n     */\n    _setOriginalHeight(originalHeight: float): void {\n      if (originalHeight <= 0) {\n        originalHeight = 1;\n      }\n      const oldOriginalHeight = this._originalHeight;\n      this._originalHeight = originalHeight;\n      if (oldOriginalHeight === this._height) {\n        this.setHeight(originalHeight);\n      }\n    }\n\n    /**\n     * Set the object size on the Z axis (called \"depth\") when the scale equals 1.\n     */\n    _setOriginalDepth(originalDepth: float): void {\n      if (originalDepth <= 0) {\n        originalDepth = 1;\n      }\n      const oldOriginalDepth = this._originalDepth;\n      this._originalDepth = originalDepth;\n      if (oldOriginalDepth === this._depth) {\n        this.setDepth(originalDepth);\n      }\n    }\n\n    /**\n     * Change the scale on X, Y and Z axis of the object.\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScale(newScale: number): void {\n      this.setScaleX(newScale);\n      this.setScaleY(newScale);\n      this.setScaleZ(newScale);\n    }\n\n    /**\n     * Change the scale on X axis of the object (changing its width).\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScaleX(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      this.setWidth(this._originalWidth * newScale);\n    }\n\n    /**\n     * Change the scale on Y axis of the object (changing its height).\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScaleY(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      this.setHeight(this._originalHeight * newScale);\n    }\n\n    /**\n     * Change the scale on Z axis of the object (changing its height).\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScaleZ(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      this.setDepth(this._originalDepth * newScale);\n    }\n\n    /**\n     * Get the scale of the object (or the geometric average of X, Y and Z scale in case they are different).\n     *\n     * @return the scale of the object (or the geometric average of X, Y and Z scale in case they are different).\n     */\n    getScale(): number {\n      const scaleX = this.getScaleX();\n      const scaleY = this.getScaleY();\n      const scaleZ = this.getScaleZ();\n      return scaleX === scaleY && scaleX === scaleZ\n        ? scaleX\n        : Math.pow(scaleX * scaleY * scaleZ, 1 / 3);\n    }\n\n    /**\n     * Get the scale of the object on X axis.\n     *\n     * @return the scale of the object on X axis\n     */\n    getScaleX(): float {\n      return Math.abs(this._width / this._originalWidth);\n    }\n\n    /**\n     * Get the scale of the object on Y axis.\n     *\n     * @return the scale of the object on Y axis\n     */\n    getScaleY(): float {\n      return Math.abs(this._height / this._originalHeight);\n    }\n\n    /**\n     * Get the scale of the object on Z axis.\n     *\n     * @return the scale of the object on Z axis\n     */\n    getScaleZ(): float {\n      return Math.abs(this._depth / this._originalDepth);\n    }\n\n    flipX(enable: boolean) {\n      if (enable !== this._flippedX) {\n        this._flippedX = enable;\n        this.getRenderer().updateSize();\n      }\n    }\n\n    flipY(enable: boolean) {\n      if (enable !== this._flippedY) {\n        this._flippedY = enable;\n        this.getRenderer().updateSize();\n      }\n    }\n\n    flipZ(enable: boolean) {\n      if (enable !== this._flippedZ) {\n        this._flippedZ = enable;\n        this.getRenderer().updateSize();\n      }\n    }\n\n    isFlippedX(): boolean {\n      return this._flippedX;\n    }\n\n    isFlippedY(): boolean {\n      return this._flippedY;\n    }\n\n    isFlippedZ(): boolean {\n      return this._flippedZ;\n    }\n\n    hide(enable: boolean): void {\n      super.hide(enable);\n      this.getRenderer().updateVisibility();\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CAYE,KAAM,GAAyB,AAAC,GAC9B,IAAU,OAAY,IAAM,GAAS,EAAI,EAAI,EAKxC,eAAuC,GAAK,aAAc,CA2C/D,YACE,EACA,EACA,CACA,MAAM,EAAmB,GA3CnB,QAAY,EAsBZ,eAAqB,GACrB,eAAqB,GACrB,eAAqB,GAMrB,gBAAoB,EAMpB,gBAAoB,EAS1B,KAAK,OAAS,KAAK,eAAiB,EAClC,EAAW,QAAQ,OAErB,KAAK,QAAU,KAAK,gBAAkB,EACpC,EAAW,QAAQ,QAErB,KAAK,OAAS,KAAK,eAAiB,EAClC,EAAW,QAAQ,OAMvB,mBAAoB,CAClB,MAAO,MAGT,qBAAsB,CACpB,MAAO,MAAK,cAAc,sBAG5B,qBACE,EACA,EACS,CAET,YAAK,kBACH,EAAuB,EAAc,QAAQ,QAE/C,KAAK,mBACH,EAAuB,EAAc,QAAQ,SAE/C,KAAK,kBACH,EAAuB,EAAc,QAAQ,QAExC,GAGT,uCAAuC,EAAmC,CACxE,AAAI,EAAoB,YACtB,MAAK,SAAS,EAAoB,OAClC,KAAK,UAAU,EAAoB,SAEjC,EAAoB,QAAU,QAChC,KAAK,SAAS,EAAoB,OAGtC,KAAK,EAAgB,CACnB,MAAM,KAAK,GACX,KAAK,cAAc,iBAGrB,KAAK,EAAgB,CACnB,MAAM,KAAK,GACX,KAAK,cAAc,iBAMrB,KAAK,EAAgB,CACnB,AAAI,IAAM,KAAK,IACf,MAAK,GAAK,EACV,KAAK,cAAc,kBAMrB,MAAc,CACZ,MAAO,MAAK,GAGd,SAAS,EAAoB,CAC3B,MAAM,SAAS,GACf,KAAK,cAAc,iBAQrB,aAAa,EAAoB,CAC/B,KAAK,WAAa,EAClB,KAAK,cAAc,iBAQrB,aAAa,EAAoB,CAC/B,KAAK,WAAa,EAClB,KAAK,cAAc,iBAQrB,cAAsB,CACpB,MAAO,MAAK,WAQd,cAAsB,CACpB,MAAO,MAAK,WAOd,YAAY,EAAyB,CACnC,KAAM,GAAQ,EAAK,gBAAgB,iBACnC,EAAM,IAAI,EAAG,EAAG,GAEhB,KAAM,GAAO,KAAK,cAAc,sBAChC,EAAK,kBAAkB,EAAO,EAAK,MAAM,IACzC,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,SAAS,EAAK,UAAU,EAAK,SAAS,IAO7C,YAAY,EAAyB,CACnC,KAAM,GAAQ,EAAK,gBAAgB,iBACnC,EAAM,IAAI,EAAG,EAAG,GAEhB,KAAM,GAAO,KAAK,cAAc,sBAChC,EAAK,kBAAkB,EAAO,EAAK,MAAM,IACzC,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,SAAS,EAAK,UAAU,EAAK,SAAS,IAO7C,YAAY,EAAyB,CACnC,KAAM,GAAQ,EAAK,gBAAgB,iBACnC,EAAM,IAAI,EAAG,EAAG,GAEhB,KAAM,GAAO,KAAK,cAAc,sBAChC,EAAK,kBAAkB,EAAO,EAAK,MAAM,IACzC,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,WAAa,EAAK,UAAU,EAAK,SAAS,GAC/C,KAAK,SAAS,EAAK,UAAU,EAAK,SAAS,IAG7C,UAAkB,CAChB,MAAO,MAAK,OAGd,WAAmB,CACjB,MAAO,MAAK,QAMd,UAAkB,CAChB,MAAO,MAAK,OAGd,SAAS,EAAoB,CAC3B,AAAI,KAAK,SAAW,GAEpB,MAAK,OAAS,EACd,KAAK,cAAc,aACnB,KAAK,sBAGP,UAAU,EAAqB,CAC7B,AAAI,KAAK,UAAY,GAErB,MAAK,QAAU,EACf,KAAK,cAAc,aACnB,KAAK,sBAMP,SAAS,EAAoB,CAC3B,AAAI,KAAK,SAAW,GAEpB,MAAK,OAAS,EACd,KAAK,cAAc,cAQrB,mBAA2B,CACzB,MAAO,MAAK,eAQd,oBAA4B,CAC1B,MAAO,MAAK,gBAMd,mBAA2B,CACzB,MAAO,MAAK,eAMd,kBAAkB,EAA4B,CAC5C,AAAI,GAAiB,GACnB,GAAgB,GAElB,KAAM,GAAmB,KAAK,eAC9B,KAAK,eAAiB,EAClB,IAAqB,KAAK,QAC5B,KAAK,SAAS,GAOlB,mBAAmB,EAA6B,CAC9C,AAAI,GAAkB,GACpB,GAAiB,GAEnB,KAAM,GAAoB,KAAK,gBAC/B,KAAK,gBAAkB,EACnB,IAAsB,KAAK,SAC7B,KAAK,UAAU,GAOnB,kBAAkB,EAA4B,CAC5C,AAAI,GAAiB,GACnB,GAAgB,GAElB,KAAM,GAAmB,KAAK,eAC9B,KAAK,eAAiB,EAClB,IAAqB,KAAK,QAC5B,KAAK,SAAS,GASlB,SAAS,EAAwB,CAC/B,KAAK,UAAU,GACf,KAAK,UAAU,GACf,KAAK,UAAU,GAQjB,UAAU,EAAwB,CAChC,AAAI,EAAW,GACb,GAAW,GAEb,KAAK,SAAS,KAAK,eAAiB,GAQtC,UAAU,EAAwB,CAChC,AAAI,EAAW,GACb,GAAW,GAEb,KAAK,UAAU,KAAK,gBAAkB,GAQxC,UAAU,EAAwB,CAChC,AAAI,EAAW,GACb,GAAW,GAEb,KAAK,SAAS,KAAK,eAAiB,GAQtC,UAAmB,CACjB,KAAM,GAAS,KAAK,YACd,EAAS,KAAK,YACd,EAAS,KAAK,YACpB,MAAO,KAAW,GAAU,IAAW,EACnC,EACA,KAAK,IAAI,EAAS,EAAS,EAAQ,EAAI,GAQ7C,WAAmB,CACjB,MAAO,MAAK,IAAI,KAAK,OAAS,KAAK,gBAQrC,WAAmB,CACjB,MAAO,MAAK,IAAI,KAAK,QAAU,KAAK,iBAQtC,WAAmB,CACjB,MAAO,MAAK,IAAI,KAAK,OAAS,KAAK,gBAGrC,MAAM,EAAiB,CACrB,AAAI,IAAW,KAAK,WAClB,MAAK,UAAY,EACjB,KAAK,cAAc,cAIvB,MAAM,EAAiB,CACrB,AAAI,IAAW,KAAK,WAClB,MAAK,UAAY,EACjB,KAAK,cAAc,cAIvB,MAAM,EAAiB,CACrB,AAAI,IAAW,KAAK,WAClB,MAAK,UAAY,EACjB,KAAK,cAAc,cAIvB,YAAsB,CACpB,MAAO,MAAK,UAGd,YAAsB,CACpB,MAAO,MAAK,UAGd,YAAsB,CACpB,MAAO,MAAK,UAGd,KAAK,EAAuB,CAC1B,MAAM,KAAK,GACX,KAAK,cAAc,oBAhZN,AAzCV,EAyCU,iBAAmB,GAAI,OAAM,QAzCvC,EAAe,oBAlBd",
  "names": []
}
