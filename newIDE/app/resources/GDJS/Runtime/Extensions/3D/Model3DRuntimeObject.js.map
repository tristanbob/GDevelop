{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/Model3DRuntimeObject.ts"],
  "sourcesContent": ["namespace gdjs {\n  /** Base parameters for {@link gdjs.Cube3DRuntimeObject} */\n  export interface Model3DObjectData extends Object3DData {\n    /** The base parameters of the Model3D object */\n    content: Object3DDataContent & {\n      modelResourceName: string;\n      rotationX: number;\n      rotationY: number;\n      rotationZ: number;\n      keepAspectRatio: boolean;\n      materialType: 'Basic' | 'StandardWithoutMetalness' | 'KeepOriginal';\n    };\n  }\n\n  /**\n   * A 3D object which displays a 3D model.\n   */\n  export class Model3DRuntimeObject extends gdjs.RuntimeObject3D {\n    _renderer: gdjs.Model3DRuntimeObjectRenderer;\n\n    _modelResourceName: string;\n    _materialType: gdjs.Model3DRuntimeObject.MaterialType =\n      gdjs.Model3DRuntimeObject.MaterialType.Basic;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: Model3DObjectData\n    ) {\n      super(instanceContainer, objectData);\n      this._modelResourceName = objectData.content.modelResourceName;\n      this._renderer = new gdjs.Model3DRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n      this._updateMaterialType(objectData);\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    updateFromObjectData(\n      oldObjectData: Model3DObjectData,\n      newObjectData: Model3DObjectData\n    ): boolean {\n      super.updateFromObjectData(oldObjectData, newObjectData);\n      if (\n        oldObjectData.content.width !== newObjectData.content.width ||\n        oldObjectData.content.height !== newObjectData.content.height ||\n        oldObjectData.content.depth !== newObjectData.content.depth ||\n        oldObjectData.content.rotationX !== newObjectData.content.rotationX ||\n        oldObjectData.content.rotationY !== newObjectData.content.rotationY ||\n        oldObjectData.content.rotationZ !== newObjectData.content.rotationZ ||\n        oldObjectData.content.keepAspectRatio !==\n          newObjectData.content.keepAspectRatio\n      ) {\n        this._updateDefaultTransformation(newObjectData);\n      }\n      if (\n        oldObjectData.content.materialType !==\n        newObjectData.content.materialType\n      ) {\n        this._updateMaterialType(newObjectData);\n      }\n      return true;\n    }\n\n    _updateDefaultTransformation(objectData: Model3DObjectData) {\n      const rotationX = objectData.content.rotationX || 0;\n      const rotationY = objectData.content.rotationY || 0;\n      const rotationZ = objectData.content.rotationZ || 0;\n      const keepAspectRatio = objectData.content.keepAspectRatio;\n      this._renderer._updateDefaultTransformation(\n        rotationX,\n        rotationY,\n        rotationZ,\n        this._getOriginalWidth(),\n        this._getOriginalHeight(),\n        this._getOriginalDepth(),\n        keepAspectRatio\n      );\n    }\n\n    getRenderer(): RuntimeObject3DRenderer {\n      return this._renderer;\n    }\n\n    _convertMaterialType(\n      materialTypeString: string\n    ): gdjs.Model3DRuntimeObject.MaterialType {\n      if (materialTypeString === 'KeepOriginal') {\n        return gdjs.Model3DRuntimeObject.MaterialType.KeepOriginal;\n      } else if (materialTypeString === 'StandardWithoutMetalness') {\n        return gdjs.Model3DRuntimeObject.MaterialType.StandardWithoutMetalness;\n      } else {\n        return gdjs.Model3DRuntimeObject.MaterialType.Basic;\n      }\n    }\n\n    _updateMaterialType(objectData: Model3DObjectData) {\n      this._materialType = this._convertMaterialType(\n        objectData.content.materialType\n      );\n      this._renderer._updateMaterials();\n      this._updateDefaultTransformation(objectData);\n    }\n  }\n\n  export namespace Model3DRuntimeObject {\n    export enum MaterialType {\n      Basic,\n      StandardWithoutMetalness,\n      KeepOriginal,\n    }\n  }\n  gdjs.registerObject('Scene3D::Model3DObject', gdjs.Model3DRuntimeObject);\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CAiBS,eAAmC,GAAK,eAAgB,CAO7D,YACE,EACA,EACA,CACA,MAAM,EAAmB,GAP3B,mBACE,EAAK,qBAAqB,aAAa,MAOvC,KAAK,mBAAqB,EAAW,QAAQ,kBAC7C,KAAK,UAAY,GAAI,GAAK,6BACxB,KACA,GAEF,KAAK,oBAAoB,GAGzB,KAAK,YAGP,qBACE,EACA,EACS,CACT,aAAM,qBAAqB,EAAe,GAExC,GAAc,QAAQ,QAAU,EAAc,QAAQ,OACtD,EAAc,QAAQ,SAAW,EAAc,QAAQ,QACvD,EAAc,QAAQ,QAAU,EAAc,QAAQ,OACtD,EAAc,QAAQ,YAAc,EAAc,QAAQ,WAC1D,EAAc,QAAQ,YAAc,EAAc,QAAQ,WAC1D,EAAc,QAAQ,YAAc,EAAc,QAAQ,WAC1D,EAAc,QAAQ,kBACpB,EAAc,QAAQ,kBAExB,KAAK,6BAA6B,GAGlC,EAAc,QAAQ,eACtB,EAAc,QAAQ,cAEtB,KAAK,oBAAoB,GAEpB,GAGT,6BAA6B,EAA+B,CAC1D,KAAM,GAAY,EAAW,QAAQ,WAAa,EAC5C,EAAY,EAAW,QAAQ,WAAa,EAC5C,EAAY,EAAW,QAAQ,WAAa,EAC5C,EAAkB,EAAW,QAAQ,gBAC3C,KAAK,UAAU,6BACb,EACA,EACA,EACA,KAAK,oBACL,KAAK,qBACL,KAAK,oBACL,GAIJ,aAAuC,CACrC,MAAO,MAAK,UAGd,qBACE,EACwC,CACxC,MAAI,KAAuB,eAClB,EAAK,qBAAqB,aAAa,aACrC,IAAuB,2BACzB,EAAK,qBAAqB,aAAa,yBAEvC,EAAK,qBAAqB,aAAa,MAIlD,oBAAoB,EAA+B,CACjD,KAAK,cAAgB,KAAK,qBACxB,EAAW,QAAQ,cAErB,KAAK,UAAU,mBACf,KAAK,6BAA6B,IAtF/B,EAAM,uBA0FN,SAAU,EAAV,CACE,GAAK,GAAL,UAAK,EAAL,CACL,qBACA,2DACA,qCAHU,wCADG,uDAOjB,EAAK,eAAe,yBAA0B,EAAK,wBAlH3C",
  "names": []
}
