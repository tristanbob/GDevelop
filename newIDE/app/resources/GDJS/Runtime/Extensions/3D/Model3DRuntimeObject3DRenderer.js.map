{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/Model3DRuntimeObject3DRenderer.ts"],
  "sourcesContent": ["namespace gdjs {\n  const removeMetalness = (material: THREE.Material): void => {\n    //@ts-ignore\n    if (material.metalness) {\n      //@ts-ignore\n      material.metalness = 0;\n    }\n  };\n\n  const removeMetalnessFromMesh = (node: THREE.Object3D<THREE.Event>) => {\n    const mesh = node as THREE.Mesh;\n    if (!mesh.material) {\n      return;\n    }\n    if (Array.isArray(mesh.material)) {\n      for (let index = 0; index < mesh.material.length; index++) {\n        removeMetalness(mesh.material[index]);\n      }\n    } else {\n      removeMetalness(mesh.material);\n    }\n  };\n\n  const traverseToRemoveMetalnessFromMeshes = (\n    node: THREE.Object3D<THREE.Event>\n  ) => node.traverse(removeMetalnessFromMesh);\n\n  const convertToBasicMaterial = (\n    material: THREE.Material\n  ): THREE.MeshBasicMaterial => {\n    const basicMaterial = new THREE.MeshBasicMaterial();\n    //@ts-ignore\n    if (material.color) {\n      //@ts-ignore\n      basicMaterial.color = material.color;\n    }\n    //@ts-ignore\n    if (material.map) {\n      //@ts-ignore\n      basicMaterial.map = material.map;\n    }\n    return basicMaterial;\n  };\n\n  const setBasicMaterialTo = (node: THREE.Object3D<THREE.Event>): void => {\n    const mesh = node as THREE.Mesh;\n    if (!mesh.material) {\n      return;\n    }\n\n    if (Array.isArray(mesh.material)) {\n      for (let index = 0; index < mesh.material.length; index++) {\n        mesh.material[index] = convertToBasicMaterial(mesh.material[index]);\n      }\n    } else {\n      mesh.material = convertToBasicMaterial(mesh.material);\n    }\n  };\n\n  const traverseToSetBasicMaterialFromMeshes = (\n    node: THREE.Object3D<THREE.Event>\n  ) => node.traverse(setBasicMaterialTo);\n\n  class Model3DRuntimeObject3DRenderer extends gdjs.RuntimeObject3DRenderer {\n    private _model3DRuntimeObject: gdjs.Model3DRuntimeObject;\n    /**\n     * The 3D model stretched in a 1x1x1 cube.\n     */\n    private _threeObject: THREE.Object3D;\n\n    constructor(\n      runtimeObject: gdjs.Model3DRuntimeObject,\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ) {\n      // @ts-ignore It can't be null if THREE exists.\n      const originalModelMesh: THREE.Object3D = instanceContainer\n        .getGame()\n        .getModel3DManager()\n        .getModel(runtimeObject._modelResourceName);\n      const modelObject3D = THREE_ADDONS.SkeletonUtils.clone(originalModelMesh);\n\n      // Create a group to transform the object according to\n      // position, angle and dimensions.\n      const group = new THREE.Group();\n      group.rotation.order = 'ZYX';\n      group.add(modelObject3D);\n      super(runtimeObject, instanceContainer, group);\n\n      this._model3DRuntimeObject = runtimeObject;\n      this._threeObject = modelObject3D;\n\n      this.updateSize();\n      this.updatePosition();\n      this.updateRotation();\n    }\n\n    _updateDefaultTransformation(\n      rotationX: float,\n      rotationY: float,\n      rotationZ: float,\n      originalWidth: float,\n      originalHeight: float,\n      originalDepth: float,\n      keepAspectRatio: boolean\n    ) {\n      const boundingBox = this._getModelAABB(rotationX, rotationY, rotationZ);\n\n      // Center the model.\n      this._threeObject.position.set(\n        -(boundingBox.min.x + boundingBox.max.x) / 2,\n        (this._threeObject.position.y =\n          -(boundingBox.min.y + boundingBox.max.y) / 2),\n        (this._threeObject.position.z =\n          -(boundingBox.min.z + boundingBox.max.z) / 2)\n      );\n\n      // Rotate the model.\n      this._threeObject.scale.set(1, 1, 1);\n      this._threeObject.rotation.set(\n        gdjs.toRad(rotationX),\n        gdjs.toRad(rotationY),\n        gdjs.toRad(rotationZ)\n      );\n\n      // Stretch the model in a 1x1x1 cube.\n      const modelWidth = boundingBox.max.x - boundingBox.min.x;\n      const modelHeight = boundingBox.max.y - boundingBox.min.y;\n      const modelDepth = boundingBox.max.z - boundingBox.min.z;\n\n      const scaleX = 1 / modelWidth;\n      const scaleY = 1 / modelHeight;\n      const scaleZ = 1 / modelDepth;\n\n      const scaleMatrix = new THREE.Matrix4();\n      scaleMatrix.makeScale(scaleX, scaleY, scaleZ);\n      this._threeObject.updateMatrix();\n      this._threeObject.applyMatrix4(scaleMatrix);\n\n      if (keepAspectRatio) {\n        // Reduce the object dimensions to keep aspect ratio.\n        const widthRatio = originalWidth / modelWidth;\n        const heightRatio = originalHeight / modelHeight;\n        const depthRatio = originalDepth / modelDepth;\n        const scaleRatio = Math.min(widthRatio, heightRatio, depthRatio);\n\n        this._object._setOriginalWidth(scaleRatio * modelWidth);\n        this._object._setOriginalHeight(scaleRatio * modelHeight);\n        this._object._setOriginalDepth(scaleRatio * modelDepth);\n      }\n\n      this._threeObject.updateMatrix();\n    }\n\n    private _getModelAABB(\n      rotationX: float,\n      rotationY: float,\n      rotationZ: float\n    ) {\n      // The original model is used because `setFromObject` is working in\n      // world transformation.\n\n      // @ts-ignore It can't be null if THREE exists.\n      const originalModelMesh: THREE.Object3D = this._object\n        .getInstanceContainer()\n        .getGame()\n        .getModel3DManager()\n        .getModel(this._model3DRuntimeObject._modelResourceName);\n\n      originalModelMesh.rotation.set(\n        gdjs.toRad(rotationX),\n        gdjs.toRad(rotationY),\n        gdjs.toRad(rotationZ)\n      );\n\n      const aabb = new THREE.Box3().setFromObject(originalModelMesh);\n\n      // Revert changes.\n      originalModelMesh.rotation.set(0, 0, 0);\n\n      return aabb;\n    }\n\n    _updateMaterials() {\n      // @ts-ignore It can't be null if THREE exists.\n      const originalModelMesh: THREE.Object3D = this._model3DRuntimeObject\n        .getInstanceContainer()\n        .getGame()\n        .getModel3DManager()\n        .getModel(this._model3DRuntimeObject._modelResourceName);\n      const modelObject3D = THREE_ADDONS.SkeletonUtils.clone(originalModelMesh);\n\n      this.get3DRendererObject().remove(this._threeObject);\n      this.get3DRendererObject().add(modelObject3D);\n\n      this._threeObject = modelObject3D;\n\n      this._replaceMaterials();\n    }\n\n    /**\n     * Replace materials to better work with lights (or no light).\n     */\n    _replaceMaterials() {\n      if (\n        this._model3DRuntimeObject._materialType ===\n        gdjs.Model3DRuntimeObject.MaterialType.StandardWithoutMetalness\n      ) {\n        traverseToRemoveMetalnessFromMeshes(this._threeObject);\n      } else if (\n        this._model3DRuntimeObject._materialType ===\n        gdjs.Model3DRuntimeObject.MaterialType.Basic\n      ) {\n        traverseToSetBasicMaterialFromMeshes(this._threeObject);\n      }\n    }\n  }\n\n  export const Model3DRuntimeObjectRenderer = Model3DRuntimeObject3DRenderer;\n  export type Model3DRuntimeObjectRenderer = Model3DRuntimeObject3DRenderer;\n}\n"],
  "mappings": "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",
  "names": []
}
