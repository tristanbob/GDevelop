{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/Cube3DRuntimeObject.ts"],
  "sourcesContent": ["namespace gdjs {\n  /** Base parameters for {@link gdjs.Cube3DRuntimeObject} */\n  export interface Cube3DObjectData extends Object3DData {\n    /** The base parameters of the Cube3D object */\n    content: Object3DDataContent & {\n      enableTextureTransparency: boolean;\n      facesOrientation: 'Y' | 'Z';\n      frontFaceResourceName: string;\n      backFaceResourceName: string;\n      backFaceUpThroughWhichAxisRotation: 'X' | 'Y';\n      leftFaceResourceName: string;\n      rightFaceResourceName: string;\n      topFaceResourceName: string;\n      bottomFaceResourceName: string;\n      frontFaceResourceRepeat: boolean;\n      backFaceResourceRepeat: boolean;\n      leftFaceResourceRepeat: boolean;\n      rightFaceResourceRepeat: boolean;\n      topFaceResourceRepeat: boolean;\n      bottomFaceResourceRepeat: boolean;\n      frontFaceVisible: boolean;\n      backFaceVisible: boolean;\n      leftFaceVisible: boolean;\n      rightFaceVisible: boolean;\n      topFaceVisible: boolean;\n      bottomFaceVisible: boolean;\n      materialType: 'Basic' | 'StandardWithoutMetalness';\n    };\n  }\n\n  type FaceName = 'front' | 'back' | 'left' | 'right' | 'top' | 'bottom';\n  const faceNameToBitmaskIndex = {\n    front: 0,\n    back: 1,\n    left: 2,\n    right: 3,\n    top: 4,\n    bottom: 5,\n  };\n\n  /**\n   * Shows a 3D box object.\n   */\n  export class Cube3DRuntimeObject extends gdjs.RuntimeObject3D {\n    private _renderer: Cube3DRuntimeObjectRenderer;\n    private _facesOrientation: 'Y' | 'Z';\n    private _backFaceUpThroughWhichAxisRotation: 'X' | 'Y';\n    private _shouldUseTransparentTexture: boolean;\n    // `_rotationZ` is `angle` from `gdjs.RuntimeObject`.\n    private _visibleFacesBitmask: integer;\n    private _textureRepeatFacesBitmask: integer;\n    private _faceResourceNames: [\n      string,\n      string,\n      string,\n      string,\n      string,\n      string\n    ];\n    _materialType: gdjs.Cube3DRuntimeObject.MaterialType =\n      gdjs.Cube3DRuntimeObject.MaterialType.Basic;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: Cube3DObjectData\n    ) {\n      super(instanceContainer, objectData);\n      this._shouldUseTransparentTexture =\n        objectData.content.enableTextureTransparency || false;\n      this._facesOrientation = objectData.content.facesOrientation || 'Y';\n      this._visibleFacesBitmask = 0;\n      if (objectData.content.frontFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['front'];\n      if (objectData.content.backFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['back'];\n      if (objectData.content.leftFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['left'];\n      if (objectData.content.rightFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['right'];\n      if (objectData.content.topFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['top'];\n      if (objectData.content.bottomFaceVisible)\n        this._visibleFacesBitmask |= 1 << faceNameToBitmaskIndex['bottom'];\n      this._textureRepeatFacesBitmask = 0;\n      if (objectData.content.frontFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |= 1 << faceNameToBitmaskIndex['front'];\n      if (objectData.content.backFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |= 1 << faceNameToBitmaskIndex['back'];\n      if (objectData.content.leftFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |= 1 << faceNameToBitmaskIndex['left'];\n      if (objectData.content.rightFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |= 1 << faceNameToBitmaskIndex['right'];\n      if (objectData.content.topFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |= 1 << faceNameToBitmaskIndex['top'];\n      if (objectData.content.bottomFaceResourceRepeat)\n        this._textureRepeatFacesBitmask |=\n          1 << faceNameToBitmaskIndex['bottom'];\n      this._backFaceUpThroughWhichAxisRotation =\n        objectData.content.backFaceUpThroughWhichAxisRotation || 'X';\n      this._faceResourceNames = [\n        objectData.content.frontFaceResourceName,\n        objectData.content.backFaceResourceName,\n        objectData.content.leftFaceResourceName,\n        objectData.content.rightFaceResourceName,\n        objectData.content.topFaceResourceName,\n        objectData.content.bottomFaceResourceName,\n      ];\n      this._materialType = this._convertMaterialType(\n        objectData.content.materialType\n      );\n\n      this._renderer = new gdjs.Cube3DRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    /**\n     * Sets the visibility of a face of the 3D box.\n     *\n     * @param faceName - The name of the face to set visibility for.\n     * @param value - The visibility value to set.\n     */\n    setFaceVisibility(faceName: FaceName, enable: boolean) {\n      const faceIndex = faceNameToBitmaskIndex[faceName];\n      if (faceIndex === undefined) {\n        return;\n      }\n      if (enable === this.isFaceAtIndexVisible(faceIndex)) {\n        return;\n      }\n\n      if (enable) {\n        this._visibleFacesBitmask |= 1 << faceIndex;\n      } else {\n        this._visibleFacesBitmask &= ~(1 << faceIndex);\n      }\n      this._renderer.updateFace(faceIndex);\n    }\n\n    /**\n     * Sets the texture repeat of a face of the 3D box.\n     *\n     * @param faceName - The name of the face to set visibility for.\n     * @param value - The visibility value to set.\n     */\n    setRepeatTextureOnFace(faceName: FaceName, enable: boolean) {\n      const faceIndex = faceNameToBitmaskIndex[faceName];\n      if (faceIndex === undefined) {\n        return;\n      }\n      if (enable === this.shouldRepeatTextureOnFaceAtIndex(faceIndex)) {\n        return;\n      }\n\n      if (enable) {\n        this._textureRepeatFacesBitmask |= 1 << faceIndex;\n      } else {\n        this._textureRepeatFacesBitmask &= ~(1 << faceIndex);\n      }\n      this._renderer.updateFace(faceIndex);\n    }\n\n    isFaceVisible(faceName: FaceName): boolean {\n      const faceIndex = faceNameToBitmaskIndex[faceName];\n      if (faceIndex === undefined) {\n        return false;\n      }\n\n      return this.isFaceAtIndexVisible(faceIndex);\n    }\n\n    /** @internal */\n    isFaceAtIndexVisible(faceIndex): boolean {\n      return (this._visibleFacesBitmask & (1 << faceIndex)) !== 0;\n    }\n\n    /** @internal */\n    shouldRepeatTextureOnFaceAtIndex(faceIndex): boolean {\n      return (this._textureRepeatFacesBitmask & (1 << faceIndex)) !== 0;\n    }\n\n    setFaceResourceName(faceName: FaceName, resourceName: string): void {\n      const faceIndex = faceNameToBitmaskIndex[faceName];\n      if (faceIndex === undefined) {\n        return;\n      }\n      if (this._faceResourceNames[faceIndex] === resourceName) {\n        return;\n      }\n\n      this._faceResourceNames[faceIndex] = resourceName;\n      this._renderer.updateFace(faceIndex);\n    }\n\n    /** @internal */\n    getFaceAtIndexResourceName(faceIndex: integer): string {\n      return this._faceResourceNames[faceIndex];\n    }\n\n    getRenderer(): gdjs.RuntimeObject3DRenderer {\n      return this._renderer;\n    }\n\n    getBackFaceUpThroughWhichAxisRotation(): 'X' | 'Y' {\n      return this._backFaceUpThroughWhichAxisRotation;\n    }\n\n    setBackFaceUpThroughWhichAxisRotation(axis: 'X' | 'Y'): void {\n      this._backFaceUpThroughWhichAxisRotation = axis;\n      this._renderer.updateFace(faceNameToBitmaskIndex['back']);\n    }\n\n    getFacesOrientation(): 'Y' | 'Z' {\n      return this._facesOrientation;\n    }\n\n    setFacesOrientation(orientation: 'Y' | 'Z'): void {\n      this._facesOrientation = orientation;\n      this._renderer.updateFace(faceNameToBitmaskIndex['left']);\n      this._renderer.updateFace(faceNameToBitmaskIndex['right']);\n      this._renderer.updateFace(faceNameToBitmaskIndex['top']);\n      // Bottom texture should not change based on that setting.\n    }\n\n    updateFromObjectData(\n      oldObjectData: Cube3DObjectData,\n      newObjectData: Cube3DObjectData\n    ): boolean {\n      super.updateFromObjectData(oldObjectData, newObjectData);\n      if (\n        oldObjectData.content.frontFaceVisible !==\n        newObjectData.content.frontFaceVisible\n      ) {\n        this.setFaceVisibility('front', newObjectData.content.frontFaceVisible);\n      }\n      if (\n        oldObjectData.content.backFaceVisible !==\n        newObjectData.content.backFaceVisible\n      ) {\n        this.setFaceVisibility('back', newObjectData.content.backFaceVisible);\n      }\n      if (\n        oldObjectData.content.leftFaceVisible !==\n        newObjectData.content.leftFaceVisible\n      ) {\n        this.setFaceVisibility('left', newObjectData.content.leftFaceVisible);\n      }\n      if (\n        oldObjectData.content.rightFaceVisible !==\n        newObjectData.content.rightFaceVisible\n      ) {\n        this.setFaceVisibility('right', newObjectData.content.rightFaceVisible);\n      }\n      if (\n        oldObjectData.content.topFaceVisible !==\n        newObjectData.content.topFaceVisible\n      ) {\n        this.setFaceVisibility('top', newObjectData.content.topFaceVisible);\n      }\n      if (\n        oldObjectData.content.bottomFaceVisible !==\n        newObjectData.content.bottomFaceVisible\n      ) {\n        this.setFaceVisibility(\n          'bottom',\n          newObjectData.content.bottomFaceVisible\n        );\n      }\n      if (\n        oldObjectData.content.frontFaceResourceName !==\n        newObjectData.content.frontFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'front',\n          newObjectData.content.frontFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.backFaceResourceName !==\n        newObjectData.content.backFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'back',\n          newObjectData.content.backFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.leftFaceResourceName !==\n        newObjectData.content.leftFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'left',\n          newObjectData.content.leftFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.rightFaceResourceName !==\n        newObjectData.content.rightFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'right',\n          newObjectData.content.rightFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.topFaceResourceName !==\n        newObjectData.content.topFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'top',\n          newObjectData.content.topFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.bottomFaceResourceName !==\n        newObjectData.content.bottomFaceResourceName\n      ) {\n        this.setFaceResourceName(\n          'bottom',\n          newObjectData.content.bottomFaceResourceName\n        );\n      }\n      if (\n        oldObjectData.content.frontFaceResourceRepeat !==\n        newObjectData.content.frontFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'front',\n          newObjectData.content.frontFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.backFaceResourceRepeat !==\n        newObjectData.content.backFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'back',\n          newObjectData.content.backFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.leftFaceResourceRepeat !==\n        newObjectData.content.leftFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'left',\n          newObjectData.content.leftFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.rightFaceResourceRepeat !==\n        newObjectData.content.rightFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'right',\n          newObjectData.content.rightFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.topFaceResourceRepeat !==\n        newObjectData.content.topFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'top',\n          newObjectData.content.topFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.bottomFaceResourceRepeat !==\n        newObjectData.content.bottomFaceResourceRepeat\n      ) {\n        this.setRepeatTextureOnFace(\n          'bottom',\n          newObjectData.content.bottomFaceResourceRepeat\n        );\n      }\n      if (\n        oldObjectData.content.backFaceUpThroughWhichAxisRotation !==\n        newObjectData.content.backFaceUpThroughWhichAxisRotation\n      ) {\n        this.setBackFaceUpThroughWhichAxisRotation(\n          newObjectData.content.backFaceUpThroughWhichAxisRotation\n        );\n      }\n      if (\n        oldObjectData.content.facesOrientation !==\n        newObjectData.content.facesOrientation\n      ) {\n        this.setFacesOrientation(newObjectData.content.facesOrientation);\n      }\n      if (\n        oldObjectData.content.materialType !==\n        newObjectData.content.materialType\n      ) {\n        this.setMaterialType(newObjectData.content.materialType);\n      }\n\n      return true;\n    }\n\n    /**\n     * Return true if the texture transparency should be enabled.\n     */\n    shouldUseTransparentTexture(): boolean {\n      return this._shouldUseTransparentTexture;\n    }\n\n    _convertMaterialType(\n      materialTypeString: string\n    ): gdjs.Cube3DRuntimeObject.MaterialType {\n      if (materialTypeString === 'StandardWithoutMetalness') {\n        return gdjs.Cube3DRuntimeObject.MaterialType.StandardWithoutMetalness;\n      } else {\n        return gdjs.Cube3DRuntimeObject.MaterialType.Basic;\n      }\n    }\n\n    setMaterialType(materialTypeString: string) {\n      const newMaterialType = this._convertMaterialType(materialTypeString);\n      if (this._materialType === newMaterialType) {\n        return;\n      }\n\n      this._materialType = newMaterialType;\n      this._renderer._updateMaterials();\n    }\n  }\n\n  export namespace Cube3DRuntimeObject {\n    export enum MaterialType {\n      Basic,\n      StandardWithoutMetalness,\n    }\n  }\n  gdjs.registerObject('Scene3D::Cube3DObject', gdjs.Cube3DRuntimeObject);\n}\n"],
  "mappings": "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",
  "names": []
}
