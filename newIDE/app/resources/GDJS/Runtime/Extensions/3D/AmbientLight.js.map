{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/AmbientLight.ts"],
  "sourcesContent": ["namespace gdjs {\n  gdjs.PixiFiltersTools.registerFilterCreator(\n    'Scene3D::AmbientLight',\n    new (class implements gdjs.PixiFiltersTools.FilterCreator {\n      makeFilter(\n        target: EffectsTarget,\n        effectData: EffectData\n      ): gdjs.PixiFiltersTools.Filter {\n        return new (class implements gdjs.PixiFiltersTools.Filter {\n          light: THREE.AmbientLight;\n          _isEnabled: boolean;\n\n          constructor() {\n            this.light = new THREE.AmbientLight();\n            this._isEnabled = false;\n          }\n\n          isEnabled(target: EffectsTarget): boolean {\n            return this._isEnabled;\n          }\n          setEnabled(target: EffectsTarget, enabled: boolean): boolean {\n            if (this._isEnabled === enabled) {\n              return true;\n            }\n            if (enabled) {\n              return this.applyEffect(target);\n            } else {\n              return this.removeEffect(target);\n            }\n          }\n          applyEffect(target: EffectsTarget): boolean {\n            const scene = target.get3DRendererObject() as\n              | THREE.Scene\n              | null\n              | undefined;\n            if (!scene) {\n              return false;\n            }\n            scene.add(this.light);\n            this._isEnabled = true;\n            return true;\n          }\n          removeEffect(target: EffectsTarget): boolean {\n            const scene = target.get3DRendererObject() as\n              | THREE.Scene\n              | null\n              | undefined;\n            if (!scene) {\n              return false;\n            }\n            scene.remove(this.light);\n            this._isEnabled = false;\n            return true;\n          }\n          updatePreRender(target: gdjs.EffectsTarget): any {}\n          updateDoubleParameter(parameterName: string, value: number): void {\n            if (parameterName === 'intensity') {\n              this.light.intensity = value;\n            }\n          }\n          updateStringParameter(parameterName: string, value: string): void {\n            if (parameterName === 'color') {\n              this.light.color = new THREE.Color(\n                gdjs.PixiFiltersTools.rgbOrHexToHexNumber(value)\n              );\n            }\n          }\n          updateBooleanParameter(parameterName: string, value: boolean): void {}\n        })();\n      }\n    })()\n  );\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,EAAK,iBAAiB,sBACpB,wBACA,GAAK,MAAqD,CACxD,WACE,EACA,EAC8B,CAC9B,MAAO,IAAK,MAA8C,CAIxD,aAAc,CACZ,KAAK,MAAQ,GAAI,OAAM,aACvB,KAAK,WAAa,GAGpB,UAAU,EAAgC,CACxC,MAAO,MAAK,WAEd,WAAW,EAAuB,EAA2B,CAC3D,MAAI,MAAK,aAAe,EACf,GAEL,EACK,KAAK,YAAY,GAEjB,KAAK,aAAa,GAG7B,YAAY,EAAgC,CAC1C,KAAM,GAAQ,EAAO,sBAIrB,MAAK,GAGL,GAAM,IAAI,KAAK,OACf,KAAK,WAAa,GACX,IAJE,GAMX,aAAa,EAAgC,CAC3C,KAAM,GAAQ,EAAO,sBAIrB,MAAK,GAGL,GAAM,OAAO,KAAK,OAClB,KAAK,WAAa,GACX,IAJE,GAMX,gBAAgB,EAAiC,EACjD,sBAAsB,EAAuB,EAAqB,CAChE,AAAI,IAAkB,aACpB,MAAK,MAAM,UAAY,GAG3B,sBAAsB,EAAuB,EAAqB,CAChE,AAAI,IAAkB,SACpB,MAAK,MAAM,MAAQ,GAAI,OAAM,MAC3B,EAAK,iBAAiB,oBAAoB,KAIhD,uBAAuB,EAAuB,EAAsB,SAnEpE",
  "names": []
}
