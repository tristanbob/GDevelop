{
  "version": 3,
  "sources": ["../../../../../../../Extensions/3D/LinearFog.ts"],
  "sourcesContent": ["namespace gdjs {\n  gdjs.PixiFiltersTools.registerFilterCreator(\n    'Scene3D::LinearFog',\n    new (class implements gdjs.PixiFiltersTools.FilterCreator {\n      makeFilter(\n        target: EffectsTarget,\n        effectData: EffectData\n      ): gdjs.PixiFiltersTools.Filter {\n        return new (class implements gdjs.PixiFiltersTools.Filter {\n          fog: THREE.Fog;\n\n          constructor() {\n            this.fog = new THREE.Fog(0xffffff);\n          }\n\n          isEnabled(target: EffectsTarget): boolean {\n            const scene = target.get3DRendererObject() as\n              | THREE.Scene\n              | null\n              | undefined;\n            return scene ? scene.fog === this.fog : false;\n          }\n          setEnabled(target: EffectsTarget, enabled: boolean): boolean {\n            if (enabled) {\n              return this.applyEffect(target);\n            } else {\n              return this.removeEffect(target);\n            }\n          }\n          applyEffect(target: EffectsTarget): boolean {\n            const scene = target.get3DRendererObject() as\n              | THREE.Scene\n              | null\n              | undefined;\n            if (!scene || scene.fog === undefined) {\n              return false;\n            }\n            scene.fog = this.fog;\n            return true;\n          }\n          removeEffect(target: EffectsTarget): boolean {\n            const scene = target.get3DRendererObject() as\n              | THREE.Scene\n              | null\n              | undefined;\n            if (!scene || scene.fog === undefined) {\n              return false;\n            }\n            scene.fog = null;\n            return true;\n          }\n          updatePreRender(target: gdjs.EffectsTarget): any {}\n          updateDoubleParameter(parameterName: string, value: number): void {\n            if (parameterName === 'near') {\n              this.fog.near = value;\n            } else if (parameterName === 'far') {\n              this.fog.far = value;\n            }\n          }\n          updateStringParameter(parameterName: string, value: string): void {\n            if (parameterName === 'color') {\n              this.fog.color = new THREE.Color(\n                gdjs.PixiFiltersTools.rgbOrHexToHexNumber(value)\n              );\n            }\n          }\n          updateBooleanParameter(parameterName: string, value: boolean): void {}\n        })();\n      }\n    })()\n  );\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,EAAK,iBAAiB,sBACpB,qBACA,GAAK,MAAqD,CACxD,WACE,EACA,EAC8B,CAC9B,MAAO,IAAK,MAA8C,CAGxD,aAAc,CACZ,KAAK,IAAM,GAAI,OAAM,IAAI,UAG3B,UAAU,EAAgC,CACxC,KAAM,GAAQ,EAAO,sBAIrB,MAAO,GAAQ,EAAM,MAAQ,KAAK,IAAM,GAE1C,WAAW,EAAuB,EAA2B,CAC3D,MAAI,GACK,KAAK,YAAY,GAEjB,KAAK,aAAa,GAG7B,YAAY,EAAgC,CAC1C,KAAM,GAAQ,EAAO,sBAIrB,MAAI,CAAC,GAAS,EAAM,MAAQ,OACnB,GAET,GAAM,IAAM,KAAK,IACV,IAET,aAAa,EAAgC,CAC3C,KAAM,GAAQ,EAAO,sBAIrB,MAAI,CAAC,GAAS,EAAM,MAAQ,OACnB,GAET,GAAM,IAAM,KACL,IAET,gBAAgB,EAAiC,EACjD,sBAAsB,EAAuB,EAAqB,CAChE,AAAI,IAAkB,OACpB,KAAK,IAAI,KAAO,EACP,IAAkB,OAC3B,MAAK,IAAI,IAAM,GAGnB,sBAAsB,EAAuB,EAAqB,CAChE,AAAI,IAAkB,SACpB,MAAK,IAAI,MAAQ,GAAI,OAAM,MACzB,EAAK,iBAAiB,oBAAoB,KAIhD,uBAAuB,EAAuB,EAAsB,SAlEpE",
  "names": []
}
