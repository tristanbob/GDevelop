{
  "version": 3,
  "sources": ["../../../../../../../Extensions/Video/videoruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  /** The initial properties for {@link gdjs.VideoRuntimeObject} */\n  export type VideoObjectDataType = {\n    /** The base parameters of the video */\n    content: {\n      /** The opacity of the video */\n      opacity: number;\n      /** Does the video loops itself? */\n      loop: boolean;\n      /** The volume of the video */\n      volume: number;\n      /** Name of the resource corresponding to the video */\n      videoResource: string;\n    };\n  };\n\n  export type VideoObjectData = ObjectData & VideoObjectDataType;\n\n  /**\n   * An object displaying a video on screen.\n   *\n   * For the same video resource, only one video is being created in memory (\n   * as a HTMLVideoElement). This means that two objects displaying the same\n   * video will have the same state for this video (paused/playing, current time,\n   * volume, etc...).\n   */\n  export class VideoRuntimeObject extends gdjs.RuntimeObject {\n    _opacity: float;\n    _loop: boolean;\n    _volume: float;\n    _videoResource: string;\n\n    // Use a boolean to track if the video was paused because we\n    // navigated to another scene, and so should resume if we're back.\n    _pausedAsScenePaused: boolean = false;\n    _renderer: gdjs.VideoRuntimeObjectRenderer;\n    _playbackSpeed: any;\n\n    /**\n     * @param instanceContainer The scene the object belongs to.\n     * @param videoObjectData The data defining the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      videoObjectData: VideoObjectData\n    ) {\n      super(instanceContainer, videoObjectData);\n      this._opacity = videoObjectData.content.opacity;\n      this._loop = videoObjectData.content.loop;\n      this._volume = videoObjectData.content.volume;\n      this._videoResource = videoObjectData.content.videoResource;\n      this._renderer = new gdjs.VideoRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    updateFromObjectData(\n      oldObjectData: VideoObjectData,\n      newObjectData: VideoObjectData\n    ): boolean {\n      if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n        this.setOpacity(newObjectData.content.opacity);\n      }\n      if (oldObjectData.content.loop !== newObjectData.content.loop) {\n        this.setLoop(newObjectData.content.loop);\n      }\n      if (oldObjectData.content.volume !== newObjectData.content.volume) {\n        this.setVolume(newObjectData.content.volume);\n      }\n      if (\n        oldObjectData.content.videoResource !==\n        newObjectData.content.videoResource\n      ) {\n        return false;\n      }\n      return true;\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     * @param initialInstanceData The initial instance data\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      super.onDestroyFromScene(instanceContainer);\n      this._renderer.onDestroy();\n    }\n\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      this._renderer.ensureUpToDate();\n    }\n\n    /**\n     * Set object position on X axis.\n     * @param x The new position X of the object.\n     */\n    setX(x: float): void {\n      super.setX(x);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set object position on Y axis.\n     * @param y The new position Y of the object.\n     */\n    setY(y: float): void {\n      super.setY(y);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set the angle of the object.\n     * @param angle The new angle of the object.\n     */\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     * @param opacity The new opacity of the object (0-255).\n     */\n    setOpacity(opacity: float): void {\n      this._opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     * @returns The current opacity\n     */\n    getOpacity(): number {\n      return this._opacity;\n    }\n\n    /**\n     * Set the width of the video.\n     * @param width The new width in pixels.\n     */\n    setWidth(width: float): void {\n      if (this._renderer.getWidth() === width) return;\n\n      this._renderer.setWidth(width);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the height of the video.\n     * @param height The new height in pixels.\n     */\n    setHeight(height: float): void {\n      if (this._renderer.getHeight() === height) return;\n\n      this._renderer.setHeight(height);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the width of the video object.\n     * @returns The current width of the object\n     */\n    getWidth(): float {\n      return this._renderer.getWidth();\n    }\n\n    /**\n     * Get the height of the video object.\n     * @returns The current height of the object\n     */\n    getHeight(): float {\n      return this._renderer.getHeight();\n    }\n\n    /**\n     * Play the video.\n     */\n    play(): void {\n      this._renderer.play();\n    }\n\n    /**\n     * Pause the video.\n     */\n    pause(): void {\n      this._renderer.pause();\n    }\n\n    /**\n     * Set the state looped of the video.\n     * @param enable true to loop the video\n     */\n    setLoop(enable: boolean): void {\n      this._renderer.setLoop(enable);\n    }\n\n    /**\n     * Set the state muted of the video.\n     * @param enable The new state.\n     */\n    mute(enable: boolean) {\n      this._renderer.setMute(enable);\n    }\n\n    /**\n     * Return the state muted of video object.\n     * @returns Is the video muted?\n     */\n    isMuted(): boolean {\n      return this._renderer.isMuted();\n    }\n\n    /**\n     * Set the volume of the video object.\n     * @param volume The new volume, between 0 and 100.\n     */\n    setVolume(volume: number): void {\n      this._volume =\n        gdjs.evtTools.common.clamp(\n          gdjs.evtTools.common.normalize(volume, 0, 100),\n          0,\n          1\n        ) * 100;\n      this._renderer.updateVolume();\n    }\n\n    /**\n     * Get the volume of the video object.\n     * @returns The current video's volume, between 0 and 100.\n     */\n    getVolume(): number {\n      return (\n        gdjs.evtTools.common.normalize(this._renderer.getVolume(), 0, 1) * 100\n      );\n    }\n\n    /**\n     * Check if the video is being played.\n     * @returns Is the video being played?\n     */\n    isPlayed(): boolean {\n      return this._renderer.isPlayed();\n    }\n\n    /**\n     * Check if the video is paused.\n     * @returns Is the video being paused?\n     */\n    isPaused(): boolean {\n      return !this._renderer.isPlayed();\n    }\n\n    /**\n     * Check if the video is looping.\n     * @returns Is the video looping?\n     */\n    isLooped(): boolean {\n      return this._renderer.isLooped();\n    }\n\n    /**\n     * Return the total time of the video.\n     * @returns The duration of the video\n     */\n    getDuration(): number {\n      return this._renderer.getDuration();\n    }\n\n    /**\n     * Check if the video has ended.\n     * @returns Has the video ended?\n     */\n    isEnded(): boolean {\n      return this._renderer.isEnded();\n    }\n\n    /**\n     * Set the new time of the video object.\n     * @param time The new time.\n     */\n    setCurrentTime(time: float): void {\n      this._renderer.setCurrentTime(time);\n    }\n\n    /**\n     * Get the current time of the video object.\n     * @returns The current time of the video\n     */\n    getCurrentTime(): float {\n      return this._renderer.getCurrentTime();\n    }\n\n    /**\n     * Set the new playback speed of the video object.\n     * @param playbackSpeed The new playback speed.\n     */\n    setPlaybackSpeed(playbackSpeed: number): void {\n      this._playbackSpeed = gdjs.evtTools.common.clamp(playbackSpeed, 0.5, 2);\n      this._renderer.setPlaybackSpeed(this._playbackSpeed);\n    }\n\n    /**\n     * Get the playback speed of the video object.\n     * @returns The current playback speed of the video.\n     */\n    getPlaybackSpeed(): number {\n      return this._renderer.getPlaybackSpeed();\n    }\n  }\n  gdjs.registerObject('Video::VideoObject', gdjs.VideoRuntimeObject);\n\n  /**\n   * When a scene is unloaded, pause any video being run.\n   * TODO: Investigate how to dispose the video source?\n   */\n  gdjs.registerRuntimeSceneUnloadedCallback(function (runtimeScene) {\n    // Manually find all the gdjs.VideoRuntimeObject living on the scene,\n    // and pause them.\n    const instances = runtimeScene.getAdhocListOfAllInstances();\n    for (let i = 0; i < instances.length; ++i) {\n      const obj = instances[i];\n      if (obj instanceof gdjs.VideoRuntimeObject) {\n        if (obj.isPlayed()) {\n          obj.pause();\n        }\n      }\n    }\n  });\n\n  /**\n   * When a scene is paused, pause any video being run.\n   */\n  gdjs.registerRuntimeScenePausedCallback(function (runtimeScene) {\n    // Manually find all the gdjs.VideoRuntimeObject living on the scene,\n    // and pause them.\n    const instances = runtimeScene.getAdhocListOfAllInstances();\n    for (let i = 0; i < instances.length; ++i) {\n      const obj = instances[i];\n      if (obj instanceof gdjs.VideoRuntimeObject) {\n        if (obj.isPlayed()) {\n          obj.pause();\n          obj._pausedAsScenePaused = true;\n        }\n      }\n    }\n  });\n\n  // Flag it to be started again when scene is resumed.\n\n  /**\n   * When a scene is resumed, resume any video previously paused.\n   */\n  gdjs.registerRuntimeSceneResumedCallback(function (runtimeScene) {\n    // Manually find all the gdjs.VideoRuntimeObject living on the scene,\n    // and play them if they have been previously paused.\n    const instances = runtimeScene.getAdhocListOfAllInstances();\n    for (let i = 0; i < instances.length; ++i) {\n      const obj = instances[i];\n      if (obj instanceof gdjs.VideoRuntimeObject) {\n        if (obj._pausedAsScenePaused) {\n          obj.play();\n        }\n      }\n    }\n  });\n}\n"],
  "mappings": "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",
  "names": []
}
