{
  "version": 3,
  "sources": ["../../../../../../../Extensions/PlayerAuthentication/playerauthenticationtools.ts"],
  "sourcesContent": ["namespace gdjs {\n  declare var cordova: any;\n\n  const logger = new gdjs.Logger('Player Authentication');\n  const authComponents = gdjs.playerAuthenticationComponents;\n  // TODO EBO Replace runtimeScene to instanceContainer.\n  export namespace playerAuthentication {\n    // Authentication information.\n    let _username: string | null = null;\n    let _userId: string | null = null;\n    let _userToken: string | null = null;\n    let _justLoggedIn = false;\n\n    let _checkedLocalStorage: boolean = false;\n\n    // Authentication display\n    let _authenticationWindow: Window | null = null; // For Web.\n    let _authenticationInAppWindow: Window | null = null; // For Cordova.\n    let _authenticationRootContainer: HTMLDivElement | null = null;\n    let _authenticationLoaderContainer: HTMLDivElement | null = null;\n    let _authenticationIframeContainer: HTMLDivElement | null = null;\n    let _authenticationTextContainer: HTMLDivElement | null = null;\n    let _authenticationBanner: HTMLDivElement | null = null;\n    let _initialAuthenticationTimeoutId: NodeJS.Timeout | null = null;\n    let _authenticationTimeoutId: NodeJS.Timeout | null = null;\n\n    // Communication methods.\n    let _authenticationMessageCallback:\n      | ((event: MessageEvent) => void)\n      | null = null;\n    let _cordovaAuthenticationMessageCallback:\n      | ((event: MessageEvent) => void)\n      | null = null;\n    let _websocket: WebSocket | null = null;\n\n    // Ensure that the condition \"just logged in\" is valid only for one frame.\n    gdjs.registerRuntimeScenePostEventsCallback(() => {\n      _justLoggedIn = false;\n    });\n\n    // If the extension is used, register an eventlistener to know if the user is\n    // logged in while playing the game on GDevelop games platform.\n    // Then send a message to the parent iframe to say that the player auth is ready.\n    gdjs.registerFirstRuntimeSceneLoadedCallback(\n      (runtimeScene: RuntimeScene) => {\n        if (getPlatform(runtimeScene) !== 'web') {\n          // Automatic authentication is only valid when the game is hosted on GDevelop games platform.\n          return;\n        }\n        removeAuthenticationCallbacks(); // Remove any callback that could have been registered before.\n        _authenticationMessageCallback = (event: MessageEvent) => {\n          receiveAuthenticationMessage(runtimeScene, event, {\n            checkOrigin: true,\n          });\n        };\n        window.addEventListener(\n          'message',\n          _authenticationMessageCallback,\n          true\n        );\n        logger.info(\n          'Notifying parent window that player authentication is ready.'\n        );\n        window.parent.postMessage(\n          {\n            id: 'playerAuthReady',\n          },\n          '*' // We could restrict to GDevelop games platform but it's not necessary as the message is not sensitive, and it allows easy debugging.\n        );\n        // If no answer after 3 seconds, assume that the game is not embedded in GDevelop games platform, and remove the listener.\n        _initialAuthenticationTimeoutId = setTimeout(() => {\n          logger.info('Removing initial authentication listener.');\n          removeAuthenticationCallbacks();\n        }, 3000);\n      }\n    );\n\n    const getLocalStorageKey = (gameId: string) =>\n      `${gameId}_authenticatedUser`;\n\n    const getAuthWindowUrl = ({\n      runtimeGame,\n      gameId,\n      connectionId,\n    }: {\n      runtimeGame: gdjs.RuntimeGame;\n      gameId: string;\n      connectionId?: string;\n    }) => {\n      // Uncomment to test the case of a failing loading:\n      // return 'https://gd.games.wronglink';\n\n      return `https://gd.games/auth?gameId=${gameId}${\n        connectionId ? `&connectionId=${connectionId}` : ''\n      }${\n        runtimeGame.isUsingGDevelopDevelopmentEnvironment() ? '&dev=true' : ''\n      }`;\n    };\n\n    /**\n     * Helper returning the platform.\n     */\n    const getPlatform = (\n      runtimeScene: RuntimeScene\n    ): 'electron' | 'cordova' | 'web' => {\n      const runtimeGame = runtimeScene.getGame();\n      const electron = runtimeGame.getRenderer().getElectron();\n      if (electron) {\n        return 'electron';\n      }\n      if (typeof cordova !== 'undefined') return 'cordova';\n\n      return 'web';\n    };\n\n    /**\n     * Check if, in some exceptional cases, we allow authentication\n     * to be done through a iframe.\n     * This is usually discouraged as the user can't verify that the authentication\n     * window is a genuine one. It's only to be used in trusted contexts.\n     */\n    const shouldAuthenticationUseIframe = (runtimeScene: RuntimeScene) => {\n      const runtimeGameOptions = runtimeScene.getGame().getAdditionalOptions();\n      return (\n        runtimeGameOptions &&\n        runtimeGameOptions.isPreview &&\n        runtimeGameOptions.allowAuthenticationUsingIframeForPreview\n      );\n    };\n\n    /**\n     * Returns true if a user token is present in the local storage.\n     */\n    export const isAuthenticated = () => {\n      if (!_checkedLocalStorage) {\n        readAuthenticatedUserFromLocalStorage();\n      }\n      return _userToken !== null;\n    };\n\n    /**\n     * Returns true if the user just logged in.\n     * Useful to update username or trigger messages in the game.\n     */\n    export const hasLoggedIn = () => _justLoggedIn;\n\n    /**\n     * Returns the username from the local storage.\n     */\n    export const getUsername = () => {\n      if (!_checkedLocalStorage) {\n        readAuthenticatedUserFromLocalStorage();\n      }\n      return _username || '';\n    };\n\n    /**\n     * Returns the user token from the local storage.\n     */\n    export const getUserToken = () => {\n      if (!_checkedLocalStorage) {\n        readAuthenticatedUserFromLocalStorage();\n      }\n      return _userToken || null;\n    };\n\n    /**\n     * Returns the username from the local storage.\n     */\n    export const getUserId = () => {\n      if (!_checkedLocalStorage) {\n        readAuthenticatedUserFromLocalStorage();\n      }\n      return _userId || null;\n    };\n\n    /**\n     * Returns true if the game is registered, false otherwise.\n     * Useful to display a message to the user to register the game before logging in.\n     */\n    const checkIfGameIsRegistered = (\n      runtimeGame: gdjs.RuntimeGame,\n      gameId: string,\n      tries: number = 0\n    ): Promise<boolean> => {\n      const rootApi = runtimeGame.isUsingGDevelopDevelopmentEnvironment()\n        ? 'https://api-dev.gdevelop.io'\n        : 'https://api.gdevelop.io';\n      const url = `${rootApi}/game/public-game/${gameId}`;\n      return fetch(url, { method: 'HEAD' }).then(\n        (response) => {\n          if (response.status !== 200) {\n            logger.warn(\n              `Error while fetching the game: ${response.status} ${response.statusText}`\n            );\n\n            // If the response is not 404, it may be a timeout, so retry a few times.\n            if (response.status === 404 || tries > 2) {\n              return false;\n            }\n\n            return checkIfGameIsRegistered(runtimeGame, gameId, tries + 1);\n          }\n          return true;\n        },\n        (err) => {\n          logger.error('Error while fetching game:', err);\n          return false;\n        }\n      );\n    };\n\n    /**\n     * Remove the user information from the local storage.\n     */\n    export const logout = (runtimeScene: RuntimeScene) => {\n      _username = null;\n      _userToken = null;\n      _userId = null;\n\n      const gameId = gdjs.projectData.properties.projectUuid;\n      if (!gameId) {\n        logger.error('Missing game id in project properties.');\n        return;\n      }\n      window.localStorage.removeItem(getLocalStorageKey(gameId));\n      cleanUpAuthWindowAndCallbacks(runtimeScene);\n      removeAuthenticationBanner(runtimeScene);\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication banner cannot be displayed.\"\n        );\n        return;\n      }\n      authComponents.displayLoggedOutNotification(domElementContainer);\n    };\n\n    /**\n     * Retrieves the user information from the local storage, and store\n     * them in the extension variables.\n     */\n    const readAuthenticatedUserFromLocalStorage = () => {\n      const gameId = gdjs.projectData.properties.projectUuid;\n      if (!gameId) {\n        logger.error('Missing game id in project properties.');\n        return;\n      }\n      try {\n        const authenticatedUserStorageItem = window.localStorage.getItem(\n          getLocalStorageKey(gameId)\n        );\n        if (!authenticatedUserStorageItem) {\n          _checkedLocalStorage = true;\n          return;\n        }\n        const authenticatedUser = JSON.parse(authenticatedUserStorageItem);\n\n        _username = authenticatedUser.username;\n        _userId = authenticatedUser.userId;\n        _userToken = authenticatedUser.userToken;\n        _checkedLocalStorage = true;\n      } catch (err) {\n        logger.warn(\n          'Unable to read authentication details from localStorage. Player authentication will not be available.',\n          err\n        );\n      }\n    };\n\n    /**\n     * Helper to be called on login or error.\n     * Removes all the UI and callbacks.\n     */\n    const cleanUpAuthWindowAndCallbacks = (runtimeScene: RuntimeScene) => {\n      removeAuthenticationContainer(runtimeScene);\n      clearAuthenticationWindowTimeout();\n      if (_websocket) {\n        _websocket.close();\n        _websocket = null;\n      }\n      // If a new window was opened (web), close it.\n      if (_authenticationWindow) {\n        _authenticationWindow.close();\n        _authenticationWindow = null;\n      }\n      // If an in-app browser was used (cordova), close it.\n      if (_authenticationInAppWindow) {\n        _authenticationInAppWindow.close();\n        _authenticationInAppWindow = null;\n      }\n    };\n\n    const saveAuthKeyToStorage = ({\n      username,\n      userId,\n      userToken,\n    }: {\n      username: string | null;\n      userId: string;\n      userToken: string;\n    }) => {\n      if (!username) {\n        logger.warn('The authenticated player does not have a username');\n      }\n      _username = username;\n      _userId = userId;\n      _userToken = userToken;\n      _justLoggedIn = true;\n\n      const gameId = gdjs.projectData.properties.projectUuid;\n      if (!gameId) {\n        logger.error('Missing game id in project properties.');\n        return;\n      }\n      try {\n        window.localStorage.setItem(\n          getLocalStorageKey(gameId),\n          JSON.stringify({\n            username: _username,\n            userId: _userId,\n            userToken: _userToken,\n          })\n        );\n      } catch (err) {\n        logger.warn(\n          'Unable to save the authentication details to localStorage. Player authentication will not be available.',\n          err\n        );\n      }\n    };\n\n    /**\n     * When the game receives the authentication result, close all the\n     * authentication windows, display the notification and focus on the game.\n     */\n    const handleLoggedInEvent = function (\n      runtimeScene: gdjs.RuntimeScene,\n      userId: string,\n      username: string | null,\n      userToken: string\n    ) {\n      saveAuthKeyToStorage({ userId, username, userToken });\n      cleanUpAuthWindowAndCallbacks(runtimeScene);\n      removeAuthenticationBanner(runtimeScene);\n\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication banner cannot be displayed.\"\n        );\n        return;\n      }\n      authComponents.displayLoggedInNotification(\n        domElementContainer,\n        _username || 'Anonymous'\n      );\n      focusOnGame(runtimeScene);\n    };\n\n    /**\n     * Reads the event sent by the authentication window and\n     * display the appropriate banner.\n     */\n    const receiveAuthenticationMessage = function (\n      runtimeScene: gdjs.RuntimeScene,\n      event: MessageEvent,\n      { checkOrigin }: { checkOrigin: boolean }\n    ) {\n      const allowedOrigins = ['https://liluo.io', 'https://gd.games'];\n\n      // Check origin of message.\n      if (checkOrigin && !allowedOrigins.includes(event.origin)) {\n        throw new Error(`Unexpected origin: ${event.origin}`);\n      }\n      // Check that message is not malformed.\n      if (!event.data.id) {\n        throw new Error('Malformed message');\n      }\n\n      // Handle message.\n      switch (event.data.id) {\n        case 'authenticationResult': {\n          if (!(event.data.body && event.data.body.token)) {\n            throw new Error('Malformed message.');\n          }\n\n          handleLoggedInEvent(\n            runtimeScene,\n            event.data.body.userId,\n            event.data.body.username,\n            event.data.body.token\n          );\n          break;\n        }\n        case 'alreadyAuthenticated': {\n          if (!(event.data.body && event.data.body.token)) {\n            throw new Error('Malformed message.');\n          }\n\n          saveAuthKeyToStorage({\n            userId: event.data.body.userId,\n            username: event.data.body.username,\n            userToken: event.data.body.token,\n          });\n          removeAuthenticationCallbacks();\n          refreshAuthenticationBannerIfAny(runtimeScene);\n          break;\n        }\n      }\n    };\n\n    /**\n     * Handle any error that can occur as part of the authentication process.\n     */\n    const handleAuthenticationError = function (\n      runtimeScene: gdjs.RuntimeScene,\n      message: string\n    ) {\n      logger.error(message);\n      cleanUpAuthWindowAndCallbacks(runtimeScene);\n\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication banner cannot be displayed.\"\n        );\n        return;\n      }\n      authComponents.displayErrorNotification(domElementContainer);\n      focusOnGame(runtimeScene);\n    };\n\n    /**\n     * If after 5min, no message has been received from the authentication window,\n     * show a notification and remove the authentication container.\n     */\n    const startAuthenticationWindowTimeout = (\n      runtimeScene: gdjs.RuntimeScene\n    ) => {\n      clearAuthenticationWindowTimeout();\n      const time = 12 * 60 * 1000; // 12 minutes, in case the user needs time to authenticate.\n      _authenticationTimeoutId = setTimeout(() => {\n        logger.info(\n          'Authentication window did not send message in time. Closing it.'\n        );\n        cleanUpAuthWindowAndCallbacks(runtimeScene);\n        focusOnGame(runtimeScene);\n      }, time);\n    };\n\n    /**\n     * Clear all existing authentication timeouts.\n     * Useful when:\n     * - a new authentication starts\n     * - the authentication succeeded\n     * - the authentication window is closed\n     */\n    const clearAuthenticationWindowTimeout = () => {\n      if (_initialAuthenticationTimeoutId)\n        clearTimeout(_initialAuthenticationTimeoutId);\n      if (_authenticationTimeoutId) clearTimeout(_authenticationTimeoutId);\n    };\n\n    /**\n     * Helper to create the authentication banner based on the authentication status.\n     */\n    const createAuthenticationBanner = function (\n      runtimeScene: gdjs.RuntimeScene\n    ): HTMLDivElement {\n      const onDismissBanner = () => {\n        removeAuthenticationBanner(runtimeScene);\n      };\n      const onOpenAuthenticationWindow = () => {\n        openAuthenticationWindow(runtimeScene);\n      };\n      return _userToken\n        ? authComponents.computeAuthenticatedBanner(\n            onOpenAuthenticationWindow,\n            onDismissBanner,\n            _username\n          )\n        : authComponents.computeNotAuthenticatedBanner(\n            onOpenAuthenticationWindow,\n            onDismissBanner\n          );\n    };\n\n    /**\n     * Action to display the banner to the user, depending on their authentication status.\n     */\n    export const displayAuthenticationBanner = function (\n      runtimeScene: gdjs.RuntimeScene\n    ) {\n      if (_authenticationBanner) {\n        // Banner already displayed, ensure it's visible.\n        _authenticationBanner.style.opacity = '1';\n        return;\n      }\n      if (!_checkedLocalStorage) {\n        readAuthenticatedUserFromLocalStorage();\n      }\n\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication banner cannot be displayed.\"\n        );\n        return;\n      }\n\n      _authenticationBanner = createAuthenticationBanner(runtimeScene);\n      domElementContainer.appendChild(_authenticationBanner);\n    };\n\n    /**\n     * Helper to recompute the authentication banner.\n     * This is useful if the user is already logged on GDevelop games platform\n     * and we want to display the banner with the username.\n     */\n    const refreshAuthenticationBannerIfAny = function (\n      runtimeScene: gdjs.RuntimeScene\n    ) {\n      if (!_authenticationBanner) return;\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication banner cannot be displayed.\"\n        );\n        return;\n      }\n      const oldAuthenticationBanner = _authenticationBanner;\n      _authenticationBanner = createAuthenticationBanner(runtimeScene);\n      domElementContainer.replaceChild(\n        _authenticationBanner,\n        oldAuthenticationBanner\n      );\n    };\n\n    /**\n     * Helper to handle authentication window on Electron.\n     * We open a new window, and create a websocket to know when the user is logged in.\n     */\n    const openAuthenticationWindowForElectron = (\n      runtimeScene: gdjs.RuntimeScene,\n      gameId: string\n    ) => {\n      const wsPlayApi = runtimeScene\n        .getGame()\n        .isUsingGDevelopDevelopmentEnvironment()\n        ? 'wss://api-ws-dev.gdevelop.io/play'\n        : 'wss://api-ws.gdevelop.io/play';\n      _websocket = new WebSocket(wsPlayApi);\n      _websocket.onopen = () => {\n        // When socket is open, ask for the connectionId, so that we can open the authentication window.\n        if (_websocket) {\n          _websocket.send(JSON.stringify({ action: 'getConnectionId' }));\n        }\n      };\n      _websocket.onerror = () => {\n        handleAuthenticationError(\n          runtimeScene,\n          'Error while connecting to the authentication server.'\n        );\n      };\n      _websocket.onmessage = (event) => {\n        if (event.data) {\n          const messageContent = JSON.parse(event.data);\n          switch (messageContent.type) {\n            case 'authenticationResult': {\n              const messageData = messageContent.data;\n              handleLoggedInEvent(\n                runtimeScene,\n                messageData.userId,\n                messageData.username,\n                messageData.token\n              );\n              break;\n            }\n            case 'connectionId': {\n              const messagegeData = messageContent.data;\n              const connectionId = messagegeData.connectionId;\n              if (!connectionId) {\n                logger.error('No connectionId received');\n                return;\n              }\n\n              const targetUrl = getAuthWindowUrl({\n                runtimeGame: runtimeScene.getGame(),\n                gameId,\n                connectionId,\n              });\n\n              const electron = runtimeScene\n                .getGame()\n                .getRenderer()\n                .getElectron();\n              const openWindow = () => electron.shell.openExternal(targetUrl);\n\n              openWindow();\n\n              // Add the link to the window in case a popup blocker is preventing the window from opening.\n              if (_authenticationTextContainer) {\n                authComponents.addAuthenticationUrlToTextsContainer(\n                  openWindow,\n                  _authenticationTextContainer\n                );\n              }\n\n              break;\n            }\n          }\n        }\n      };\n    };\n\n    /**\n     * Helper to handle authentication window on Cordova.\n     * We open an InAppBrowser window, and listen to messages posted on this window.\n     */\n    const openAuthenticationWindowForCordova = (\n      runtimeScene: gdjs.RuntimeScene,\n      gameId: string\n    ) => {\n      const targetUrl = getAuthWindowUrl({\n        runtimeGame: runtimeScene.getGame(),\n        gameId,\n      });\n\n      _authenticationInAppWindow = cordova.InAppBrowser.open(\n        targetUrl,\n        'authentication',\n        'location=yes' // location=yes is important to show the URL bar to the user.\n      );\n      // Listen to messages posted on the authentication window, so that we can\n      // know when the user is authenticated.\n      if (_authenticationInAppWindow) {\n        _cordovaAuthenticationMessageCallback = (event: MessageEvent) => {\n          receiveAuthenticationMessage(runtimeScene, event, {\n            checkOrigin: false, // For Cordova we don't check the origin, as the message is read from the InAppBrowser directly.\n          });\n        };\n        _authenticationInAppWindow.addEventListener(\n          'message',\n          _cordovaAuthenticationMessageCallback,\n          true\n        );\n      }\n    };\n\n    /**\n     * Helper to handle authentication window on web.\n     * We open a new window, and listen to messages posted back to the game window.\n     */\n    const openAuthenticationWindowForWeb = (\n      runtimeScene: gdjs.RuntimeScene,\n      gameId: string\n    ) => {\n      // If we're on a browser, open a new window.\n      const targetUrl = getAuthWindowUrl({\n        runtimeGame: runtimeScene.getGame(),\n        gameId,\n      });\n\n      // Listen to messages posted by the authentication window, so that we can\n      // know when the user is authenticated.\n      _authenticationMessageCallback = (event: MessageEvent) => {\n        receiveAuthenticationMessage(runtimeScene, event, {\n          checkOrigin: true,\n        });\n      };\n      window.addEventListener('message', _authenticationMessageCallback, true);\n\n      const left = screen.width / 2 - 500 / 2;\n      const top = screen.height / 2 - 600 / 2;\n      const windowFeatures = `left=${left},top=${top},width=500,height=600`;\n      const openWindow = () =>\n        window.open(targetUrl, 'authentication', windowFeatures);\n      _authenticationWindow = openWindow();\n\n      // Add the link to the window in case a popup blocker is preventing the window from opening.\n      if (_authenticationTextContainer) {\n        authComponents.addAuthenticationUrlToTextsContainer(\n          openWindow,\n          _authenticationTextContainer\n        );\n      }\n    };\n\n    /**\n     * Helper to handle authentication iframe on web.\n     * We open an iframe, and listen to messages posted back to the game window.\n     */\n    const openAuthenticationIframeForWeb = (\n      runtimeScene: gdjs.RuntimeScene,\n      gameId: string\n    ) => {\n      if (\n        !_authenticationIframeContainer ||\n        !_authenticationLoaderContainer ||\n        !_authenticationTextContainer\n      ) {\n        console.error(\n          \"Can't open an authentication iframe - no iframe container, loader container or text container was opened for it.\"\n        );\n        return;\n      }\n\n      const targetUrl = getAuthWindowUrl({\n        runtimeGame: runtimeScene.getGame(),\n        gameId,\n      });\n\n      // Listen to messages posted by the authentication window, so that we can\n      // know when the user is authenticated.\n      _authenticationMessageCallback = (event: MessageEvent) => {\n        receiveAuthenticationMessage(runtimeScene, event, {\n          checkOrigin: true,\n        });\n      };\n      window.addEventListener('message', _authenticationMessageCallback, true);\n\n      authComponents.displayIframeInsideAuthenticationContainer(\n        _authenticationIframeContainer,\n        _authenticationLoaderContainer,\n        _authenticationTextContainer,\n        targetUrl\n      );\n    };\n\n    /**\n     * Action to display the authentication window to the user.\n     */\n    export const openAuthenticationWindow = function (\n      runtimeScene: gdjs.RuntimeScene\n    ) {\n      // Create the authentication container for the player to wait.\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        handleAuthenticationError(\n          runtimeScene,\n          \"The div element covering the game couldn't be found, the authentication window cannot be displayed.\"\n        );\n        return;\n      }\n\n      const onAuthenticationContainerDismissed = () => {\n        cleanUpAuthWindowAndCallbacks(runtimeScene);\n        displayAuthenticationBanner(runtimeScene);\n      };\n\n      const _gameId = gdjs.projectData.properties.projectUuid;\n      if (!_gameId) {\n        handleAuthenticationError(\n          runtimeScene,\n          'The game ID is missing, the authentication window cannot be opened.'\n        );\n        return;\n      }\n\n      // If the banner is displayed, hide it, so that it can be shown again if the user closes the window.\n      if (_authenticationBanner) _authenticationBanner.style.opacity = '0';\n\n      const platform = getPlatform(runtimeScene);\n      const {\n        rootContainer,\n        loaderContainer,\n        iframeContainer,\n      } = authComponents.computeAuthenticationContainer(\n        onAuthenticationContainerDismissed\n      );\n      _authenticationRootContainer = rootContainer;\n      _authenticationLoaderContainer = loaderContainer;\n      _authenticationIframeContainer = iframeContainer;\n\n      // Display the authentication window right away, to show a loader\n      // while the call for game registration is happening.\n      domElementContainer.appendChild(_authenticationRootContainer);\n\n      // If the game is registered, open the authentication window.\n      // Otherwise, open the window indicating that the game is not registered.\n      checkIfGameIsRegistered(runtimeScene.getGame(), _gameId)\n        .then((isGameRegistered) => {\n          if (_authenticationLoaderContainer) {\n            const electron = runtimeScene.getGame().getRenderer().getElectron();\n            const wikiOpenAction = electron\n              ? () =>\n                  electron.shell.openExternal(\n                    'https://wiki.gdevelop.io/gdevelop5/publishing/web'\n                  )\n              : null; // Only show a link if we're on electron.\n\n            _authenticationTextContainer = authComponents.addAuthenticationTextsToLoadingContainer(\n              _authenticationLoaderContainer,\n              platform,\n              isGameRegistered,\n              wikiOpenAction\n            );\n          }\n          if (isGameRegistered) {\n            startAuthenticationWindowTimeout(runtimeScene);\n\n            // Based on which platform the game is running, we open the authentication window\n            // with a different window, with or without a websocket.\n            switch (platform) {\n              case 'electron':\n                openAuthenticationWindowForElectron(runtimeScene, _gameId);\n                break;\n              case 'cordova':\n                openAuthenticationWindowForCordova(runtimeScene, _gameId);\n                break;\n              case 'web':\n              default:\n                if (shouldAuthenticationUseIframe(runtimeScene)) {\n                  openAuthenticationIframeForWeb(runtimeScene, _gameId);\n                } else {\n                  openAuthenticationWindowForWeb(runtimeScene, _gameId);\n                }\n                break;\n            }\n          }\n        })\n        .catch((error) => {\n          handleAuthenticationError(\n            runtimeScene,\n            'Error while checking if the game is registered.'\n          );\n          logger.error(error);\n        });\n    };\n\n    /**\n     * Condition to check if the window is open, so that the game can be paused in the background.\n     */\n    export const isAuthenticationWindowOpen = function (): boolean {\n      return !!_authenticationRootContainer;\n    };\n\n    /**\n     * Remove the container displaying the authentication window and the callback.\n     */\n    export const removeAuthenticationContainer = function (\n      runtimeScene: gdjs.RuntimeScene\n    ) {\n      removeAuthenticationCallbacks();\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        logger.info(\n          \"The div element covering the game couldn't be found, the authentication must be already closed.\"\n        );\n        return;\n      }\n\n      // Remove the authentication root container.\n      if (_authenticationRootContainer) {\n        domElementContainer.removeChild(_authenticationRootContainer);\n      }\n\n      _authenticationRootContainer = null;\n      _authenticationLoaderContainer = null;\n      _authenticationIframeContainer = null;\n      _authenticationTextContainer = null;\n    };\n\n    /*\n     * Remove the authentication callbacks from web or cordova.\n     */\n    const removeAuthenticationCallbacks = function () {\n      // Remove the authentication callbacks.\n      if (_authenticationMessageCallback) {\n        window.removeEventListener(\n          'message',\n          _authenticationMessageCallback,\n          true\n        );\n        _authenticationMessageCallback = null;\n        // No need to detach the callback from the InAppBrowser, as it's destroyed when the window is closed.\n        _cordovaAuthenticationMessageCallback = null;\n      }\n    };\n\n    /**\n     * Remove the banner displaying the authentication status.\n     */\n    export const removeAuthenticationBanner = function (\n      runtimeScene: gdjs.RuntimeScene\n    ) {\n      if (!_authenticationBanner) {\n        logger.info(\n          \"The authentication banner couldn't be found, the authentication banner must be already closed.\"\n        );\n        return;\n      }\n      const domElementContainer = runtimeScene\n        .getGame()\n        .getRenderer()\n        .getDomElementContainer();\n      if (!domElementContainer) {\n        logger.info(\n          \"The div element covering the game couldn't be found, the authentication must be already closed.\"\n        );\n        return;\n      }\n\n      domElementContainer.removeChild(_authenticationBanner);\n      _authenticationBanner = null;\n    };\n\n    /**\n     * Focus on game canvas to allow user to interact with it.\n     */\n    const focusOnGame = function (runtimeScene: gdjs.RuntimeScene) {\n      const gameCanvas = runtimeScene.getGame().getRenderer().getCanvas();\n      if (gameCanvas) gameCanvas.focus();\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
