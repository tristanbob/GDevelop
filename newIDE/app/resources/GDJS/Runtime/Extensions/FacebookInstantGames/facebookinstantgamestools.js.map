{
  "version": 3,
  "sources": ["../../../../../../../Extensions/FacebookInstantGames/facebookinstantgamestools.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Facebook instant games');\n  export namespace evtTools {\n    export namespace facebookInstantGames {\n      export let _preloadedInterstitial: any = null;\n      export let _preloadedInterstitialLoading = false;\n      export let _preloadedInterstitialLoaded = false;\n      export let _preloadedRewardedVideo: any = null;\n      export let _preloadedRewardedVideoLoading = false;\n      export let _preloadedRewardedVideoLoaded = false;\n\n      export const areAdsSupported = function () {\n        if (typeof FBInstant === 'undefined') {\n          return false;\n        }\n        const supportedAPIs = FBInstant.getSupportedAPIs();\n        return (\n          supportedAPIs.indexOf('getInterstitialAdAsync') !== -1 &&\n          supportedAPIs.indexOf('getRewardedVideoAsync') !== -1\n        );\n      };\n\n      export const getPlayerId = function () {\n        if (typeof FBInstant === 'undefined') {\n          return '';\n        }\n        return FBInstant.player.getID() || '';\n      };\n\n      export const getPlayerName = function () {\n        if (typeof FBInstant === 'undefined') {\n          return '';\n        }\n        return FBInstant.player.getName() || '';\n      };\n\n      export const loadPlayerData = function (\n        key,\n        successVariable,\n        errorVariable\n      ) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        errorVariable.setString('');\n        successVariable.setString('');\n        FBInstant.player\n          .getDataAsync([key])\n          .then(function (data) {\n            successVariable.fromJSON(data[key]);\n          })\n          .catch(function (error) {\n            errorVariable.setString(error.message || 'Unknown error');\n          });\n      };\n\n      export const setPlayerData = function (\n        key,\n        variable,\n        successVariable,\n        errorVariable\n      ) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        errorVariable.setString('');\n        successVariable.setString('');\n        const data = {};\n        data[key] = JSON.stringify(variable.toJSObject());\n        FBInstant.player\n          .setDataAsync(data)\n          .then(function () {\n            successVariable.setString('Player data saved');\n          })\n          .catch(function (error) {\n            errorVariable.setString(error.message || 'Unknown error');\n          });\n      };\n\n      export const setPlayerScore = function (\n        leaderboardName,\n        score,\n        extraDataVariable,\n        successVariable,\n        errorVariable\n      ) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        errorVariable.setString('');\n        successVariable.setString('');\n        const data = JSON.stringify(extraDataVariable.toJSObject());\n        FBInstant.getLeaderboardAsync(leaderboardName)\n          .then(function (leaderboard) {\n            return leaderboard.setScoreAsync(score, data);\n          })\n          .then(function () {\n            successVariable.setString('Player score saved');\n          })\n          .catch(function (error) {\n            errorVariable.setString(error.message || 'Unknown error');\n          });\n      };\n\n      export const getPlayerEntry = function (\n        leaderboardName,\n        rankVariable,\n        scoreVariable,\n        extraDataVariable,\n        errorVariable\n      ) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        errorVariable.setString('');\n        extraDataVariable.setString('');\n        FBInstant.getLeaderboardAsync(leaderboardName)\n          .then(function (leaderboard) {\n            return leaderboard.getPlayerEntryAsync();\n          })\n          .then(function (entry) {\n            rankVariable.setNumber(\n              entry.getRank() === null ? -1 : entry.getRank()\n            );\n            scoreVariable.setNumber(\n              entry.getScore() === null ? -1 : entry.getScore()\n            );\n            extraDataVariable.fromJSON(entry.getExtraData());\n          })\n          .catch(function (error) {\n            errorVariable.setString(error.message || 'Unknown error');\n          });\n      };\n\n      export const loadInterstitialAd = function (\n        adPlacementId,\n        errorVariable\n      ) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        if (\n          gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoading ||\n          gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded\n        ) {\n          return;\n        }\n        gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoading = true;\n        FBInstant.getInterstitialAdAsync(adPlacementId)\n          .then(function (interstitial) {\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitial = interstitial;\n            return interstitial.loadAsync();\n          })\n          .then(function () {\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoading = false;\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded = true;\n            logger.info('Facebook Instant Games interstitial preloaded.');\n          })\n          .catch(function (err) {\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoading = false;\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded = false;\n            logger.error('Interstitial failed to preload: ' + err.message);\n            errorVariable.setString(err.message || 'Unknown error');\n          });\n      };\n\n      export const showInterstitialAd = function (errorVariable) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        if (!gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded) {\n          return;\n        }\n        gdjs.evtTools.facebookInstantGames._preloadedInterstitial\n          .showAsync()\n          .then(function () {\n            logger.info('Facebook Instant Games interstitial shown.');\n          })\n          .catch(function (err) {\n            logger.error('Interstitial failed to show: ' + err.message);\n            errorVariable.setString(err.message || 'Unknown error');\n          })\n          .then(function () {\n            gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded = false;\n          });\n      };\n\n      export const isInterstitialAdReady = function () {\n        return gdjs.evtTools.facebookInstantGames._preloadedInterstitialLoaded;\n      };\n\n      export const loadRewardedVideo = function (adPlacementId, errorVariable) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        if (\n          gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoading ||\n          gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded\n        ) {\n          return;\n        }\n        gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoading = true;\n        FBInstant.getRewardedVideoAsync(adPlacementId)\n          .then(function (rewardedVideo) {\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideo = rewardedVideo;\n            return rewardedVideo.loadAsync();\n          })\n          .then(function () {\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoading = false;\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded = true;\n            logger.info('Facebook Instant Games rewarded video preloaded.');\n          })\n          .catch(function (err) {\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoading = false;\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded = false;\n            logger.error('Rewarded video failed to preload: ' + err.message);\n            errorVariable.setString(err.message || 'Unknown error');\n          });\n      };\n\n      export const showRewardedVideo = function (errorVariable) {\n        if (typeof FBInstant === 'undefined') {\n          return;\n        }\n        if (!gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded) {\n          return;\n        }\n        gdjs.evtTools.facebookInstantGames._preloadedRewardedVideo\n          .showAsync()\n          .then(function () {\n            logger.info('Facebook Instant Games rewarded video shown.');\n          })\n          .catch(function (err) {\n            logger.error('Rewarded video failed to show: ' + err.message);\n            errorVariable.setString(err.message || 'Unknown error');\n          })\n          .then(function () {\n            gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded = false;\n          });\n      };\n\n      export const isRewardedVideoReady = function () {\n        return gdjs.evtTools.facebookInstantGames._preloadedRewardedVideoLoaded;\n      };\n      if (typeof FBInstant === 'undefined' && typeof window !== 'undefined') {\n        logger.log('Creating a mocked version of Facebook Instant Games.');\n\n        /**\n         * A mocked Leaderboard, part of the mock of FBInstant.\n         * @ignore\n         */\n        class MockedLeaderboard {\n          _playerScore: any = null;\n          _playerRank: any = null;\n          _playerExtraData: any = null;\n\n          setScoreAsync(score, extraData): Promise<void> {\n            const that = this;\n            return new Promise(function (resolve) {\n              that._playerScore = score;\n              that._playerRank = 1;\n              that._playerExtraData = extraData;\n              resolve();\n            });\n          }\n\n          getPlayerEntryAsync() {\n            const that = this;\n            return new Promise(function (resolve) {\n              resolve({\n                getScore: function () {\n                  return that._playerScore;\n                },\n                getRank: function () {\n                  return that._playerRank;\n                },\n                getExtraData: function () {\n                  return that._playerExtraData;\n                },\n              });\n            });\n          }\n        }\n\n        /**\n         * A mocked RewardedVideo, part of the mock of FBInstant.\n         * @ignore\n         */\n        class MockedRewardedVideo {\n          _isLoaded: boolean = false;\n\n          loadAsync() {\n            this._isLoaded = true;\n            return Promise.resolve();\n          }\n\n          showAsync(): Promise<void> {\n            if (this._isLoaded) {\n              logger.info(\n                'In a real Instant Game, a video reward should have been shown to the user.'\n              );\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error('Rewarded video is not loaded.'));\n          }\n        }\n\n        /**\n         * A mocked MockedInterstitial, part of the mock of FBInstant.\n         * @ignore\n         */\n        class MockedInterstitial {\n          _isLoaded: boolean = false;\n\n          loadAsync() {\n            this._isLoaded = true;\n            return Promise.resolve();\n          }\n\n          showAsync(): Promise<void> {\n            if (this._isLoaded) {\n              logger.info(\n                'In a real Instant Game, an interstitial should have been shown to the user.'\n              );\n              return Promise.resolve();\n            }\n            return Promise.reject(new Error('Interstitial is not loaded.'));\n          }\n        }\n        const supportedAPIs: Array<string> = [];\n        const FBInstantMock = {\n          _mockedPlayerData: {},\n          _mockedLeaderboards: {},\n          player: {\n            getName: function () {\n              return 'Fake player name';\n            },\n            getID: function () {\n              return '12345678';\n            },\n            getDataAsync: function (key) {\n              return new Promise(function (resolve) {\n                resolve(FBInstantMock._mockedPlayerData);\n              });\n            },\n            setDataAsync: function (data) {\n              return new Promise<void>(function (resolve) {\n                FBInstantMock._mockedPlayerData = data;\n                resolve();\n              });\n            },\n          },\n          getLeaderboardAsync: function (leaderboardName) {\n            return new Promise(function (resolve) {\n              FBInstantMock._mockedLeaderboards[leaderboardName] =\n                FBInstantMock._mockedLeaderboards[leaderboardName] ||\n                new MockedLeaderboard();\n              resolve(FBInstantMock._mockedLeaderboards[leaderboardName]);\n            });\n          },\n          getInterstitialAdAsync: function () {\n            return Promise.resolve(new MockedInterstitial());\n          },\n          getRewardedVideoAsync: function () {\n            return Promise.resolve(new MockedRewardedVideo());\n          },\n          getSupportedAPIs: function () {\n            return supportedAPIs;\n          },\n        };\n\n        // Retrieve the name of the supported APIs in our mock.\n        for (const property in FBInstantMock) {\n          if (typeof FBInstantMock[property] == 'object') {\n            for (const subProperty in FBInstantMock[property]) {\n              if (typeof FBInstantMock[property][subProperty] == 'function') {\n                supportedAPIs.push(property + '.' + subProperty);\n              }\n            }\n          } else {\n            if (typeof FBInstantMock[property] == 'function') {\n              supportedAPIs.push(property);\n            }\n          }\n        }\n        // @ts-expect-error\n        window.FBInstant = FBInstantMock;\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
