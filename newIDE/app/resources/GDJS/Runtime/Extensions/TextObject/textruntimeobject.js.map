{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TextObject/textruntimeobject.ts"],
  "sourcesContent": ["/*\n *  GDevelop JS Platform\n *  2013-2016 Florian Rival (Florian.Rival@gmail.com)\n */\nnamespace gdjs {\n  /** Base parameters for gdjs.TextRuntimeObject */\n  export type TextObjectDataType = {\n    /** The size of the characters */\n    characterSize: number;\n    /** The font name */\n    font: string;\n    /** Is Bold? */\n    bold: boolean;\n    /** Is Italic? */\n    italic: boolean;\n    /** Is Underlined? */\n    underlined: boolean;\n    /** The text color in an RGB representation */\n    color: {\n      /** The Red level from 0 to 255 */\n      r: number;\n      /** The Green level from 0 to 255 */\n      g: number;\n      /** The Blue level from 0 to 255 */\n      b: number;\n    };\n    /** The text of the object */\n    string: string;\n    textAlignment: string;\n  };\n\n  export type TextObjectData = ObjectData & TextObjectDataType;\n\n  /**\n   * Displays a text.\n   */\n  export class TextRuntimeObject extends gdjs.RuntimeObject {\n    _characterSize: number;\n    _fontName: string;\n    _bold: boolean;\n    _italic: boolean;\n    _underlined: boolean;\n    _color: integer[];\n    _useGradient: boolean = false;\n    _gradient: Array<Array<integer>> = [];\n    _gradientType: string = '';\n    opacity: float = 255;\n    _textAlign: string = 'left';\n    _wrapping: boolean = false;\n    _wrappingWidth: float = 1;\n    _outlineThickness: number = 0;\n    _outlineColor: integer[] = [255, 255, 255];\n    _shadow: boolean = false;\n    _shadowColor: integer[] = [0, 0, 0];\n    _shadowDistance: number = 1;\n    _shadowBlur: integer = 1;\n    _shadowAngle: float = 0;\n    _padding: integer = 5;\n    _str: string;\n    _renderer: gdjs.TextRuntimeObjectRenderer;\n\n    // We can store the scale as nothing else can change it.\n    _scaleX: number = 1;\n    _scaleY: number = 1;\n\n    /**\n     * @param instanceContainer The container the object belongs to.\n     * @param textObjectData The initial properties of the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      textObjectData: TextObjectData\n    ) {\n      super(instanceContainer, textObjectData);\n      this._characterSize = Math.max(1, textObjectData.characterSize);\n      this._fontName = textObjectData.font;\n      this._bold = textObjectData.bold;\n      this._italic = textObjectData.italic;\n      this._underlined = textObjectData.underlined;\n      this._color = [\n        textObjectData.color.r,\n        textObjectData.color.g,\n        textObjectData.color.b,\n      ];\n      this._str = textObjectData.string;\n      this._textAlign = textObjectData.textAlignment;\n      this._renderer = new gdjs.TextRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    updateFromObjectData(\n      oldObjectData: TextObjectData,\n      newObjectData: TextObjectData\n    ): boolean {\n      if (oldObjectData.characterSize !== newObjectData.characterSize) {\n        this.setCharacterSize(newObjectData.characterSize);\n      }\n      if (oldObjectData.font !== newObjectData.font) {\n        this.setFontName(newObjectData.font);\n      }\n      if (oldObjectData.bold !== newObjectData.bold) {\n        this.setBold(newObjectData.bold);\n      }\n      if (oldObjectData.italic !== newObjectData.italic) {\n        this.setItalic(newObjectData.italic);\n      }\n      if (\n        oldObjectData.color.r !== newObjectData.color.r ||\n        oldObjectData.color.g !== newObjectData.color.g ||\n        oldObjectData.color.b !== newObjectData.color.b\n      ) {\n        this.setColor(\n          '' +\n            newObjectData.color.r +\n            ';' +\n            newObjectData.color.g +\n            ';' +\n            newObjectData.color.b\n        );\n      }\n      if (oldObjectData.string !== newObjectData.string) {\n        this.setString(newObjectData.string);\n      }\n      if (oldObjectData.underlined !== newObjectData.underlined) {\n        return false;\n      }\n      if (oldObjectData.textAlignment !== newObjectData.textAlignment) {\n        this.setTextAlignment(newObjectData.textAlignment);\n      }\n      return true;\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      this._renderer.ensureUpToDate();\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWrapping(true);\n        this.setWrappingWidth(initialInstanceData.width);\n      } else {\n        this.setWrapping(false);\n      }\n    }\n\n    /**\n     * Update the rendered object position.\n     */\n    private _updateTextPosition() {\n      this.invalidateHitboxes();\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set object position on X axis.\n     */\n    setX(x): void {\n      super.setX(x);\n      this._updateTextPosition();\n    }\n\n    /**\n     * Set object position on Y axis.\n     */\n    setY(y): void {\n      super.setY(y);\n      this._updateTextPosition();\n    }\n\n    /**\n     * Set the angle of the object.\n     * @param angle The new angle of the object\n     */\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     */\n    setOpacity(opacity): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this.opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity() {\n      return this.opacity;\n    }\n\n    /**\n     * Get the string displayed by the object.\n     */\n    getString(): string {\n      return this._str;\n    }\n\n    /**\n     * Set the string displayed by the object.\n     * @param str The new text\n     */\n    setString(str: string): void {\n      if (str === this._str) {\n        return;\n      }\n      this._str = str;\n      this._renderer.updateString();\n      this._updateTextPosition();\n    }\n\n    /**\n     * Get the font size of the characters of the object.\n     */\n    getCharacterSize(): number {\n      return this._characterSize;\n    }\n\n    /**\n     * Set the font size for characters of the object.\n     * @param newSize The new font size for the text.\n     */\n    setCharacterSize(newSize: number): void {\n      if (newSize <= 1) {\n        newSize = 1;\n      }\n      this._characterSize = newSize;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Set the name of the resource to use for the font.\n     * @param fontResourceName The name of the font resource.\n     */\n    setFontName(fontResourceName: string): void {\n      this._fontName = fontResourceName;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Return true if the text is bold.\n     */\n    isBold(): boolean {\n      return this._bold;\n    }\n\n    /**\n     * Set bold for the object text.\n     * @param enable {boolean} true to have a bold text, false otherwise.\n     */\n    setBold(enable): void {\n      this._bold = enable;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Return true if the text is italic.\n     */\n    isItalic(): boolean {\n      return this._italic;\n    }\n\n    /**\n     * Set italic for the object text.\n     * @param enable {boolean} true to have an italic text, false otherwise.\n     */\n    setItalic(enable): void {\n      this._italic = enable;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Get width of the text.\n     */\n    getWidth(): float {\n      return this._wrapping ? this._wrappingWidth : this._renderer.getWidth();\n    }\n\n    /**\n     * Get height of the text.\n     */\n    getHeight(): float {\n      return this._renderer.getHeight();\n    }\n\n    /**\n     * Get scale of the text.\n     */\n    getScale(): float {\n      return (Math.abs(this._scaleX) + Math.abs(this._scaleY)) / 2.0;\n    }\n\n    /**\n     * Get x-scale of the text.\n     */\n    getScaleX(): float {\n      return this._scaleX;\n    }\n\n    /**\n     * Get y-scale of the text.\n     */\n    getScaleY(): float {\n      return this._scaleY;\n    }\n\n    /**\n     * Set the text object scale.\n     * @param newScale The new scale for the text object.\n     */\n    setScale(newScale: float): void {\n      if (this._scaleX === newScale && this._scaleY === newScale) return;\n\n      this._scaleX = newScale;\n      this._scaleY = newScale;\n      this._renderer.setScale(newScale);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the text object x-scale.\n     * @param newScale The new x-scale for the text object.\n     */\n    setScaleX(newScale: float): void {\n      if (this._scaleX === newScale) return;\n\n      this._scaleX = newScale;\n      this._renderer.setScaleX(newScale);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the text object y-scale.\n     * @param newScale The new y-scale for the text object.\n     */\n    setScaleY(newScale: float): void {\n      if (this._scaleY === newScale) return;\n\n      this._scaleY = newScale;\n      this._renderer.setScaleY(newScale);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Change the text color.\n     * @param color color as a \"R;G;B\" string, for example: \"255;0;0\"\n     */\n    setColor(str: string): void {\n      const color = str.split(';');\n      if (color.length < 3) {\n        return;\n      }\n      this._color[0] = parseInt(color[0], 10);\n      this._color[1] = parseInt(color[1], 10);\n      this._color[2] = parseInt(color[2], 10);\n      this._useGradient = false;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Get the text color.\n     * @return The color as a \"R;G;B\" string, for example: \"255;0;0\"\n     */\n    getColor(): string {\n      return this._color[0] + ';' + this._color[1] + ';' + this._color[2];\n    }\n\n    /**\n     * Set the text alignment for multiline text objects.\n     * @param alignment The text alignment.\n     */\n    setTextAlignment(alignment: string): void {\n      this._textAlign = alignment;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Get the text alignment of text object.\n     * @return The text alignment.\n     */\n    getTextAlignment(): string {\n      return this._textAlign;\n    }\n\n    /**\n     * Return true if word wrapping is enabled for the text.\n     */\n    isWrapping(): boolean {\n      return this._wrapping;\n    }\n\n    /**\n     * Set word wrapping for the object text.\n     * @param enable true to enable word wrapping, false to disable it.\n     */\n    setWrapping(enable: boolean): void {\n      if (this._wrapping === enable) return;\n\n      this._wrapping = enable;\n      this._renderer.updateStyle();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the word wrapping width for the text object.\n     */\n    getWrappingWidth(): float {\n      return this._wrappingWidth;\n    }\n\n    /**\n     * Set the word wrapping width for the text object.\n     * @param width The new width to set.\n     */\n    setWrappingWidth(width: float): void {\n      if (width <= 1) {\n        width = 1;\n      }\n      if (this._wrappingWidth === width) return;\n\n      this._wrappingWidth = width;\n      this._renderer.updateStyle();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the outline for the text object.\n     * @param str color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param thickness thickness of the outline (0 = disabled)\n     */\n    setOutline(str: string, thickness: number): void {\n      const color = str.split(';');\n      if (color.length < 3) {\n        return;\n      }\n      this._outlineColor[0] = parseInt(color[0], 10);\n      this._outlineColor[1] = parseInt(color[1], 10);\n      this._outlineColor[2] = parseInt(color[2], 10);\n      this._outlineThickness = thickness;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Set the shadow for the text object.\n     * @param str color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param distance distance between the shadow and the text, in pixels.\n     * @param blur amount of shadow blur, in pixels.\n     * @param angle shadow offset direction, in degrees.\n     */\n    setShadow(\n      str: string,\n      distance: number,\n      blur: integer,\n      angle: float\n    ): void {\n      const color = str.split(';');\n      if (color.length < 3) {\n        return;\n      }\n      this._shadowColor[0] = parseInt(color[0], 10);\n      this._shadowColor[1] = parseInt(color[1], 10);\n      this._shadowColor[2] = parseInt(color[2], 10);\n      this._shadowDistance = distance;\n      this._shadowBlur = blur;\n      this._shadowAngle = angle;\n      this._shadow = true;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Set the gradient for the text object.\n     * @param strFirstColor color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param strSecondColor color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param strThirdColor color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param strFourthColor color as a \"R;G;B\" string, for example: \"255;0;0\"\n     * @param strGradientType gradient type\n     */\n    setGradient(\n      strGradientType: string,\n      strFirstColor: string,\n      strSecondColor: string,\n      strThirdColor: string,\n      strFourthColor: string\n    ): void {\n      const colorFirst = strFirstColor.split(';');\n      const colorSecond = strSecondColor.split(';');\n      const colorThird = strThirdColor.split(';');\n      const colorFourth = strFourthColor.split(';');\n      this._gradient = [];\n      if (colorFirst.length == 3) {\n        this._gradient.push([\n          parseInt(colorFirst[0], 10),\n          parseInt(colorFirst[1], 10),\n          parseInt(colorFirst[2], 10),\n        ]);\n      }\n      if (colorSecond.length == 3) {\n        this._gradient.push([\n          parseInt(colorSecond[0], 10),\n          parseInt(colorSecond[1], 10),\n          parseInt(colorSecond[2], 10),\n        ]);\n      }\n      if (colorThird.length == 3) {\n        this._gradient.push([\n          parseInt(colorThird[0], 10),\n          parseInt(colorThird[1], 10),\n          parseInt(colorThird[2], 10),\n        ]);\n      }\n      if (colorFourth.length == 3) {\n        this._gradient.push([\n          parseInt(colorFourth[0], 10),\n          parseInt(colorFourth[1], 10),\n          parseInt(colorFourth[2], 10),\n        ]);\n      }\n      this._gradientType = strGradientType;\n      this._useGradient = this._gradient.length > 1 ? true : false;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Show the shadow of the text object.\n     * @param enable true to show the shadow, false to hide it\n     */\n    showShadow(enable: boolean): void {\n      this._shadow = enable;\n      this._renderer.updateStyle();\n    }\n\n    /**\n     * Get padding of the text object.\n     * @return number of pixels around the text before it gets cropped\n     */\n    getPadding(): number {\n      return this._padding;\n    }\n\n    /**\n     * Set padding of the text object.\n     * @param value number of pixels around the text before it gets cropped\n     */\n    setPadding(value: float): void {\n      this._padding = value;\n      this._renderer.updateStyle();\n    }\n  }\n  gdjs.registerObject('TextObject::Text', gdjs.TextRuntimeObject);\n}\n"],
  "mappings": "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",
  "names": []
}
