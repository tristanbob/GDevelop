{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TweenBehavior/tweenruntimebehavior.ts"],
  "sourcesContent": ["/// <reference path=\"shifty.d.ts\" />\nnamespace gdjs {\n  interface IScaleable extends RuntimeObject {\n    setScaleX(x: number): void;\n    setScaleY(y: number): void;\n    getScaleX(): number;\n    getScaleY(): number;\n  }\n\n  interface IOpaque extends RuntimeObject {\n    setOpacity(opacity: number): void;\n    getOpacity(): number;\n  }\n\n  interface IColorable extends RuntimeObject {\n    setColor(color: string): void;\n    getColor(): string;\n  }\n\n  interface ICharacterScaleable extends RuntimeObject {\n    setCharacterSize(characterSize: number): void;\n    getCharacterSize(): number;\n  }\n\n  function isScaleable(o: RuntimeObject): o is IScaleable {\n    //@ts-ignore We are checking if the methods are present.\n    return o.setScaleX && o.setScaleY && o.getScaleX && o.getScaleY;\n  }\n\n  function isOpaque(o: RuntimeObject): o is IOpaque {\n    //@ts-ignore We are checking if the methods are present.\n    return o.setOpacity && o.getOpacity;\n  }\n\n  function isColorable(o: RuntimeObject): o is IColorable {\n    //@ts-ignore We are checking if the methods are present.\n    return o.setColor && o.getColor;\n  }\n\n  function isCharacterScaleable(o: RuntimeObject): o is ICharacterScaleable {\n    //@ts-ignore We are checking if the methods are present.\n    return o.setCharacterSize && o.getCharacterSize;\n  }\n\n  function rgbToHsl(r: number, g: number, b: number): number[] {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    let v = Math.max(r, g, b),\n      c = v - Math.min(r, g, b),\n      f = 1 - Math.abs(v + v - c - 1);\n    let h =\n      c &&\n      (v === r ? (g - b) / c : v === g ? 2 + (b - r) / c : 4 + (r - g) / c);\n    return [\n      Math.round(60 * (h < 0 ? h + 6 : h)),\n      Math.round((f ? c / f : 0) * 100),\n      Math.round(((v + v - c) / 2) * 100),\n    ];\n  }\n\n  function hslToRgb(h: number, s: number, l: number): number[] {\n    h = h %= 360;\n    if (h < 0) {\n      h += 360;\n    }\n    s = s / 100;\n    l = l / 100;\n    const a = s * Math.min(l, 1 - l);\n    const f = (n = 0, k = (n + h / 30) % 12) =>\n      l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n    return [\n      Math.round(f(0) * 255),\n      Math.round(f(8) * 255),\n      Math.round(f(4) * 255),\n    ];\n  }\n\n  // TODO EBO Rewrite this behavior to use standard method to step.\n  // This could also fix layer time scale that seems to be ignored.\n  export class TweenRuntimeBehavior extends gdjs.RuntimeBehavior {\n    private _tweens: Record<string, TweenRuntimeBehavior.TweenInstance> = {};\n    private _runtimeScene: gdjs.RuntimeScene;\n    private _isActive: boolean = true;\n\n    /**\n     * @param instanceContainer The instance container the behavior belongs to.\n     * @param behaviorData The data to initialize the behavior\n     * @param owner The runtime object the behavior belongs to.\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      behaviorData: BehaviorData,\n      owner: gdjs.RuntimeObject\n    ) {\n      super(instanceContainer, behaviorData, owner);\n      this._runtimeScene = instanceContainer.getScene();\n    }\n\n    updateFromBehaviorData(\n      oldBehaviorData: BehaviorData,\n      newBehaviorData: BehaviorData\n    ): boolean {\n      // Nothing to update.\n      return true;\n    }\n\n    onDestroy() {\n      const shiftyJsScene = this._runtimeScene.shiftyJsScene;\n      if (!shiftyJsScene) return;\n\n      // Stop and delete all tweens of the behavior - otherwise they could:\n      // - continue to point to the behavior, and so to the object (memory leak),\n      // - affect the object in case it's recycled (wrong/hard to debug behavior).\n      for (const identifier in this._tweens) {\n        this._tweens[identifier].instance.stop();\n        shiftyJsScene.remove(this._tweens[identifier].instance);\n      }\n    }\n\n    private _addTween(\n      identifier: string,\n      easingValue: string,\n      tweenConfig: shifty.tweenConfig,\n      startTime: number,\n      totalDuration: number,\n      destroyObjectWhenFinished: boolean\n    ): void {\n      if (!this._isActive || !!TweenRuntimeBehavior.easings[easingValue])\n        return;\n\n      // Remove any prior tween\n      if (this._tweenExists(identifier)) this.removeTween(identifier);\n\n      // Initialize the tween instance\n      const tweenable = new shifty.Tweenable();\n      this._tweens[identifier] = new TweenRuntimeBehavior.TweenInstance(\n        tweenable,\n        false,\n        startTime,\n        totalDuration\n      );\n\n      // Attach it to the scene as it will become active and active tweens should be on the scene.\n      if (!this._runtimeScene.shiftyJsScene)\n        this._runtimeScene.shiftyJsScene = new shifty.Scene();\n      this._runtimeScene.shiftyJsScene.add(tweenable);\n\n      // Start the tween and set the needed callbacks\n      tweenable\n        .tween(tweenConfig)\n        .then(() => {\n          if (this._tweens[identifier])\n            this._tweens[identifier].hasFinished = true;\n\n          if (destroyObjectWhenFinished)\n            this.owner.deleteFromScene(this._runtimeScene);\n        })\n        .catch((e) => {});\n    }\n\n    private _tweenExists(identifier: string): boolean {\n      return !!this._tweens[identifier];\n    }\n\n    private _tweenIsPlaying(identifier: string): boolean {\n      return (\n        this._tweens[identifier] &&\n        this._tweens[identifier].instance.isPlaying()\n      );\n    }\n\n    private _pauseTween(identifier: string): void {\n      const tween = this._tweens[identifier];\n\n      // Pause the tween, and remove it from the scene of living tweens\n      // (the invariant is that scene only contains tweens being played).\n      tween.instance.pause();\n\n      const shiftyJsScene = this._runtimeScene.shiftyJsScene;\n      if (shiftyJsScene) {\n        shiftyJsScene.remove(tween.instance);\n      }\n    }\n\n    private _resumeTween(identifier: string): void {\n      const tween = this._tweens[identifier];\n\n      // Resume the tween, and add it back to the scene of living tweens\n      // (the invariant is that scene only contains tweens being played).\n      tween.instance.resume();\n\n      const shiftyJsScene = this._runtimeScene.shiftyJsScene;\n      if (shiftyJsScene) {\n        shiftyJsScene.add(tween.instance);\n      }\n    }\n\n    private _stopTween(identifier: string, jumpToDest: boolean): void {\n      this._tweens[identifier].instance.stop(jumpToDest);\n    }\n\n    private _tweenHasFinished(identifier: string): boolean {\n      return this._tweens[identifier].hasFinished;\n    }\n\n    /**\n     * Add an object variable tween.\n     * @deprecated Use addVariableTween2 instead.\n     * This function is misleading since one could think that the tween starts\n     * right at the moment this function is called whereas the value of the variable\n     * will change at the next frame only. Moreover, the variable will not start from\n     * the start value exactly since time will have passed at the moment the next\n     * frame is rendered.\n     * See https://github.com/4ian/GDevelop/issues/4270\n     * @param identifier Unique id to identify the tween\n     * @param variable The object variable to store the tweened value\n     * @param fromValue Start value\n     * @param toValue End value\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addVariableTween(\n      identifier: string,\n      variable: gdjs.Variable,\n      fromValue: float,\n      toValue: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { value: fromValue },\n          to: { value: toValue },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => variable.setNumber(state.value),\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object variable.\n     * @param identifier Unique id to identify the tween\n     * @param variable The object variable to store the tweened value\n     * @param toValue End value\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addVariableTween2(\n      identifier: string,\n      variable: gdjs.Variable,\n      toValue: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { value: variable.getValue() },\n          to: { value: toValue },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => variable.setNumber(state.value),\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object position.\n     * @param identifier Unique id to identify the tween\n     * @param toX The target X position\n     * @param toY The target Y position\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectPositionTween(\n      identifier: string,\n      toX: number,\n      toY: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { x: this.owner.getX(), y: this.owner.getY() },\n          to: { x: toX, y: toY },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            this.owner.setX(state.x);\n            this.owner.setY(state.y);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object X position.\n     * @param identifier Unique id to identify the tween\n     * @param toX The target X position\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectPositionXTween(\n      identifier: string,\n      toX: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { x: this.owner.getX() },\n          to: { x: toX },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => this.owner.setX(state.x),\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object Z position.\n     * @param identifier Unique id to identify the tween\n     * @param toZ The target Z position\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectPositionZTween(\n      identifier: string,\n      toZ: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      const { owner } = this;\n      if (!(owner instanceof gdjs.RuntimeObject3D)) return;\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { z: owner.getZ() },\n          to: { z: toZ },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => owner.setZ(state.z),\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object Y position.\n     * @param identifier Unique id to identify the tween\n     * @param toY The target Y position\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectPositionYTween(\n      identifier: string,\n      toY: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { y: this.owner.getY() },\n          to: { y: toY },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => this.owner.setY(state.y),\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object angle.\n     * @param identifier Unique id to identify the tween\n     * @param toAngle The target angle\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectAngleTween(\n      identifier: string,\n      toAngle: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { angle: this.owner.getAngle() },\n          to: { angle: toAngle },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            this.owner.setAngle(state.angle);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object scale.\n     * @param identifier Unique id to identify the tween\n     * @param toScaleX The target X-scale\n     * @param toScaleY The target Y-scale\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     * @param scaleFromCenterOfObject Scale the transform from the center of the object (or point that is called center), not the top-left origin\n     */\n    addObjectScaleTween(\n      identifier: string,\n      toScaleX: number,\n      toScaleY: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean,\n      scaleFromCenterOfObject: boolean\n    ) {\n      // Cast to IScaleable\n      if (!isScaleable(this.owner)) return;\n      const owner = this.owner;\n\n      if (toScaleX < 0) toScaleX = 0;\n      if (toScaleY < 0) toScaleY = 0;\n\n      const renderFunction = scaleFromCenterOfObject\n        ? (state) => {\n            const oldX = owner.getCenterXInScene();\n            const oldY = owner.getCenterYInScene();\n            owner.setScaleX(state.scaleX);\n            owner.setScaleY(state.scaleY);\n            owner.setCenterPositionInScene(oldX, oldY);\n          }\n        : (state) => {\n            owner.setScaleX(state.scaleX);\n            owner.setScaleY(state.scaleY);\n          };\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: {\n            scaleX: owner.getScaleX(),\n            scaleY: owner.getScaleY(),\n          },\n          to: { scaleX: toScaleX, scaleY: toScaleY },\n          duration: durationValue,\n          easing: easingValue,\n          render: renderFunction,\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object X-scale.\n     * @param identifier Unique id to identify the tween\n     * @param toScaleX The target X-scale\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     * @param scaleFromCenterOfObject Scale the transform from the center of the object (or point that is called center), not the top-left origin\n     */\n    addObjectScaleXTween(\n      identifier: string,\n      toScaleX: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean,\n      scaleFromCenterOfObject: boolean\n    ) {\n      // Cast to IScaleable\n      if (!isScaleable(this.owner)) return;\n      const owner = this.owner;\n\n      const stepFunction = scaleFromCenterOfObject\n        ? (state) => {\n            const oldX = owner.getCenterXInScene();\n            owner.setScaleX(state.scaleX);\n            owner.setCenterXInScene(oldX);\n          }\n        : (state) => owner.setScaleX(state.scaleX);\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { scaleX: owner.getScaleX() },\n          to: { scaleX: toScaleX },\n          duration: durationValue,\n          easing: easingValue,\n          render: stepFunction,\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object Y-scale.\n     * @param identifier Unique id to identify the tween\n     * @param toScaleY The target Y-scale\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     * @param scaleFromCenterOfObject Scale the transform from the center of the object (or point that is called center), not the top-left origin\n     */\n    addObjectScaleYTween(\n      identifier: string,\n      toScaleY: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean,\n      scaleFromCenterOfObject: boolean\n    ) {\n      // Cast to IScaleable\n      if (!isScaleable(this.owner)) return;\n      const owner = this.owner;\n\n      const stepFunction = scaleFromCenterOfObject\n        ? (state) => {\n            const oldY = owner.getCenterYInScene();\n            owner.setScaleY(state.scaleY);\n            owner.setCenterYInScene(oldY);\n          }\n        : (state) => owner.setScaleY(state.scaleY);\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { scaleY: owner.getScaleY() },\n          to: { scaleY: toScaleY },\n          duration: durationValue,\n          easing: easingValue,\n          render: stepFunction,\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object opacity.\n     * @param identifier Unique id to identify the tween\n     * @param toOpacity The target opacity\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectOpacityTween(\n      identifier: string,\n      toOpacity: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      if (!isOpaque(this.owner)) return;\n      const owner = this.owner;\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { opacity: owner.getOpacity() },\n          to: { opacity: toOpacity },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            owner.setOpacity(state.opacity);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object color.\n     * @param identifier Unique id to identify the tween\n     * @param toColorStr The target RGB color (format \"128;200;255\" with values between 0 and 255 for red, green and blue)\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     * @param useHSLColorTransition Tween using HSL color mappings, rather than direct RGB line\n     */\n    addObjectColorTween(\n      identifier: string,\n      toColorStr: string,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean,\n      useHSLColorTransition: boolean\n    ) {\n      if (\n        !isColorable(this.owner) ||\n        !toColorStr.match(\n          '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]);){2}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n        )\n      )\n        return;\n      const owner = this.owner;\n\n      const rgbFromColor: string[] = this.owner.getColor().split(';');\n      const rgbToColor: string[] = toColorStr.split(';');\n      if (rgbToColor.length !== 3) return;\n\n      let config: shifty.tweenConfig;\n      if (useHSLColorTransition) {\n        const hslFromColor = rgbToHsl(\n          parseFloat(rgbFromColor[0]),\n          parseFloat(rgbFromColor[1]),\n          parseFloat(rgbFromColor[2])\n        );\n        const hslToColor = rgbToHsl(\n          parseFloat(rgbToColor[0]),\n          parseFloat(rgbToColor[1]),\n          parseFloat(rgbToColor[2])\n        );\n\n        config = {\n          from: {\n            hue: hslFromColor[0],\n            saturation: hslFromColor[1],\n            lightness: hslFromColor[2],\n          },\n          to: {\n            hue: hslToColor[0],\n            saturation: hslToColor[1],\n            lightness: hslToColor[2],\n          },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            const rgbFromHslColor = hslToRgb(\n              state.hue,\n              state.saturation,\n              state.lightness\n            );\n            owner.setColor(\n              Math.floor(rgbFromHslColor[0]) +\n                ';' +\n                Math.floor(rgbFromHslColor[1]) +\n                ';' +\n                Math.floor(rgbFromHslColor[2])\n            );\n          },\n        };\n      } else {\n        config = {\n          from: {\n            red: rgbFromColor[0],\n            green: rgbFromColor[1],\n            blue: rgbFromColor[2],\n          },\n          to: { red: rgbToColor[0], green: rgbToColor[1], blue: rgbToColor[2] },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            owner.setColor(\n              Math.floor(state.red) +\n                ';' +\n                Math.floor(state.green) +\n                ';' +\n                Math.floor(state.blue)\n            );\n          },\n        };\n      }\n\n      this._addTween(\n        identifier,\n        easingValue,\n        config,\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object HSL color, with the \"to\" color given using HSL (H: any number, S and L: 0-100).\n     * @param identifier Unique id to identify the tween\n     * @param toHue The target hue, or the same as the from color's hue if blank\n     * @param animateHue, include hue in calculations, as can't set this to -1 as default to ignore\n     * @param toSaturation The target saturation, or the same as the from color's saturation if blank\n     * @param toHue The target lightness, or the same as the from color's lightness if blank\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectColorHSLTween(\n      identifier: string,\n      toHue: number,\n      animateHue: boolean,\n      toSaturation: number,\n      toLightness: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      if (!isColorable(this.owner)) return;\n      const owner = this.owner;\n\n      const rgbFromColor: string[] = owner.getColor().split(';');\n      if (rgbFromColor.length < 3) return;\n      const hslFromColor = rgbToHsl(\n        parseFloat(rgbFromColor[0]),\n        parseFloat(rgbFromColor[1]),\n        parseFloat(rgbFromColor[2])\n      );\n\n      const toH = animateHue ? toHue : hslFromColor[0];\n      const toS =\n        -1 === toSaturation\n          ? hslFromColor[1]\n          : Math.min(Math.max(toSaturation, 0), 100);\n      const toL =\n        -1 === toLightness\n          ? hslFromColor[2]\n          : Math.min(Math.max(toLightness, 0), 100);\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: {\n            hue: hslFromColor[0],\n            saturation: hslFromColor[1],\n            lightness: hslFromColor[2],\n          },\n          to: {\n            hue: toH,\n            saturation: toS,\n            lightness: toL,\n          },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            const rgbFromHslColor = hslToRgb(\n              state.hue,\n              state.saturation,\n              state.lightness\n            );\n\n            owner.setColor(\n              Math.floor(rgbFromHslColor[0]) +\n                ';' +\n                Math.floor(rgbFromHslColor[1]) +\n                ';' +\n                Math.floor(rgbFromHslColor[2])\n            );\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween a text object character size.\n     * @param identifier Unique id to identify the tween\n     * @param toSize The target character size\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addTextObjectCharacterSizeTween(\n      identifier: string,\n      toSize: number,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      if (!isCharacterScaleable(this.owner)) return;\n      const owner = this.owner;\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { size: owner.getCharacterSize() },\n          to: { size: toSize },\n          duration: durationValue,\n          easing: easingValue,\n          render: function step(state) {\n            owner.setCharacterSize(state.size);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object width.\n     * @param identifier Unique id to identify the tween\n     * @param toWidth The target width\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectWidthTween(\n      identifier: string,\n      toWidth: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { width: this.owner.getWidth() },\n          to: { width: toWidth },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            this.owner.setWidth(state.width);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object height.\n     * @param identifier Unique id to identify the tween\n     * @param toHeight The target height\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectHeightTween(\n      identifier: string,\n      toHeight: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { height: this.owner.getHeight() },\n          to: { height: toHeight },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            this.owner.setHeight(state.height);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween an object depth.\n     * @param identifier Unique id to identify the tween\n     * @param toDepth The target depth\n     * @param easingValue Type of easing\n     * @param durationValue Duration in milliseconds\n     * @param destroyObjectWhenFinished Destroy this object when the tween ends\n     */\n    addObjectDepthTween(\n      identifier: string,\n      toDepth: float,\n      easingValue: string,\n      durationValue: float,\n      destroyObjectWhenFinished: boolean\n    ) {\n      const { owner } = this;\n      if (!(owner instanceof gdjs.Cube3DRuntimeObject)) return;\n\n      this._addTween(\n        identifier,\n        easingValue,\n        {\n          from: { depth: owner.getDepth() },\n          to: { depth: toDepth },\n          duration: durationValue,\n          easing: easingValue,\n          render: (state) => {\n            owner.setDepth(state.depth);\n          },\n        },\n        this._runtimeScene.getTimeManager().getTimeFromStart(),\n        durationValue,\n        destroyObjectWhenFinished\n      );\n    }\n\n    /**\n     * Tween is playing.\n     * @param identifier Unique id to identify the tween\n     */\n    isPlaying(identifier: string): boolean {\n      return this._tweenExists(identifier) && this._tweenIsPlaying(identifier);\n    }\n\n    /**\n     * Tween exists.\n     * @param identifier Unique id to identify the tween\n     * @returns The tween exists\n     */\n    exists(identifier: string): boolean {\n      return this._tweenExists(identifier);\n    }\n\n    /**\n     * Tween has finished.\n     * @param identifier Unique id to identify the tween\n     */\n    hasFinished(identifier: string): boolean {\n      return (\n        this._tweenExists(identifier) && this._tweenHasFinished(identifier)\n      );\n    }\n\n    /**\n     * Pause a tween.\n     * @param identifier Unique id to identify the tween\n     */\n    pauseTween(identifier: string) {\n      if (\n        this._isActive &&\n        this._tweenExists(identifier) &&\n        this._tweenIsPlaying(identifier)\n      )\n        this._pauseTween(identifier);\n    }\n\n    /**\n     * Stop a tween.\n     * @param identifier Unique id to identify the tween\n     * @param jumpToDest Move to destination\n     */\n    stopTween(identifier: string, jumpToDest: boolean) {\n      if (\n        this._isActive &&\n        this._tweenExists(identifier) &&\n        this._tweenIsPlaying(identifier)\n      )\n        this._stopTween(identifier, jumpToDest);\n    }\n\n    /**\n     * Resume a tween.\n     * @param identifier Unique id to identify the tween\n     */\n    resumeTween(identifier: string) {\n      if (\n        this._isActive &&\n        this._tweenExists(identifier) &&\n        !this._tweenIsPlaying(identifier)\n      )\n        this._resumeTween(identifier);\n    }\n\n    /**\n     * Remove a tween.\n     * @param identifier Unique id to identify the tween\n     */\n    removeTween(identifier: string) {\n      if (!this._tweenExists(identifier)) return;\n\n      this._tweens[identifier].instance.stop();\n      if (this._runtimeScene.shiftyJsScene)\n        this._runtimeScene.shiftyJsScene.remove(\n          this._tweens[identifier].instance\n        );\n      delete this._tweens[identifier];\n    }\n\n    /**\n     * Get tween progress.\n     * @param identifier Unique id to identify the tween\n     * @returns Progress of playing tween animation (between 0.0 and 1.0)\n     */\n    getProgress(identifier: string): float {\n      const tween = this._tweens[identifier];\n      if (tween) {\n        const currentTime = this._runtimeScene\n          .getTimeManager()\n          .getTimeFromStart();\n        if (currentTime >= tween.startTime + tween.totalDuration) {\n          return 1;\n        }\n        return (currentTime - tween.startTime) / tween.totalDuration;\n      } else {\n        return 0;\n      }\n    }\n\n    onDeActivate() {\n      if (!this._isActive) {\n        return;\n      }\n      for (const key in this._tweens) {\n        if (this._tweens.hasOwnProperty(key)) {\n          const tween = this._tweens[key];\n          if (tween.instance.isPlaying()) {\n            tween.resumeOnActivate = true;\n            this._pauseTween(key);\n          }\n        }\n      }\n      this._isActive = false;\n    }\n\n    onActivate() {\n      if (this._isActive) {\n        return;\n      }\n      for (const key in this._tweens) {\n        if (this._tweens.hasOwnProperty(key)) {\n          const tween = this._tweens[key];\n          if (tween.resumeOnActivate) {\n            tween.resumeOnActivate = false;\n            this._resumeTween(key);\n          }\n        }\n      }\n      this._isActive = true;\n    }\n\n    static easings = [\n      'linear',\n      'easeInQuad',\n      'easeOutQuad',\n      'easeInOutQuad',\n      'easeInCubic',\n      'easeOutCubic',\n      'easeInOutCubic',\n      'easeInQuart',\n      'easeOutQuart',\n      'easeInOutQuart',\n      'easeInQuint',\n      'easeOutQuint',\n      'easeInOutQuint',\n      'easeInSine',\n      'easeOutSine',\n      'easeInOutSine',\n      'easeInExpo',\n      'easeOutExpo',\n      'easeInOutExpo',\n      'easeInCirc',\n      'easeOutCirc',\n      'easeInOutCirc',\n      'easeOutBounce',\n      'easeInBack',\n      'easeOutBack',\n      'easeInOutBack',\n      'elastic',\n      'swingFromTo',\n      'swingFrom',\n      'swingTo',\n      'bounce',\n      'bouncePast',\n      'easeFromTo',\n      'easeFrom',\n      'easeTo',\n    ];\n\n    static _currentTweenTime = 0;\n  }\n  gdjs.registerBehavior('Tween::TweenBehavior', gdjs.TweenRuntimeBehavior);\n\n  export namespace TweenRuntimeBehavior {\n    /**\n     * A tween being played in a behavior.\n     * @ignore\n     */\n    export class TweenInstance {\n      instance: shifty.Tweenable;\n      hasFinished: boolean;\n      startTime: float;\n      totalDuration: float;\n      resumeOnActivate: boolean = false;\n\n      /**\n       * @param instance The Shifty tween that is played\n       * @param hasFinished If the tween is finished already\n       * @param startTime The time at which the tween starts\n       * @param totalDuration The time of the whole tween\n       */\n      constructor(\n        instance: shifty.Tweenable,\n        hasFinished: boolean,\n        startTime: float,\n        totalDuration: float\n      ) {\n        this.instance = instance;\n        this.hasFinished = hasFinished;\n        this.startTime = startTime;\n        this.totalDuration = totalDuration;\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
