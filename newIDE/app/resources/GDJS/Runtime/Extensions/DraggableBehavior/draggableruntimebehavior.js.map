{
  "version": 3,
  "sources": ["../../../../../../../Extensions/DraggableBehavior/draggableruntimebehavior.ts"],
  "sourcesContent": ["/*\nGDevelop - Draggable Behavior Extension\nCopyright (c) 2013-2021 Florian Rival (Florian.Rival@gmail.com)\n */\n\nnamespace gdjs {\n  /**\n   * The DraggableRuntimeBehavior represents a behavior allowing objects to be\n   * moved using the mouse.\n   */\n  export class DraggableRuntimeBehavior extends gdjs.RuntimeBehavior {\n    /**\n     * The manager that currently handles the dragging of the owner if any.\n     * When the owner is being dragged, no other manager can start dragging it.\n     */\n    _draggedByDraggableManager: DraggableManager | null = null;\n    _checkCollisionMask: boolean;\n    _justDropped = false;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      behaviorData,\n      owner\n    ) {\n      super(instanceContainer, behaviorData, owner);\n      this._checkCollisionMask = behaviorData.checkCollisionMask ? true : false;\n    }\n\n    updateFromBehaviorData(oldBehaviorData, newBehaviorData): boolean {\n      // Nothing to update.\n      return true;\n    }\n\n    onDeActivate() {\n      this._endDrag();\n    }\n\n    onDestroy() {\n      this.onDeActivate();\n    }\n\n    _endDrag() {\n      if (this._draggedByDraggableManager) {\n        this._draggedByDraggableManager.endDrag();\n        this._justDropped = true;\n      }\n      this._draggedByDraggableManager = null;\n    }\n\n    _dismissDrag() {\n      this._draggedByDraggableManager = null;\n    }\n\n    _tryBeginDrag(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      if (this._draggedByDraggableManager) {\n        return false;\n      }\n      const inputManager = instanceContainer.getGame().getInputManager();\n\n      const touchIds = inputManager.getStartedTouchIdentifiers();\n      for (let i = 0; i < touchIds.length; ++i) {\n        const touchDraggableManager = DraggableManager.getTouchManager(\n          instanceContainer,\n          touchIds[i]\n        );\n        if (touchDraggableManager.isDragging(this)) {\n          continue;\n        }\n        if (touchDraggableManager.tryAndTakeDragging(instanceContainer, this)) {\n          this._draggedByDraggableManager = touchDraggableManager;\n          return true;\n        }\n      }\n      return false;\n    }\n\n    _shouldEndDrag(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      if (!this._draggedByDraggableManager) {\n        return false;\n      }\n      return this._draggedByDraggableManager.shouldEndDrag(\n        instanceContainer,\n        this\n      );\n    }\n\n    _updateObjectPosition(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      if (!this._draggedByDraggableManager) {\n        return false;\n      }\n      this._draggedByDraggableManager.updateObjectPosition(\n        instanceContainer,\n        this\n      );\n      return true;\n    }\n\n    doStepPreEvents(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      this._tryBeginDrag(instanceContainer);\n      if (this._shouldEndDrag(instanceContainer)) {\n        this._endDrag();\n      }\n      this._updateObjectPosition(instanceContainer);\n    }\n\n    doStepPostEvents(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      this._justDropped = false;\n    }\n\n    isDragged(): boolean {\n      return !!this._draggedByDraggableManager;\n    }\n\n    wasJustDropped(): boolean {\n      return this._justDropped;\n    }\n  }\n\n  /**\n   * Handle the dragging\n   */\n  class DraggableManager {\n    private _touchId: integer;\n    /**\n     * The object has left its original position.\n     * When true, the search for the best object to drag has ended.\n     */\n    protected _draggingSomething = false;\n    /**\n     * The behavior of the object that is being dragged and that is the best one (i.e: highest Z order) found.\n     */\n    protected _draggableBehavior: gdjs.DraggableRuntimeBehavior | null = null;\n    protected _xOffset: number = 0;\n    protected _yOffset: number = 0;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      touchId: integer\n    ) {\n      this._touchId = touchId;\n    }\n\n    /**\n     * Get the platforms manager of an instance container.\n     */\n    static getTouchManager(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      touchId: integer\n    ): DraggableManager {\n      // @ts-ignore\n      if (!instanceContainer.touchDraggableManagers) {\n        //Create the shared manager if necessary.\n        // @ts-ignore\n        instanceContainer.touchDraggableManagers = [];\n      }\n      // @ts-ignore\n      if (!instanceContainer.touchDraggableManagers[touchId]) {\n        //Create the shared manager if necessary.\n        // @ts-ignore\n        instanceContainer.touchDraggableManagers[\n          touchId\n        ] = new DraggableManager(instanceContainer, touchId);\n      }\n      // @ts-ignore\n      return instanceContainer.touchDraggableManagers[touchId];\n    }\n\n    tryAndTakeDragging(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      draggableRuntimeBehavior: DraggableRuntimeBehavior\n    ) {\n      if (\n        this._draggableBehavior &&\n        draggableRuntimeBehavior.owner.getZOrder() <=\n          this._draggableBehavior.owner.getZOrder()\n      ) {\n        return false;\n      }\n      const position = this.getPosition(\n        instanceContainer,\n        draggableRuntimeBehavior\n      );\n      if (\n        !draggableRuntimeBehavior.owner.insideObject(position[0], position[1])\n      ) {\n        return false;\n      } else if (\n        draggableRuntimeBehavior._checkCollisionMask &&\n        !draggableRuntimeBehavior.owner.isCollidingWithPoint(\n          position[0],\n          position[1]\n        )\n      ) {\n        return false;\n      }\n      if (this._draggableBehavior) {\n        // The previous best object to drag will not be dragged.\n        this._draggableBehavior._dismissDrag();\n      }\n      this._draggableBehavior = draggableRuntimeBehavior;\n      this._xOffset = position[0] - draggableRuntimeBehavior.owner.getX();\n      this._yOffset = position[1] - draggableRuntimeBehavior.owner.getY();\n      return true;\n    }\n\n    updateObjectPosition(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      draggableRuntimeBehavior: DraggableRuntimeBehavior\n    ) {\n      const position = this.getPosition(\n        instanceContainer,\n        draggableRuntimeBehavior\n      );\n      if (\n        draggableRuntimeBehavior.owner.getX() != position[0] - this._xOffset ||\n        draggableRuntimeBehavior.owner.getY() != position[1] - this._yOffset\n      ) {\n        draggableRuntimeBehavior.owner.setX(position[0] - this._xOffset);\n        draggableRuntimeBehavior.owner.setY(position[1] - this._yOffset);\n        this._draggingSomething = true;\n      }\n    }\n\n    endDrag() {\n      this._draggingSomething = false;\n      this._draggableBehavior = null;\n    }\n\n    isDragging(draggableRuntimeBehavior: DraggableRuntimeBehavior): boolean {\n      return this._draggingSomething;\n    }\n\n    getPosition(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      draggableRuntimeBehavior: DraggableRuntimeBehavior\n    ): FloatPoint {\n      const workingPoint: FloatPoint = gdjs.staticArray(\n        DraggableManager.prototype.getPosition\n      ) as FloatPoint;\n      const inputManager = instanceContainer.getGame().getInputManager();\n      return instanceContainer\n        .getLayer(draggableRuntimeBehavior.owner.getLayer())\n        .convertCoords(\n          inputManager.getTouchX(this._touchId),\n          inputManager.getTouchY(this._touchId),\n          0,\n          workingPoint\n        );\n    }\n\n    shouldEndDrag(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      draggableRuntimeBehavior: DraggableRuntimeBehavior\n    ): boolean {\n      const inputManager = instanceContainer.getGame().getInputManager();\n      return inputManager.hasTouchEnded(this._touchId);\n    }\n  }\n\n  gdjs.registerBehavior(\n    'DraggableBehavior::Draggable',\n    gdjs.DraggableRuntimeBehavior\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
