{
  "version": 3,
  "sources": ["../../../../../../../Extensions/BBText/bbtextruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  /** Base parameters for {@link gdjs.BBTextRuntimeObject} */\n  export type BBTextObjectDataType = {\n    /** The base parameters of the BBText */\n    content: {\n      /** The opacity of the BBText */\n      opacity: number;\n      /** Deprecated - Is the text visible? */\n      visible: boolean;\n      /** Content of the text */\n      text: string;\n      /** The color of the text */\n      color: string;\n      /** The font of the text */\n      fontFamily: string;\n      /** The size of the text */\n      fontSize: number;\n      /** Activate word wrap if set to true */\n      wordWrap: boolean;\n      /** Alignment of the text: \"left\", \"center\" or \"right\" */\n      align: 'left' | 'center' | 'right';\n    };\n  };\n  export type BBTextObjectData = ObjectData & BBTextObjectDataType;\n\n  /**\n   * Displays a rich text using BBCode markup (allowing to set parts of the text as bold, italic, use different colors and shadows).\n   */\n  export class BBTextRuntimeObject extends gdjs.RuntimeObject {\n    _opacity: float;\n\n    _text: string;\n\n    /** color in format [r, g, b], where each component is in the range [0, 255] */\n    _color: integer[];\n    _fontFamily: string;\n    _fontSize: number;\n\n    _wordWrap: boolean;\n    _wrappingWidth: float = 250;\n\n    // This value is the default wrapping width of the runtime object.\n    _align: string;\n    _renderer: gdjs.BBTextRuntimeObjectRenderer;\n\n    // While this should rather be exposed as a property for all objects, honor the \"visible\"\n    // property that is specific to this object.\n    hidden: boolean;\n\n    /**\n     * @param instanceContainer The container the object belongs to.\n     * @param objectData The object data used to initialize the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: BBTextObjectData\n    ) {\n      super(instanceContainer, objectData);\n      // @ts-ignore - parseFloat should not be required, but GDevelop 5.0 beta 92 and below were storing it as a string.\n      this._opacity = parseFloat(objectData.content.opacity);\n      this._text = objectData.content.text;\n      this._color = gdjs.rgbOrHexToRGBColor(objectData.content.color);\n      this._fontFamily = objectData.content.fontFamily;\n      // @ts-ignore - parseFloat should not be required, but GDevelop 5.0 beta 92 and below were storing it as a string.\n      this._fontSize = parseFloat(objectData.content.fontSize);\n      this._wordWrap = objectData.content.wordWrap;\n      this._align = objectData.content.align;\n      this._renderer = new gdjs.BBTextRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n      this.hidden = !objectData.content.visible;\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    // @ts-ignore\n    updateFromObjectData(\n      oldObjectData: BBTextObjectDataType,\n      newObjectData: BBTextObjectDataType\n    ): boolean {\n      if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n        this.setOpacity(newObjectData.content.opacity);\n      }\n      if (oldObjectData.content.visible !== newObjectData.content.visible) {\n        this.hide(!newObjectData.content.visible);\n      }\n      if (oldObjectData.content.text !== newObjectData.content.text) {\n        this.setBBText(newObjectData.content.text);\n      }\n      if (oldObjectData.content.color !== newObjectData.content.color) {\n        this._color = gdjs.rgbOrHexToRGBColor(newObjectData.content.color);\n        this._renderer.updateColor();\n      }\n      if (\n        oldObjectData.content.fontFamily !== newObjectData.content.fontFamily\n      ) {\n        this.setFontFamily(newObjectData.content.fontFamily);\n      }\n      if (oldObjectData.content.fontSize !== newObjectData.content.fontSize) {\n        this.setFontSize(newObjectData.content.fontSize);\n      }\n      if (oldObjectData.content.wordWrap !== newObjectData.content.wordWrap) {\n        this.setWordWrap(newObjectData.content.wordWrap);\n      }\n      if (oldObjectData.content.align !== newObjectData.content.align) {\n        this.setAlignment(newObjectData.content.align);\n      }\n      return true;\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWrappingWidth(initialInstanceData.width);\n      } else {\n        this.setWrappingWidth(\n          // This value is the default wrapping width of the runtime object.\n          250\n        );\n      }\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      super.onDestroyFromScene(instanceContainer);\n    }\n\n    /**\n     * Set the markup text to display.\n     */\n    setBBText(text): void {\n      this._text = text;\n      this._renderer.updateText();\n    }\n\n    /**\n     * Get the markup text displayed by the object.\n     */\n    getBBText() {\n      return this._text;\n    }\n\n    setColor(rgbColorString): void {\n      this._color = gdjs.rgbOrHexToRGBColor(rgbColorString);\n      this._renderer.updateColor();\n    }\n\n    /**\n     * Get the base color.\n     * @return The color as a \"R;G;B\" string, for example: \"255;0;0\"\n     */\n    getColor(): string {\n      return this._color[0] + ';' + this._color[1] + ';' + this._color[2];\n    }\n\n    setFontSize(fontSize): void {\n      this._fontSize = fontSize;\n      this._renderer.updateFontSize();\n    }\n\n    getFontSize() {\n      return this._fontSize;\n    }\n\n    setFontFamily(fontFamily): void {\n      this._fontFamily = fontFamily;\n      this._renderer.updateFontFamily();\n    }\n\n    getFontFamily() {\n      return this._fontFamily;\n    }\n\n    setAlignment(align): void {\n      this._align = align;\n      this._renderer.updateAlignment();\n    }\n\n    getAlignment() {\n      return this._align;\n    }\n\n    /**\n     * Set object position on X axis.\n     * @param x The new position X of the object.\n     */\n    setX(x: float): void {\n      super.setX(x);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set object position on Y axis.\n     * @param y The new position Y of the object.\n     */\n    setY(y: float): void {\n      super.setY(y);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set the angle of the object.\n     * @param angle The new angle of the object.\n     */\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     * @param opacity The new opacity of the object (0-255).\n     */\n    setOpacity(opacity: float): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this._opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity() {\n      return this._opacity;\n    }\n\n    /**\n     * Set the width.\n     * @param width The new width in pixels.\n     */\n    setWrappingWidth(width: float): void {\n      if (this._wrappingWidth === width) return;\n\n      this._wrappingWidth = width;\n      this._renderer.updateWrappingWidth();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the wrapping width of the object.\n     */\n    getWrappingWidth(): float {\n      return this._wrappingWidth;\n    }\n\n    setWordWrap(wordWrap: boolean): void {\n      if (this._wordWrap === wordWrap) return;\n\n      this._wordWrap = wordWrap;\n      this._renderer.updateWordWrap();\n      this.invalidateHitboxes();\n    }\n\n    getWordWrap() {\n      return this._wordWrap;\n    }\n\n    /**\n     * Get the width of the object.\n     */\n    getWidth(): float {\n      return this._renderer.getWidth();\n    }\n\n    /**\n     * Get the height of the object.\n     */\n    getHeight(): float {\n      return this._renderer.getHeight();\n    }\n  }\n  // @ts-ignore\n  gdjs.registerObject('BBText::BBText', gdjs.BBTextRuntimeObject);\n}\n"],
  "mappings": "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",
  "names": []
}
