{
  "version": 3,
  "sources": ["../../../../../../../Extensions/ParticleSystem/particleemitterobject.ts"],
  "sourcesContent": ["/*\n * GDevelop - Particle System Extension\n * Copyright (c) 2010-2016 Florian Rival (Florian.Rival@gmail.com)\n * This project is released under the MIT License.\n */\n\nnamespace gdjs {\n  export type ParticleEmitterObjectDataType = {\n    /**\n     * @deprecated Data not used\n     */\n    emitterAngleA: number;\n    emitterForceMin: number;\n    /**\n     * Cone spray angle (degrees)\n     */\n    emitterAngleB: number;\n    zoneRadius: number;\n    emitterForceMax: number;\n    particleLifeTimeMax: number;\n    particleLifeTimeMin: number;\n    particleGravityY: number;\n    particleGravityX: number;\n    particleRed2: number;\n    particleRed1: number;\n    particleGreen2: number;\n    particleGreen1: number;\n    particleBlue2: number;\n    particleBlue1: number;\n    particleSize2: number;\n    particleSize1: number;\n    /**\n     * Particle max rotation speed (degrees/second)\n     */\n    particleAngle2: number;\n    /**\n     * Particle min rotation speed (degrees/second)\n     */\n    particleAngle1: number;\n    particleAlpha1: number;\n    rendererType: string;\n    particleAlpha2: number;\n    rendererParam2: number;\n    rendererParam1: number;\n    particleSizeRandomness1: number;\n    particleSizeRandomness2: number;\n    maxParticleNb: number;\n    additive: boolean;\n    /** Resource name for image in particle */\n    textureParticleName: string;\n    tank: number;\n    flow: number;\n    /** Destroy the object when there is no particles? */\n    destroyWhenNoParticles: boolean;\n    jumpForwardInTimeOnCreation: number;\n  };\n\n  export type ParticleEmitterObjectData = ObjectData &\n    ParticleEmitterObjectDataType;\n\n  /**\n   * Displays particles.\n   */\n  export class ParticleEmitterObject extends gdjs.RuntimeObject {\n    /**\n     * @deprecated Data not used\n     */\n    angleA: number;\n    angleB: number;\n    forceMin: number;\n    forceMax: float;\n    zoneRadius: number;\n    lifeTimeMin: number;\n    lifeTimeMax: float;\n    gravityX: number;\n    gravityY: number;\n    colorR1: number;\n    colorR2: number;\n    colorG1: number;\n    colorG2: number;\n    colorB1: number;\n    colorB2: number;\n    size1: number;\n    size2: number;\n    alpha1: number;\n    alpha2: number;\n    rendererType: string;\n    rendererParam1: number;\n    rendererParam2: number;\n    texture: string;\n    flow: number;\n    tank: number;\n    destroyWhenNoParticles: boolean;\n    particleRotationMinSpeed: number;\n    particleRotationMaxSpeed: number;\n    maxParticlesCount: number;\n    additiveRendering: boolean;\n    jumpForwardInTimeOnCreation: number;\n    _jumpForwardInTimeCompleted: boolean = false;\n    _posDirty: boolean = true;\n    _angleDirty: boolean = true;\n    _forceDirty: boolean = true;\n    _zoneRadiusDirty: boolean = true;\n    _lifeTimeDirty: boolean = true;\n    _gravityDirty: boolean = true;\n    _colorDirty: boolean = true;\n    _sizeDirty: boolean = true;\n    _alphaDirty: boolean = true;\n    _flowDirty: boolean = true;\n    _tankDirty: boolean = true;\n    _particleRotationSpeedDirty: boolean = true;\n    _maxParticlesCountDirty: boolean = true;\n    _additiveRenderingDirty: boolean = true;\n    // Don't mark texture as dirty if not using one.\n    _textureDirty: boolean;\n\n    // @ts-ignore\n    _renderer: gdjs.ParticleEmitterObjectRenderer;\n\n    /**\n     * @param instanceContainer the container the object belongs to\n     * @param particleObjectData The initial properties of the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      particleObjectData: ParticleEmitterObjectData\n    ) {\n      super(instanceContainer, particleObjectData);\n      this._renderer = new gdjs.ParticleEmitterObjectRenderer(\n        instanceContainer,\n        this,\n        particleObjectData\n      );\n      this.angleA = particleObjectData.emitterAngleA;\n      this.angleB = particleObjectData.emitterAngleB;\n      this.forceMin = particleObjectData.emitterForceMin;\n      this.forceMax = particleObjectData.emitterForceMax;\n      this.zoneRadius = particleObjectData.zoneRadius;\n      this.lifeTimeMin = particleObjectData.particleLifeTimeMin;\n      this.lifeTimeMax = particleObjectData.particleLifeTimeMax;\n      this.gravityX = particleObjectData.particleGravityX;\n      this.gravityY = particleObjectData.particleGravityY;\n      this.colorR1 = particleObjectData.particleRed1;\n      this.colorR2 = particleObjectData.particleRed2;\n      this.colorG1 = particleObjectData.particleGreen1;\n      this.colorG2 = particleObjectData.particleGreen2;\n      this.colorB1 = particleObjectData.particleBlue1;\n      this.colorB2 = particleObjectData.particleBlue2;\n      this.size1 = particleObjectData.particleSize1;\n      this.size2 = particleObjectData.particleSize2;\n      this.alpha1 = particleObjectData.particleAlpha1;\n      this.alpha2 = particleObjectData.particleAlpha2;\n      this.rendererType = particleObjectData.rendererType;\n      this.rendererParam1 = particleObjectData.rendererParam1;\n      this.rendererParam2 = particleObjectData.rendererParam2;\n      this.texture = particleObjectData.textureParticleName;\n      this.flow = particleObjectData.flow;\n      this.tank = particleObjectData.tank;\n      this.destroyWhenNoParticles = particleObjectData.destroyWhenNoParticles;\n      this.particleRotationMinSpeed = particleObjectData.particleAngle1;\n      this.particleRotationMaxSpeed = particleObjectData.particleAngle2;\n      this.maxParticlesCount = particleObjectData.maxParticleNb;\n      this.additiveRendering = particleObjectData.additive;\n      this.jumpForwardInTimeOnCreation =\n        particleObjectData.jumpForwardInTimeOnCreation;\n      this._textureDirty = this.texture !== '';\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    setX(x: number): void {\n      if (this.x !== x) {\n        this._posDirty = true;\n      }\n      super.setX(x);\n    }\n\n    setY(y: number): void {\n      if (this.y !== y) {\n        this._posDirty = true;\n      }\n      super.setY(y);\n    }\n\n    setAngle(angle): void {\n      if (this.angle !== angle) {\n        this._angleDirty = true;\n      }\n      super.setAngle(angle);\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    updateFromObjectData(\n      oldObjectData: ParticleEmitterObjectData,\n      newObjectData: ParticleEmitterObjectData\n    ): boolean {\n      if (oldObjectData.emitterAngleA !== newObjectData.emitterAngleA) {\n        this.setEmitterAngleA(newObjectData.emitterAngleA);\n      }\n      if (oldObjectData.emitterAngleB !== newObjectData.emitterAngleB) {\n        this.setEmitterAngleB(newObjectData.emitterAngleB);\n      }\n      if (oldObjectData.emitterForceMin !== newObjectData.emitterForceMin) {\n        this.setEmitterForceMin(newObjectData.emitterForceMin);\n      }\n      if (oldObjectData.particleAngle1 !== newObjectData.particleAngle1) {\n        this.setParticleRotationMinSpeed(newObjectData.particleAngle1);\n      }\n      if (oldObjectData.particleAngle2 !== newObjectData.particleAngle2) {\n        this.setParticleRotationMaxSpeed(newObjectData.particleAngle2);\n      }\n      if (oldObjectData.maxParticleNb !== newObjectData.maxParticleNb) {\n        this.setMaxParticlesCount(newObjectData.maxParticleNb);\n      }\n      if (oldObjectData.additive !== newObjectData.additive) {\n        this.setAdditiveRendering(newObjectData.additive);\n      }\n      if (oldObjectData.emitterForceMax !== newObjectData.emitterForceMax) {\n        this.setEmitterForceMax(newObjectData.emitterForceMax);\n      }\n      if (oldObjectData.zoneRadius !== newObjectData.zoneRadius) {\n        this.setZoneRadius(newObjectData.zoneRadius);\n      }\n      if (\n        oldObjectData.particleLifeTimeMin !== newObjectData.particleLifeTimeMin\n      ) {\n        this.setParticleLifeTimeMin(newObjectData.particleLifeTimeMin);\n      }\n      if (\n        oldObjectData.particleLifeTimeMax !== newObjectData.particleLifeTimeMax\n      ) {\n        this.setParticleLifeTimeMax(newObjectData.particleLifeTimeMax);\n      }\n      if (oldObjectData.particleGravityX !== newObjectData.particleGravityX) {\n        this.setParticleGravityX(newObjectData.particleGravityX);\n      }\n      if (oldObjectData.particleGravityY !== newObjectData.particleGravityY) {\n        this.setParticleGravityY(newObjectData.particleGravityY);\n      }\n      if (oldObjectData.particleRed1 !== newObjectData.particleRed1) {\n        this.setParticleRed1(newObjectData.particleRed1);\n      }\n      if (oldObjectData.particleRed2 !== newObjectData.particleRed2) {\n        this.setParticleRed2(newObjectData.particleRed2);\n      }\n      if (oldObjectData.particleGreen1 !== newObjectData.particleGreen1) {\n        this.setParticleGreen1(newObjectData.particleGreen1);\n      }\n      if (oldObjectData.particleGreen2 !== newObjectData.particleGreen2) {\n        this.setParticleGreen2(newObjectData.particleGreen2);\n      }\n      if (oldObjectData.particleBlue1 !== newObjectData.particleBlue1) {\n        this.setParticleBlue1(newObjectData.particleBlue1);\n      }\n      if (oldObjectData.particleBlue2 !== newObjectData.particleBlue2) {\n        this.setParticleBlue2(newObjectData.particleBlue2);\n      }\n      if (oldObjectData.particleSize1 !== newObjectData.particleSize1) {\n        this.setParticleSize1(newObjectData.particleSize1);\n      }\n      if (oldObjectData.particleSize2 !== newObjectData.particleSize2) {\n        this.setParticleSize2(newObjectData.particleSize2);\n      }\n      if (oldObjectData.particleAlpha1 !== newObjectData.particleAlpha1) {\n        this.setParticleAlpha1(newObjectData.particleAlpha1);\n      }\n      if (oldObjectData.particleAlpha2 !== newObjectData.particleAlpha2) {\n        this.setParticleAlpha2(newObjectData.particleAlpha2);\n      }\n      if (\n        oldObjectData.textureParticleName !== newObjectData.textureParticleName\n      ) {\n        this.setTexture(\n          newObjectData.textureParticleName,\n          this.getRuntimeScene()\n        );\n      }\n      if (oldObjectData.flow !== newObjectData.flow) {\n        this.setFlow(newObjectData.flow);\n      }\n      if (oldObjectData.tank !== newObjectData.tank) {\n        this.setTank(newObjectData.tank);\n      }\n      if (\n        oldObjectData.destroyWhenNoParticles !==\n        newObjectData.destroyWhenNoParticles\n      ) {\n        this.destroyWhenNoParticles = newObjectData.destroyWhenNoParticles;\n      }\n      if (\n        oldObjectData.particleSizeRandomness1 !==\n          newObjectData.particleSizeRandomness1 ||\n        oldObjectData.particleSizeRandomness2 !==\n          newObjectData.particleSizeRandomness2 ||\n        oldObjectData.particleAngle1 !== newObjectData.particleAngle1 ||\n        oldObjectData.particleAngle2 !== newObjectData.particleAngle2 ||\n        oldObjectData.maxParticleNb !== newObjectData.maxParticleNb ||\n        oldObjectData.additive !== newObjectData.additive ||\n        oldObjectData.rendererType !== newObjectData.rendererType ||\n        oldObjectData.rendererParam1 !== newObjectData.rendererParam1 ||\n        oldObjectData.rendererParam2 !== newObjectData.rendererParam2\n      ) {\n        // Destroy the renderer, ensure it's removed from the layer.\n        const layer = this.getInstanceContainer().getLayer(this.layer);\n        layer\n          .getRenderer()\n          .removeRendererObject(this._renderer.getRendererObject());\n        this._renderer.destroy();\n\n        // and recreate the renderer, which will add itself to the layer.\n        this._renderer = new gdjs.ParticleEmitterObjectRenderer(\n          this.getInstanceContainer(),\n          this,\n          newObjectData\n        );\n\n        // Consider every state dirty as the renderer was just re-created, so it needs\n        // to be repositioned, angle updated, etc...\n        this._posDirty = this._angleDirty = this._forceDirty = this._zoneRadiusDirty = true;\n        this._lifeTimeDirty = this._gravityDirty = this._colorDirty = this._sizeDirty = true;\n        this._alphaDirty = this._flowDirty = this._tankDirty = this._textureDirty = true;\n      }\n      return true;\n    }\n\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      if (this._posDirty) {\n        this._renderer.setPosition(this.getX(), this.getY());\n      }\n      if (this._particleRotationSpeedDirty) {\n        this._renderer.setParticleRotationSpeed(\n          this.particleRotationMinSpeed,\n          this.particleRotationMaxSpeed\n        );\n      }\n      if (this._maxParticlesCountDirty) {\n        this._renderer.setMaxParticlesCount(this.maxParticlesCount);\n      }\n      if (this._additiveRenderingDirty) {\n        this._renderer.setAdditiveRendering(this.additiveRendering);\n      }\n      if (this._angleDirty) {\n        const angle = this.getAngle();\n        this._renderer.setAngle(\n          angle - this.angleB / 2.0,\n          angle + this.angleB / 2.0\n        );\n      }\n      if (this._forceDirty) {\n        this._renderer.setForce(this.forceMin, this.forceMax);\n      }\n      if (this._zoneRadiusDirty) {\n        this._renderer.setZoneRadius(this.zoneRadius);\n      }\n      if (this._lifeTimeDirty) {\n        this._renderer.setLifeTime(this.lifeTimeMin, this.lifeTimeMax);\n      }\n      if (this._gravityDirty) {\n        this._renderer.setGravity(this.gravityX, this.gravityY);\n      }\n      if (this._colorDirty) {\n        this._renderer.setColor(\n          this.colorR1,\n          this.colorG1,\n          this.colorB1,\n          this.colorR2,\n          this.colorG2,\n          this.colorB2\n        );\n      }\n      if (this._sizeDirty) {\n        this._renderer.setSize(this.size1, this.size2);\n      }\n      if (this._alphaDirty) {\n        this._renderer.setAlpha(this.alpha1, this.alpha2);\n      }\n      if (this._flowDirty || this._tankDirty) {\n        this._renderer.resetEmission(this.flow, this.tank);\n      }\n      if (this._textureDirty) {\n        this._renderer.setTextureName(this.texture, instanceContainer);\n      }\n      this._posDirty = this._angleDirty = this._forceDirty = this._zoneRadiusDirty = false;\n      this._lifeTimeDirty = this._gravityDirty = this._colorDirty = this._sizeDirty = false;\n      this._alphaDirty = this._flowDirty = this._textureDirty = this._tankDirty = false;\n      this._additiveRenderingDirty = this._maxParticlesCountDirty = this._particleRotationSpeedDirty = false;\n      this._renderer.update(this.getElapsedTime() / 1000.0);\n      if (\n        this._renderer.hasStarted() &&\n        this.getParticleCount() === 0 &&\n        this.destroyWhenNoParticles\n      ) {\n        this.deleteFromScene(instanceContainer);\n      }\n      if (\n        this.jumpForwardInTimeOnCreation > 0 &&\n        this._jumpForwardInTimeCompleted === false\n      ) {\n        this._renderer.update(this.jumpForwardInTimeOnCreation);\n        this._jumpForwardInTimeCompleted = true;\n      }\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      this._renderer.destroy();\n      super.onDestroyFromScene(instanceContainer);\n    }\n\n    getEmitterForceMin(): number {\n      return this.forceMin;\n    }\n\n    setEmitterForceMin(force: float): void {\n      if (force < 0) {\n        force = 0;\n      }\n      if (this.forceMin !== force) {\n        this._forceDirty = true;\n        this.forceMin = force;\n      }\n    }\n\n    getEmitterForceMax(): number {\n      return this.forceMax;\n    }\n\n    setEmitterForceMax(force: float): void {\n      if (force < 0) {\n        force = 0;\n      }\n      if (this.forceMax !== force) {\n        this._forceDirty = true;\n        this.forceMax = force;\n      }\n    }\n\n    setParticleRotationMinSpeed(speed: number): void {\n      if (this.particleRotationMinSpeed !== speed) {\n        this._particleRotationSpeedDirty = true;\n        this.particleRotationMinSpeed = speed;\n      }\n    }\n\n    getParticleRotationMinSpeed(): number {\n      return this.particleRotationMinSpeed;\n    }\n\n    setParticleRotationMaxSpeed(speed: number): void {\n      if (this.particleRotationMaxSpeed !== speed) {\n        this._particleRotationSpeedDirty = true;\n        this.particleRotationMaxSpeed = speed;\n      }\n    }\n\n    getParticleRotationMaxSpeed(): number {\n      return this.particleRotationMaxSpeed;\n    }\n\n    setMaxParticlesCount(count: number): void {\n      if (this.maxParticlesCount !== count) {\n        this._maxParticlesCountDirty = true;\n        this.maxParticlesCount = count;\n      }\n    }\n\n    getMaxParticlesCount(): number {\n      return this.maxParticlesCount;\n    }\n\n    setAdditiveRendering(enabled: boolean) {\n      if (this.additiveRendering !== enabled) {\n        this._additiveRenderingDirty = true;\n        this.additiveRendering = enabled;\n      }\n    }\n\n    getAdditiveRendering(): boolean {\n      return this.additiveRendering;\n    }\n\n    /**\n     * @deprecated Prefer using getAngle\n     */\n    getEmitterAngle(): float {\n      return (this.angleA + this.angleB) / 2.0;\n    }\n\n    /**\n     * @deprecated Prefer using setAngle\n     */\n    setEmitterAngle(angle: float): void {\n      const oldAngle = this.getEmitterAngle();\n      if (angle !== oldAngle) {\n        this._angleDirty = true;\n        this.angleA += angle - oldAngle;\n        this.angleB += angle - oldAngle;\n      }\n    }\n\n    /**\n     * @deprecated This function returns data that is not used.\n     */\n    getEmitterAngleA(): float {\n      return this.angleA;\n    }\n\n    /**\n     * @deprecated This function sets data that is not used.\n     */\n    setEmitterAngleA(angle: float): void {\n      if (this.angleA !== angle) {\n        this._angleDirty = true;\n        this.angleA = angle;\n      }\n    }\n\n    getEmitterAngleB(): float {\n      return this.angleB;\n    }\n\n    setEmitterAngleB(angle: float): void {\n      if (this.angleB !== angle) {\n        this._angleDirty = true;\n        this.angleB = angle;\n      }\n    }\n\n    getConeSprayAngle(): float {\n      return this.getEmitterAngleB();\n    }\n\n    setConeSprayAngle(angle: float): void {\n      this.setEmitterAngleB(angle);\n    }\n\n    getZoneRadius(): float {\n      return this.zoneRadius;\n    }\n\n    setZoneRadius(radius: float): void {\n      if (radius < 0) {\n        radius = 0;\n      }\n      if (this.zoneRadius !== radius && radius > 0) {\n        this._zoneRadiusDirty = true;\n        this.zoneRadius = radius;\n      }\n    }\n\n    getParticleLifeTimeMin(): float {\n      return this.lifeTimeMin;\n    }\n\n    setParticleLifeTimeMin(lifeTime: float): void {\n      if (lifeTime < 0) {\n        lifeTime = 0;\n      }\n      if (this.lifeTimeMin !== lifeTime) {\n        this._lifeTimeDirty = true;\n        this.lifeTimeMin = lifeTime;\n      }\n    }\n\n    getParticleLifeTimeMax(): float {\n      return this.lifeTimeMax;\n    }\n\n    setParticleLifeTimeMax(lifeTime: float): void {\n      if (lifeTime < 0) {\n        lifeTime = 0;\n      }\n      if (this.lifeTimeMax !== lifeTime) {\n        this._lifeTimeDirty = true;\n        this.lifeTimeMax = lifeTime;\n      }\n    }\n\n    getParticleGravityX(): float {\n      return this.gravityX;\n    }\n\n    setParticleGravityX(x: float): void {\n      if (this.gravityX !== x) {\n        this._gravityDirty = true;\n        this.gravityX = x;\n      }\n    }\n\n    getParticleGravityY(): float {\n      return this.gravityY;\n    }\n\n    setParticleGravityY(y: float): void {\n      if (this.gravityY !== y) {\n        this._gravityDirty = true;\n        this.gravityY = y;\n      }\n    }\n\n    getParticleGravityAngle(): float {\n      return (Math.atan2(this.gravityY, this.gravityX) * 180.0) / Math.PI;\n    }\n\n    setParticleGravityAngle(angle: float): void {\n      const oldAngle = this.getParticleGravityAngle();\n      if (oldAngle !== angle) {\n        this._gravityDirty = true;\n        const length = this.getParticleGravityLength();\n        this.gravityX = length * Math.cos((angle * Math.PI) / 180.0);\n        this.gravityY = length * Math.sin((angle * Math.PI) / 180.0);\n      }\n    }\n\n    getParticleGravityLength(): float {\n      return Math.sqrt(\n        this.gravityX * this.gravityX + this.gravityY * this.gravityY\n      );\n    }\n\n    setParticleGravityLength(length: float): void {\n      if (length < 0) {\n        length = 0;\n      }\n      const oldLength = this.getParticleGravityLength();\n      if (oldLength !== length) {\n        this._gravityDirty = true;\n        this.gravityX *= length / oldLength;\n        this.gravityY *= length / oldLength;\n      }\n    }\n\n    getParticleRed1(): number {\n      return this.colorR1;\n    }\n\n    setParticleRed1(red: number): void {\n      if (red < 0) {\n        red = 0;\n      }\n      if (red > 255) {\n        red = 255;\n      }\n      if (this.colorR1 !== red) {\n        this._colorDirty = true;\n        this.colorR1 = red;\n      }\n    }\n\n    getParticleRed2(): number {\n      return this.colorR2;\n    }\n\n    setParticleRed2(red: number): void {\n      if (red < 0) {\n        red = 0;\n      }\n      if (red > 255) {\n        red = 255;\n      }\n      if (this.colorR2 !== red) {\n        this._colorDirty = true;\n        this.colorR2 = red;\n      }\n    }\n\n    getParticleGreen1(): number {\n      return this.colorG1;\n    }\n\n    setParticleGreen1(green: number): void {\n      if (green < 0) {\n        green = 0;\n      }\n      if (green > 255) {\n        green = 255;\n      }\n      if (this.colorG1 !== green) {\n        this._colorDirty = true;\n        this.colorG1 = green;\n      }\n    }\n\n    getParticleGreen2(): number {\n      return this.colorG2;\n    }\n\n    setParticleGreen2(green: number): void {\n      if (green < 0) {\n        green = 0;\n      }\n      if (green > 255) {\n        green = 255;\n      }\n      if (this.colorG2 !== green) {\n        this._colorDirty = true;\n        this.colorG2 = green;\n      }\n    }\n\n    getParticleBlue1(): number {\n      return this.colorB1;\n    }\n\n    setParticleBlue1(blue: number): void {\n      if (blue < 0) {\n        blue = 0;\n      }\n      if (blue > 255) {\n        blue = 255;\n      }\n      if (this.colorB1 !== blue) {\n        this._colorDirty = true;\n        this.colorB1 = blue;\n      }\n    }\n\n    getParticleBlue2(): number {\n      return this.colorB2;\n    }\n\n    setParticleBlue2(blue: number): void {\n      if (blue < 0) {\n        blue = 0;\n      }\n      if (blue > 255) {\n        blue = 255;\n      }\n      if (this.colorB2 !== blue) {\n        this._colorDirty = true;\n        this.colorB2 = blue;\n      }\n    }\n\n    setParticleColor1(rgbColor: string): void {\n      const colors = rgbColor.split(';');\n      if (colors.length < 3) {\n        return;\n      }\n      this.setParticleRed1(parseInt(colors[0], 10));\n      this.setParticleGreen1(parseInt(colors[1], 10));\n      this.setParticleBlue1(parseInt(colors[2], 10));\n    }\n\n    setParticleColor2(rgbColor: string): void {\n      const colors = rgbColor.split(';');\n      if (colors.length < 3) {\n        return;\n      }\n      this.setParticleRed2(parseInt(colors[0], 10));\n      this.setParticleGreen2(parseInt(colors[1], 10));\n      this.setParticleBlue2(parseInt(colors[2], 10));\n    }\n\n    getParticleSize1(): float {\n      return this.size1;\n    }\n\n    setParticleSize1(size: float): void {\n      if (size < 0) {\n        size = 0;\n      }\n      if (this.size1 !== size) {\n        this._sizeDirty = true;\n        this.size1 = size;\n      }\n    }\n\n    getParticleSize2(): float {\n      return this.size2;\n    }\n\n    setParticleSize2(size: float): void {\n      if (this.size2 !== size) {\n        this._sizeDirty = true;\n        this.size2 = size;\n      }\n    }\n\n    getParticleAlpha1(): number {\n      return this.alpha1;\n    }\n\n    setParticleAlpha1(alpha: number): void {\n      if (this.alpha1 !== alpha) {\n        this._alphaDirty = true;\n        this.alpha1 = alpha;\n      }\n    }\n\n    getParticleAlpha2(): number {\n      return this.alpha2;\n    }\n\n    setParticleAlpha2(alpha: number): void {\n      if (this.alpha2 !== alpha) {\n        this._alphaDirty = true;\n        this.alpha2 = alpha;\n      }\n    }\n\n    startEmission(): void {\n      this._renderer.start();\n    }\n\n    stopEmission(): void {\n      this._renderer.stop();\n    }\n\n    isEmitting(): boolean {\n      return this._renderer.emitter.emit;\n    }\n\n    noMoreParticles(): boolean {\n      return !this.isEmitting();\n    }\n\n    recreateParticleSystem(): void {\n      this._renderer.recreate();\n    }\n\n    getFlow(): number {\n      return this.flow;\n    }\n\n    setFlow(flow: number): void {\n      if (this.flow !== flow) {\n        this.flow = flow;\n        this._flowDirty = true;\n      }\n    }\n\n    getParticleCount(): number {\n      return this._renderer.getParticleCount();\n    }\n\n    getTank(): number {\n      return this.tank;\n    }\n\n    setTank(tank: number): void {\n      this.tank = tank;\n      this._tankDirty = true;\n    }\n\n    getTexture(): string {\n      return this.texture;\n    }\n\n    setTexture(\n      texture: string,\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): void {\n      if (this.texture !== texture) {\n        if (this._renderer.isTextureNameValid(texture, instanceContainer)) {\n          this.texture = texture;\n          this._textureDirty = true;\n        }\n      }\n    }\n\n    jumpEmitterForwardInTime(timeSkipped: number): void {\n      this._renderer.update(timeSkipped);\n    }\n  }\n  gdjs.registerObject(\n    'ParticleSystem::ParticleEmitter',\n    gdjs.ParticleEmitterObject\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
