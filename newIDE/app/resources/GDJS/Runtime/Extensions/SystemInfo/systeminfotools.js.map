{
  "version": 3,
  "sources": ["../../../../../../../Extensions/SystemInfo/systeminfotools.ts"],
  "sourcesContent": ["/*\n * GDevelop - SystemInfo Extension\n * Copyright (c) 2016-present Florian Rival (Florian.Rival@gmail.com)\n */\nnamespace gdjs {\n  export namespace evtTools {\n    export namespace systemInfo {\n      let cachedHasTouchScreen: boolean | null = null;\n\n      /**\n       * Check if the game runs on a mobile device (iPhone, iPad, Android).\n       * Note that the distinction between what is a mobile device and what is not\n       * is becoming blurry. If you use this for mobile controls,\n       * prefer to check if the device has touchscreen support.\n       */\n      export const isMobile = (): boolean => {\n        return gdjs.evtTools.common.isMobile();\n      };\n\n      /**\n       * Check if the game is running as a native mobile app - which in the case\n       * of an exported GDevelop game means: running packaged inside Cordova/Capacitor.js.\n       *\n       * Note: this could be improved to also detect running inside an embedded webview.\n       *\n       * @returns true if running inside Cordova (or Capacitor.js).\n       */\n      export const isNativeMobileApp = (): boolean => {\n        return typeof window !== 'undefined' && (window as any).cordova;\n      };\n\n      /**\n       * Check if the game is running as a native desktop app - which in the case\n       * of an exported GDevelop game means: running packaged inside Electron.\n       *\n       * @param instanceContainer The current scene.\n       * @returns true if running inside Electron.\n       */\n      export const isNativeDesktopApp = (\n        instanceContainer: gdjs.RuntimeInstanceContainer\n      ): boolean => {\n        return !!instanceContainer.getGame().getRenderer().getElectron();\n      };\n\n      const checkHasTouchScreen = (): boolean => {\n        // First check if the device is mobile, as all mobile devices have a touchscreen\n        // and some older browsers don't have support for `navigator.maxTouchPoints`\n        if (isMobile()) {\n          return true;\n        }\n        return !!navigator.maxTouchPoints && navigator.maxTouchPoints > 2;\n      };\n\n      /**\n       * Check if the device has a touchscreen\n       */\n      export const hasTouchScreen = () => {\n        if (cachedHasTouchScreen !== null) {\n          return cachedHasTouchScreen;\n        }\n        return (cachedHasTouchScreen = checkHasTouchScreen());\n      };\n\n      /**\n       * Check if the the device supports WebGL.\n       * @returns true if WebGL is supported\n       */\n      export const isWebGLSupported = (\n        instanceContainer: gdjs.RuntimeInstanceContainer\n      ): boolean => {\n        return instanceContainer.getGame().getRenderer().isWebGLSupported();\n      };\n\n      /**\n       * Check if the game is running as a preview, launched from an editor.\n       * @param instanceContainer The current container.\n       * @returns true if the game is running as a preview.\n       */\n      export const isPreview = (\n        instanceContainer: gdjs.RuntimeInstanceContainer\n      ): boolean => {\n        return instanceContainer.getGame().isPreview();\n      };\n    }\n  }\n}\n"],
  "mappings": "AAIA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CACE,GAAU,GAAV,UAAU,EAAV,CACL,GAAI,GAAuC,KAQpC,AAAM,WAAW,IACf,EAAK,SAAS,OAAO,WAWjB,oBAAoB,IACxB,MAAO,SAAW,aAAgB,OAAe,QAU7C,qBAAqB,AAChC,GAEO,CAAC,CAAC,EAAkB,UAAU,cAAc,cAGrD,KAAM,GAAsB,IAGtB,aACK,GAEF,CAAC,CAAC,UAAU,gBAAkB,UAAU,eAAiB,EAM3D,AAAM,iBAAiB,IACxB,IAAyB,KACpB,EAED,EAAuB,IAOpB,mBAAmB,AAC9B,GAEO,EAAkB,UAAU,cAAc,mBAQtC,YAAY,AACvB,GAEO,EAAkB,UAAU,cA3EtB,qCADF,iCADT",
  "names": []
}
