{
  "version": 3,
  "sources": ["../../../../../../../Extensions/ExampleJsExtension/dummyruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Dummy object');\n\n  /**\n   * A dummy object doing showing a text on screen.\n   * @ignore\n   */\n  export class DummyRuntimeObject extends gdjs.RuntimeObject {\n    // Load any required data from the object properties.\n    _property1: string;\n\n    // Create the renderer (see dummyruntimeobject-pixi-renderer.js)\n    _renderer: any;\n    // @ts-expect-error ts-migrate(2564) FIXME: Property 'opacity' has no initializer and is not d... Remove this comment to see the full error message\n    opacity: float;\n\n    constructor(instanceContainer: gdjs.RuntimeInstanceContainer, objectData) {\n      // *ALWAYS* call the base gdjs.RuntimeObject constructor.\n      super(instanceContainer, objectData);\n      this._property1 = objectData.content.property1;\n      this._renderer = new gdjs.DummyRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    updateFromObjectData(oldObjectData, newObjectData): boolean {\n      // Compare previous and new data for the object and update it accordingly.\n      // This is useful for \"hot-reloading\".\n      if (oldObjectData.content.property1 !== newObjectData.content.property1) {\n        this._property1 = newObjectData.content.property1;\n        this._renderer.updateText();\n      }\n      return true;\n    }\n\n    /**\n     * Called once during the game loop, before events and rendering.\n     * @param instanceContainer The gdjs.RuntimeScene the object belongs to.\n     */\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      // This is an example: typically you want to make sure the renderer\n      // is up to date with the object.\n      this._renderer.ensureUpToDate();\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {}\n\n    // For example:\n    // this.setSomething(initialInstanceData.something);\n    /**\n     * Update the object position.\n     */\n    private _updatePosition() {\n      // This is an example: typically you want to tell the renderer to update\n      // the position of the object.\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set object position on X axis.\n     */\n    setX(x: float): void {\n      // Always call the parent method first.\n      super.setX(x);\n      this._updatePosition();\n    }\n\n    /**\n     * Set object position on Y axis.\n     */\n    setY(y: float): void {\n      // Always call the parent method first.\n      super.setY(y);\n      this._updatePosition();\n    }\n\n    /**\n     * Set the angle of the object.\n     * @param angle The new angle of the object\n     */\n    setAngle(angle: float): void {\n      // Always call the parent method first.\n      super.setAngle(angle);\n\n      // Tell the renderer to update the rendered object\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     */\n    setOpacity(opacity): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this.opacity = opacity;\n\n      // Tell the renderer to update the rendered object\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity() {\n      return this.opacity;\n    }\n\n    /**\n     * Get the text that must be displayed by the dummy object.\n     */\n    getText() {\n      return this._property1;\n    }\n\n    /**\n     * A dummy method that can be called from events\n     */\n    myMethod(number1: float, text1: string) {\n      logger.log('Congrats, this method was called on a DummyRuntimeObject');\n      logger.log('Here is the object:', this);\n      logger.log('Here are the arguments passed from events:', number1, text1);\n    }\n  }\n  gdjs.registerObject(\n    //Replace by your extension + object name.\n    'MyDummyExtension::DummyObject',\n    gdjs.DummyRuntimeObject\n  );\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,gBAMxB,eAAiC,GAAK,aAAc,CASzD,YAAY,EAAkD,EAAY,CAExE,MAAM,EAAmB,GACzB,KAAK,WAAa,EAAW,QAAQ,UACrC,KAAK,UAAY,GAAI,GAAK,2BACxB,KACA,GAIF,KAAK,YAGP,mBAAoB,CAClB,MAAO,MAAK,UAAU,oBAGxB,qBAAqB,EAAe,EAAwB,CAG1D,MAAI,GAAc,QAAQ,YAAc,EAAc,QAAQ,WAC5D,MAAK,WAAa,EAAc,QAAQ,UACxC,KAAK,UAAU,cAEV,GAOT,OAAO,EAAwD,CAG7D,KAAK,UAAU,iBAMjB,uCAAuC,EAAmC,EAOlE,iBAAkB,CAGxB,KAAK,UAAU,iBAMjB,KAAK,EAAgB,CAEnB,MAAM,KAAK,GACX,KAAK,kBAMP,KAAK,EAAgB,CAEnB,MAAM,KAAK,GACX,KAAK,kBAOP,SAAS,EAAoB,CAE3B,MAAM,SAAS,GAGf,KAAK,UAAU,cAMjB,WAAW,EAAe,CACxB,AAAI,EAAU,GACZ,GAAU,GAER,EAAU,KACZ,GAAU,KAEZ,KAAK,QAAU,EAGf,KAAK,UAAU,gBAMjB,YAAa,CACX,MAAO,MAAK,QAMd,SAAU,CACR,MAAO,MAAK,WAMd,SAAS,EAAgB,EAAe,CACtC,EAAO,IAAI,4DACX,EAAO,IAAI,sBAAuB,MAClC,EAAO,IAAI,6CAA8C,EAAS,IAhI/D,EAAM,qBAmIb,EAAK,eAEH,gCACA,EAAK,sBA7IC",
  "names": []
}
