{
  "version": 3,
  "sources": ["../../../../../../../Extensions/ExampleJsExtension/examplejsextensiontools.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Example extension');\n\n  export namespace evtTools {\n    /**\n     * This is an example of some functions that can be used through events.\n     * They could live on any object but it's usual to store them in an object\n     * with the extension name in `gdjs.evtTools`.\n     *\n     * Functions are being passed the arguments that were declared in the extension.\n     */\n    export namespace exampleJsExtension {\n      export const myConditionFunction = function (number, text) {\n        return number <= 10 && text.length < 5;\n      };\n\n      export const getString = function () {\n        return 'Hello World';\n      };\n\n      // You can store global information, data, etc... directly in the namespace of your extension:\n      let myGlobalString = 'Hello World';\n\n      /**\n       * In **rare cases** you may want to run code at the start of the scene. You can define a callback\n       * that will be called at this moment.\n       */\n      gdjs.registerRuntimeSceneLoadedCallback(function (\n        runtimeScene: gdjs.RuntimeScene\n      ) {\n        logger.log('A gdjs.RuntimeScene was loaded:', runtimeScene);\n      });\n\n      /**\n       * In **rare cases** you may want to run code at the end of a scene. You can define a callback\n       * that will be called at this moment.\n       */\n      gdjs.registerRuntimeSceneUnloadedCallback(function (\n        runtimeScene: gdjs.RuntimeScene\n      ) {\n        logger.log('A gdjs.RuntimeScene was unloaded:', runtimeScene);\n      });\n\n      /**\n       * In **very rare cases** you may want to run code whenever an object is deleted.\n       */\n      gdjs.registerObjectDeletedFromSceneCallback(function (\n        instanceContainer: gdjs.RuntimeInstanceContainer,\n        runtimeObject\n      ) {\n        logger.log(\n          'A gdjs.RuntimeObject was deleted from a gdjs.RuntimeScene:',\n          instanceContainer,\n          runtimeObject\n        );\n      });\n\n      // Finally, note that you can also simply run code here. Most of the time you shouldn't need it though.\n      logger.log(\n        'gdjs.exampleJsExtension was created, with myGlobalString containing:' +\n          myGlobalString\n      );\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,qBAExB,GAAU,GAAV,UAAU,EAAV,CAQE,GAAU,GAAV,UAAU,EAAV,CACE,AAAM,sBAAsB,SAAU,EAAQ,EAAM,CACzD,MAAO,IAAU,IAAM,EAAK,OAAS,GAG1B,YAAY,UAAY,CACnC,MAAO,eAIT,GAAI,GAAiB,cAMrB,EAAK,mCAAmC,SACtC,EACA,CACA,EAAO,IAAI,kCAAmC,KAOhD,EAAK,qCAAqC,SACxC,EACA,CACA,EAAO,IAAI,oCAAqC,KAMlD,EAAK,uCAAuC,SAC1C,EACA,EACA,CACA,EAAO,IACL,6DACA,EACA,KAKJ,EAAO,IACL,uEACE,KAjDW,qDARF,iCAHT",
  "names": []
}
