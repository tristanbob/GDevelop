{
  "version": 3,
  "sources": ["../../../../../../../Extensions/FileSystem/filesystemtools.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Filesystem');\n  export namespace fileSystem {\n    // The Node.js path module, or null if it can't be loaded.\n    const path: typeof import('path') | null =\n      typeof require !== 'undefined' ? require('path') : null;\n    // The Node.js fs module, or null if it can't be loaded.\n    const fs: typeof import('fs') | null =\n      typeof require !== 'undefined' ? require('fs') : null;\n    const asyncFs: typeof import('fs/promises') | null =\n      typeof require !== 'undefined' ? require('fs/promises') : null;\n\n    if (!fs)\n      logger.warn(\n        'Filesystem is not supported on this platform! Only PC builds support filesystem access.'\n      );\n\n    export const getDirectoryName = function (fileOrFolderPath: string) {\n      if (!path) {\n        return '';\n      }\n      return path.dirname(fileOrFolderPath);\n    };\n\n    export const getFileName = function (filePath: string) {\n      if (!path) {\n        return '';\n      }\n      return path.basename(filePath);\n    };\n\n    export const getExtensionName = function (filePath: string) {\n      if (!path) {\n        return '';\n      }\n      return path.extname(filePath);\n    };\n\n    /**\n     * Get the path to 'Desktop' folder.\n     * @param instanceContainer The current container\n     * @return The path to the desktop folder\n     */\n    export const getDesktopPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('desktop') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to 'Documents' folder.\n     * @param instanceContainer The current container\n     * @return The path to the documents folder\n     */\n    export const getDocumentsPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('documents') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to 'Pictures' folder.\n     * @param instanceContainer The current container\n     * @return The path to the pictures folder\n     */\n    export const getPicturesPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('pictures') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to this application 'Executable' file.\n     * @param instanceContainer The current container\n     * @return The path to this applications executable file\n     */\n    export const getExecutablePath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('exe') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to this application 'Executable' folder.\n     * @param instanceContainer The current container\n     * @return The path to this applications executable folder\n     */\n    export const getExecutableFolderPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const executablePath = getExecutablePath(instanceContainer);\n      if (!path) {\n        return '';\n      }\n      return path.dirname(executablePath);\n    };\n\n    /**\n     * Get the path to 'UserData' folder.\n     * @param instanceContainer The current container\n     * @return The path to userdata folder\n     */\n    export const getUserdataPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('userData') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to the user's home folder (on Windows `C:\\Users\\<USERNAME>\\` for example).\n     * @return The path to user's \"home\" folder\n     */\n    export const getUserHomePath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('home') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path to 'Temp' folder.\n     * @param instanceContainer The current container\n     * @return The path to temp folder\n     */\n    export const getTempPath = function (\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): string {\n      const remote = instanceContainer\n        .getGame()\n        .getRenderer()\n        .getElectronRemote();\n      const app = remote ? remote.app : null;\n      if (app) {\n        return app.getPath('temp') || '';\n      } else {\n        return '';\n      }\n    };\n\n    /**\n     * Get the path delimiter specific to the operating system.\n     * @return The path delimiter\n     */\n    export const getPathDelimiter = function (): string {\n      if (path) {\n        return path.sep || '/';\n      } else {\n        return '/';\n      }\n    };\n\n    /**\n     * Create a new directory at the given path.\n     * @param directory The path to create a new directory\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const makeDirectory = function (\n      directory: string,\n      resultVar: gdjs.Variable\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          fs.mkdirSync(directory);\n          result = 'ok';\n        } catch (err) {\n          logger.error(\n            \"Unable to create directory at: '\" + directory + \"': \",\n            err\n          );\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    export const makeDirectoryAsync = (\n      directory: string,\n      resultVar: gdjs.Variable\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .mkdir(directory, { recursive: true })\n              .then(() => {\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to create directory at: '\" + directory + \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Save a string into a file, asynchronously.\n     * @param text The string to be saved\n     * @param savePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const saveStringToFileAsync = function (\n      text: string,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      if (fs) {\n        fs.writeFile(savePath, text, 'utf8', (err) => {\n          resultVar.setString('ok');\n          if (err) {\n            logger.error(\n              \"Unable to save the text to path: '\" + savePath + \"': \",\n              err\n            );\n            resultVar.setString('error');\n          }\n        });\n      }\n    };\n\n    export const saveStringToFileAsyncTask = (\n      text: string,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .writeFile(savePath, text, { encoding: 'utf8' })\n              .then(() => {\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to save the text to path: '\" + savePath + \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Save a string into a file.\n     * @param text The string to be saved\n     * @param savePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const saveStringToFile = function (\n      text: string,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          fs.writeFileSync(savePath, text, 'utf8');\n          result = 'ok';\n        } catch (err) {\n          logger.error(\n            \"Unable to save the text to path: '\" + savePath + \"': \",\n            err\n          );\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    /**\n     * Save a variable into a file in JSON format.\n     * @param variable The variable to be saved\n     * @param savePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const saveVariableToJSONFile = function (\n      variable: gdjs.Variable,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          fs.writeFileSync(\n            savePath,\n            JSON.stringify(variable.toJSObject()),\n            'utf8'\n          );\n          result = 'ok';\n        } catch (err) {\n          logger.error(\n            \"Unable to save the variable to path: '\" + savePath + \"': \",\n            err\n          );\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    /**\n     * Save a variable into a file in JSON format, asynchronously.\n     * @param variable The variable to be saved\n     * @param savePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const saveVariableToJSONFileAsync = function (\n      variable: gdjs.Variable,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      if (fs) {\n        fs.writeFile(\n          savePath,\n          JSON.stringify(variable.toJSObject()),\n          'utf8',\n          (err) => {\n            resultVar.setString('ok');\n            if (err) {\n              logger.error(\n                \"Unable to save the variable to path: '\" + savePath + \"': \",\n                err\n              );\n              resultVar.setString('error');\n            }\n          }\n        );\n      }\n    };\n\n    export const saveVariableToJSONFileAsyncTask = (\n      variable: gdjs.Variable,\n      savePath: string,\n      resultVar: gdjs.Variable\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .writeFile(savePath, JSON.stringify(variable.toJSObject()), {\n                encoding: 'utf8',\n              })\n              .then(() => {\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to save the text to path: '\" + savePath + \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Load a string from a file into a scene variable.\n     * @param stringVar Variable where to store the content\n     * @param loadPath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     * @param removeCRCharacters If true, will remove \\r characters usually added by Windows when editing files\n     */\n    export const loadStringFromFile = function (\n      stringVar: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          const data = fs.readFileSync(loadPath, 'utf8');\n          if (data) {\n            stringVar.setString(\n              removeCRCharacters ? data.replace(/\\r/g, '') : data\n            );\n            result = 'ok';\n          }\n        } catch (err) {\n          logger.error(\n            \"Unable to load the file at path: '\" + loadPath + \"': \",\n            err\n          );\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    /**\n     * Load a JSON file and convert it into a variable.\n     * @param variable Variable to store the variable\n     * @param loadPath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     * @param removeCRCharacters If true, will remove \\r characters usually added by Windows when editing files\n     */\n    export const loadVariableFromJSONFile = function (\n      variable: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          const data = fs.readFileSync(loadPath, 'utf8');\n          if (data) {\n            variable.fromJSON(\n              removeCRCharacters ? data.replace(/\\r/g, '') : data\n            );\n            result = 'ok';\n          }\n        } catch (err) {\n          logger.error(\n            \"Unable to load variable from the file at path: '\" +\n              loadPath +\n              \"': \",\n            err\n          );\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    /**\n     * Load a JSON file and convert it into a variable, asynchronously.\n     * @param variable Variable to store the variable\n     * @param loadPath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     * @param removeCRCharacters If true, will remove \\r characters usually added by Windows when editing files\n     */\n    export const loadVariableFromJSONFileAsync = function (\n      variable: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) {\n      if (fs) {\n        fs.readFile(loadPath, 'utf8', (err, data) => {\n          if (data) {\n            variable.fromJSON(\n              removeCRCharacters ? data.replace(/\\r/g, '') : data\n            );\n            resultVar.setString('ok');\n          }\n          if (err) {\n            logger.error(\n              \"Unable to load variable from the file at path: '\" +\n                loadPath +\n                \"': \",\n              err\n            );\n            resultVar.setString('error');\n          }\n        });\n      }\n    };\n\n    export const loadVariableFromJSONFileAsyncTask = (\n      variable: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .readFile(loadPath, { encoding: 'utf8' })\n              .then((data) => {\n                if (data)\n                  variable.fromJSON(\n                    removeCRCharacters ? data.replace(/\\r/g, '') : data\n                  );\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to load the JSON file from path: '\" +\n                    loadPath +\n                    \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Load a string from a file into a scene variable, asynchronously.\n     * @param stringVar Variable where to store the content\n     * @param loadPath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     * @param removeCRCharacters If true, will remove \\r characters usually added by Windows when editing files\n     */\n    export const loadStringFromFileAsync = function (\n      stringVar: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) {\n      if (fs) {\n        fs.readFile(loadPath, 'utf8', (err, data) => {\n          if (data) {\n            stringVar.setString(\n              removeCRCharacters ? data.replace(/\\r/g, '') : data\n            );\n            resultVar.setString('ok');\n          }\n          if (err) {\n            logger.error(\n              \"Unable to load the file at path: '\" + loadPath + \"': \",\n              err\n            );\n            resultVar.setString('error');\n          }\n        });\n      }\n    };\n\n    export const loadStringFromFileAsyncTask = (\n      variable: gdjs.Variable,\n      loadPath: string,\n      resultVar: gdjs.Variable,\n      removeCRCharacters: boolean\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .readFile(loadPath, { encoding: 'utf8' })\n              .then((data) => {\n                if (data)\n                  variable.setString(\n                    removeCRCharacters ? data.replace(/\\r/g, '') : data\n                  );\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to load the text file from path: '\" +\n                    loadPath +\n                    \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Delete a file from the filesystem.\n     * @param filePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const deleteFile = function (\n      filePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      let result = 'error';\n      if (fs) {\n        try {\n          fs.unlinkSync(filePath);\n          result = 'ok';\n        } catch (err) {\n          logger.error(\"Unable to delete the file: '\" + filePath + \"': \", err);\n          result = 'error';\n        }\n      }\n      resultVar.setString(result);\n    };\n\n    /**\n     * Delete a file from the filesystem, asynchronously.\n     * @param filePath Path to the file\n     * @param resultVar The variable where to store the result of the operation\n     */\n    export const deleteFileAsync = function (\n      filePath: string,\n      resultVar: gdjs.Variable\n    ) {\n      if (fs) {\n        fs.unlink(filePath, (err) => {\n          resultVar.setString('ok');\n          if (err) {\n            logger.error(\n              \"Unable to delete the file: '\" + filePath + \"': \",\n              err\n            );\n            resultVar.setString('error');\n          }\n        });\n      }\n    };\n\n    export const deleteFileAsyncTask = (\n      filePath: string,\n      resultVar: gdjs.Variable\n    ) =>\n      asyncFs\n        ? new gdjs.PromiseTask(\n            asyncFs\n              .rm(filePath, { recursive: true })\n              .then(() => {\n                resultVar.setString('ok');\n              })\n              .catch((err) => {\n                resultVar.setString('error');\n                logger.error(\n                  \"Unable to delete the file: '\" + filePath + \"': \",\n                  err\n                );\n              })\n          )\n        : (resultVar.setString('error'), new gdjs.ResolveTask());\n\n    /**\n     * Check if the file or directory exists.\n     * @param filePath The path to the file or directory\n     * @return true if fhe file or directory exists\n     */\n    export const pathExists = function (filePath: string): boolean {\n      if (fs) {\n        return fs.existsSync(filePath);\n      } else {\n        return false;\n      }\n    };\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,cACxB,GAAU,GAAV,UAAU,EAAV,CAEL,KAAM,GACJ,MAAO,UAAY,YAAc,QAAQ,QAAU,KAE/C,EACJ,MAAO,UAAY,YAAc,QAAQ,MAAQ,KAC7C,EACJ,MAAO,UAAY,YAAc,QAAQ,eAAiB,KAE5D,AAAK,GACH,EAAO,KACL,2FAGS,mBAAmB,SAAU,EAA0B,CAClE,MAAK,GAGE,EAAK,QAAQ,GAFX,IAKE,cAAc,SAAU,EAAkB,CACrD,MAAK,GAGE,EAAK,SAAS,GAFZ,IAKE,mBAAmB,SAAU,EAAkB,CAC1D,MAAK,GAGE,EAAK,QAAQ,GAFX,IAUE,iBAAiB,SAC5B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,YAAc,IAWxB,mBAAmB,SAC9B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,cAAgB,IAW1B,kBAAkB,SAC7B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,aAAe,IAWzB,oBAAoB,SAC/B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,QAAU,IAWpB,0BAA0B,SACrC,EACQ,CACR,KAAM,GAAiB,oBAAkB,GACzC,MAAK,GAGE,EAAK,QAAQ,GAFX,IAUE,kBAAkB,SAC7B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,aAAe,IAUzB,kBAAkB,SAC7B,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,SAAW,IAWrB,cAAc,SACzB,EACQ,CACR,KAAM,GAAS,EACZ,UACA,cACA,oBACG,EAAM,EAAS,EAAO,IAAM,KAClC,MAAI,IACK,EAAI,QAAQ,SAAW,IAUrB,mBAAmB,UAAoB,CAClD,MAAI,IACK,EAAK,KAAO,KAWV,gBAAgB,SAC3B,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,EAAG,UAAU,GACb,EAAS,WACF,EAAP,CACA,EAAO,MACL,mCAAqC,EAAY,MACjD,GAIN,EAAU,UAAU,IAGT,qBAAqB,CAChC,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,MAAM,EAAW,CAAE,UAAW,KAC9B,KAAK,IAAM,CACV,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,mCAAqC,EAAY,MACjD,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aAQjC,wBAAwB,SACnC,EACA,EACA,EACA,CACA,AAAI,GACF,EAAG,UAAU,EAAU,EAAM,OAAQ,AAAC,GAAQ,CAC5C,EAAU,UAAU,MAChB,GACF,GAAO,MACL,qCAAuC,EAAW,MAClD,GAEF,EAAU,UAAU,aAMf,4BAA4B,CACvC,EACA,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,UAAU,EAAU,EAAM,CAAE,SAAU,SACtC,KAAK,IAAM,CACV,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,qCAAuC,EAAW,MAClD,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aAQjC,mBAAmB,SAC9B,EACA,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,EAAG,cAAc,EAAU,EAAM,QACjC,EAAS,WACF,EAAP,CACA,EAAO,MACL,qCAAuC,EAAW,MAClD,GAIN,EAAU,UAAU,IAST,yBAAyB,SACpC,EACA,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,EAAG,cACD,EACA,KAAK,UAAU,EAAS,cACxB,QAEF,EAAS,WACF,EAAP,CACA,EAAO,MACL,yCAA2C,EAAW,MACtD,GAIN,EAAU,UAAU,IAST,8BAA8B,SACzC,EACA,EACA,EACA,CACA,AAAI,GACF,EAAG,UACD,EACA,KAAK,UAAU,EAAS,cACxB,OACA,AAAC,GAAQ,CACP,EAAU,UAAU,MAChB,GACF,GAAO,MACL,yCAA2C,EAAW,MACtD,GAEF,EAAU,UAAU,aAOjB,kCAAkC,CAC7C,EACA,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,UAAU,EAAU,KAAK,UAAU,EAAS,cAAe,CAC1D,SAAU,SAEX,KAAK,IAAM,CACV,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,qCAAuC,EAAW,MAClD,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aASjC,qBAAqB,SAChC,EACA,EACA,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,KAAM,GAAO,EAAG,aAAa,EAAU,QACvC,AAAI,GACF,GAAU,UACR,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEjD,EAAS,YAEJ,EAAP,CACA,EAAO,MACL,qCAAuC,EAAW,MAClD,GAIN,EAAU,UAAU,IAUT,2BAA2B,SACtC,EACA,EACA,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,KAAM,GAAO,EAAG,aAAa,EAAU,QACvC,AAAI,GACF,GAAS,SACP,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEjD,EAAS,YAEJ,EAAP,CACA,EAAO,MACL,mDACE,EACA,MACF,GAIN,EAAU,UAAU,IAUT,gCAAgC,SAC3C,EACA,EACA,EACA,EACA,CACA,AAAI,GACF,EAAG,SAAS,EAAU,OAAQ,CAAC,EAAK,IAAS,CAC3C,AAAI,GACF,GAAS,SACP,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEjD,EAAU,UAAU,OAElB,GACF,GAAO,MACL,mDACE,EACA,MACF,GAEF,EAAU,UAAU,aAMf,oCAAoC,CAC/C,EACA,EACA,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,SAAS,EAAU,CAAE,SAAU,SAC/B,KAAK,AAAC,GAAS,CACd,AAAI,GACF,EAAS,SACP,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEnD,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,4CACE,EACA,MACF,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aASjC,0BAA0B,SACrC,EACA,EACA,EACA,EACA,CACA,AAAI,GACF,EAAG,SAAS,EAAU,OAAQ,CAAC,EAAK,IAAS,CAC3C,AAAI,GACF,GAAU,UACR,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEjD,EAAU,UAAU,OAElB,GACF,GAAO,MACL,qCAAuC,EAAW,MAClD,GAEF,EAAU,UAAU,aAMf,8BAA8B,CACzC,EACA,EACA,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,SAAS,EAAU,CAAE,SAAU,SAC/B,KAAK,AAAC,GAAS,CACd,AAAI,GACF,EAAS,UACP,EAAqB,EAAK,QAAQ,MAAO,IAAM,GAEnD,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,4CACE,EACA,MACF,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aAOjC,aAAa,SACxB,EACA,EACA,CACA,GAAI,GAAS,QACb,GAAI,EACF,GAAI,CACF,EAAG,WAAW,GACd,EAAS,WACF,EAAP,CACA,EAAO,MAAM,+BAAiC,EAAW,MAAO,GAChE,EAAS,QAGb,EAAU,UAAU,IAQT,kBAAkB,SAC7B,EACA,EACA,CACA,AAAI,GACF,EAAG,OAAO,EAAU,AAAC,GAAQ,CAC3B,EAAU,UAAU,MAChB,GACF,GAAO,MACL,+BAAiC,EAAW,MAC5C,GAEF,EAAU,UAAU,aAMf,sBAAsB,CACjC,EACA,IAEA,EACI,GAAI,GAAK,YACP,EACG,GAAG,EAAU,CAAE,UAAW,KAC1B,KAAK,IAAM,CACV,EAAU,UAAU,QAErB,MAAM,AAAC,GAAQ,CACd,EAAU,UAAU,SACpB,EAAO,MACL,+BAAiC,EAAW,MAC5C,MAIP,GAAU,UAAU,SAAU,GAAI,GAAK,aAOjC,aAAa,SAAU,EAA2B,CAC7D,MAAI,GACK,EAAG,WAAW,GAEd,MA/pBI,qCAFT",
  "names": []
}
