{
  "version": 3,
  "sources": ["../../../../../../../Extensions/AdMob/admobtools.ts"],
  "sourcesContent": ["namespace gdjs {\n  declare var admob: any;\n  declare var cordova: any;\n\n  export namespace adMob {\n    const logger = new gdjs.Logger('AdMob');\n\n    const testAdIds = {\n      appOpen: {\n        android: 'ca-app-pub-3940256099942544/3419835294',\n        ios: 'ca-app-pub-3940256099942544/5662855259',\n      },\n      banner: {\n        android: 'ca-app-pub-3940256099942544/6300978111',\n        ios: 'ca-app-pub-3940256099942544/2934735716',\n      },\n      interstitial: {\n        android: 'ca-app-pub-3940256099942544/1033173712',\n        ios: 'ca-app-pub-3940256099942544/4411468910',\n      },\n      interstitialVideo: {\n        android: 'ca-app-pub-3940256099942544/8691691433',\n        ios: 'ca-app-pub-3940256099942544/5135589807',\n      },\n      rewarded: {\n        android: 'ca-app-pub-3940256099942544/5224354917',\n        ios: 'ca-app-pub-3940256099942544/1712485313',\n      },\n      rewardedInterstitial: {\n        android: 'ca-app-pub-3940256099942544/5354046379',\n        ios: 'ca-app-pub-3940256099942544/6978759866',\n      },\n      native: {\n        android: 'ca-app-pub-3940256099942544/2247696110',\n        ios: 'ca-app-pub-3940256099942544/3986624511',\n      },\n      nativeVideo: {\n        android: 'ca-app-pub-3940256099942544/1044960115',\n        ios: 'ca-app-pub-3940256099942544/2521693316',\n      },\n    };\n\n    enum AdSizeType {\n      BANNER,\n      LARGE_BANNER,\n      MEDIUM_RECTANGLE,\n      FULL_BANNER,\n      LEADERBOARD,\n      SMART_BANNER,\n    }\n\n    const adSizeTypes = {\n      BANNER: AdSizeType.BANNER,\n      LARGE_BANNER: AdSizeType.LARGE_BANNER,\n      MEDIUM_RECTANGLE: AdSizeType.MEDIUM_RECTANGLE,\n      FULL_BANNER: AdSizeType.FULL_BANNER,\n      LEADERBOARD: AdSizeType.LEADERBOARD,\n      SMART_BANNER: AdSizeType.SMART_BANNER,\n    };\n\n    enum AppOpenAdOrientation {\n      Portrait = 1,\n      PortraitUpsideDown = 2,\n      LandscapeRight = 3,\n      LandscapeLeft = 4,\n    }\n\n    // Admob does not initialize automatically, so we store a flag to know if it's initialized.\n    let admobStarted = false;\n    let isUsingTestAds = false;\n\n    // Banner\n    let banner;\n    let bannerRequestedAdSizeType: AdSizeType = AdSizeType.SMART_BANNER;\n    let bannerConfigured = false; // Becomes true when the user configures the ad id and the position of the banner.\n    let bannerLoaded = false; // Becomes true when the banner is loaded by loaded.\n    let bannerShowing = false; // Becomes true when loaded or when the user shows/hides the banner.\n    let bannerErrored = false; // Becomes true when the banner fails to load.\n\n    // Interstitial\n    let interstitial;\n    let interstitialLoading = false; // Becomes true when the interstitial is loading.\n    let interstitialReady = false; // Becomes true when the interstitial is loaded and ready to be shown.\n    let interstitialShowing = false; // Becomes true when the interstitial is showing.\n    let interstitialErrored = false; // Becomes true when the interstitial fails to load.\n\n    // App Open\n    let appOpen;\n    let appOpenLoading = false; // Becomes true when the appOpen is loading.\n    let appOpenReady = false; // Becomes true when the appOpen is loaded and ready to be shown.\n    let appOpenShowing = false; // Becomes true when the appOpen is showing.\n    let appOpenErrored = false; // Becomes true when the appOpen fails to load.\n\n    // Rewarded interstitial\n    let rewardedInterstitial;\n    let rewardedInterstitialLoading = false; // Becomes true when the interstitial is loading.\n    let rewardedInterstitialReady = false; // Becomes true when the interstitial is loaded and ready to be shown.\n    let rewardedInterstitialShowing = false; // Becomes true when the interstitial is showing.\n    let rewardedInterstitialRewardReceived = false; // Becomes true when the interstitial is closed and the reward is received.\n    let rewardedInterstitialErrored = false; // Becomes true when the interstitial fails to load.\n\n    // Rewarded video\n    let rewardedVideo;\n    let rewardedVideoLoading = false; // Becomes true when the video is loading.\n    let rewardedVideoReady = false; // Becomes true when the video is loaded and ready to be shown.\n    let rewardedVideoShowing = false; // Becomes true when the video is showing.\n    let rewardedVideoRewardReceived = false; // Becomes true when the video is closed and the reward is received.\n    let rewardedVideoErrored = false; // Becomes true when the video fails to load.\n\n    let npaValue = '0'; // TODO: expose an API to change this and also an automatic way using the consent SDK.\n\n    // Admob initialization listener\n    document.addEventListener(\n      'deviceready',\n      async () => {\n        // Obtain user consent ?\n\n        await admob.start();\n\n        logger.info('AdMob successfully started.');\n        admobStarted = true;\n      },\n      false\n    );\n\n    /**\n     * Helper to know if we are on mobile and admob is correctly initialized.\n     */\n    const checkIfAdMobIsAvailable = () => {\n      if (typeof cordova === 'undefined') {\n        logger.warn('We are not on mobile, AdMob will not be available.');\n        return false;\n      }\n      if (typeof admob === 'undefined' || !admobStarted) {\n        logger.warn('AdMob has not been configured or started properly.');\n        return false;\n      }\n      return true;\n    };\n\n    /**\n     * Helper to get the correct ad id depending on the platform. Android and iOS use different ids.\n     */\n    const getAdUnitId = (androidAdUnitId, iosAdUnitId, type) => {\n      if (typeof cordova === 'undefined') {\n        logger.warn('Cordova is not available.');\n        return;\n      }\n      if (cordova.platformId === 'android') {\n        return isUsingTestAds ? testAdIds[type].android : androidAdUnitId;\n      } else if (cordova.platformId === 'ios') {\n        return isUsingTestAds ? testAdIds[type].ios : iosAdUnitId;\n      }\n\n      logger.error('Unsupported platform: ', cordova.platformId);\n      return null;\n    };\n\n    /**\n     * Activate or deactivate the test mode (\"development\" mode).\n     * When activated, tests ads will be served instead of real ones.\n     *\n     * It is important to enable test ads during development so that you can click on them without\n     * charging advertisers. If you click on too many ads without being in test mode, you risk your\n     * account being flagged for invalid activity.\n     */\n    export const setTestMode = (enable: boolean) => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      isUsingTestAds = enable;\n    };\n\n    // -------------------\n    // ---- App Open -----\n    // -------------------\n    export const isAppOpenLoading = () => appOpenLoading;\n    export const isAppOpenReady = () => appOpenReady;\n    export const isAppOpenShowing = () => appOpenShowing;\n    export const isAppOpenErrored = () => appOpenErrored;\n\n    /** Load an AppOpen. */\n    export const loadAppOpen = async (\n      androidAdUnitId,\n      iosAdUnitId,\n      displayLandscape,\n      displayWhenLoaded\n    ) => {\n      if (!checkIfAdMobIsAvailable()) return;\n      // If an appOpen is already loading or showing, we don't stop it.\n      if (appOpenLoading || appOpenShowing) {\n        return;\n      }\n\n      const adUnitId = getAdUnitId(androidAdUnitId, iosAdUnitId, 'appOpen');\n      if (!adUnitId) return;\n\n      appOpenLoading = true;\n      appOpenReady = false;\n      appOpenErrored = false;\n\n      appOpen = new admob.AppOpenAd({\n        adUnitId,\n        orientation: displayLandscape\n          ? AppOpenAdOrientation.LandscapeLeft\n          : AppOpenAdOrientation.Portrait,\n      });\n\n      appOpen.on('load', () => {\n        appOpenReady = true;\n        appOpenLoading = false;\n      });\n      appOpen.on('loadfail', () => {\n        appOpenLoading = false;\n        appOpenErrored = true;\n      });\n      appOpen.on('show', () => {\n        appOpenShowing = true;\n        appOpenReady = false;\n      });\n      appOpen.on('showfail', () => {\n        appOpenShowing = false;\n        appOpenErrored = true;\n      });\n      appOpen.on('dismiss', () => {\n        appOpenShowing = false;\n      });\n\n      try {\n        logger.info('Loading Admob App Open.');\n        await appOpen.load();\n        logger.info('AdMob App Open successfully loaded.');\n        appOpenLoading = false;\n        appOpenReady = true;\n        if (displayWhenLoaded) showAppOpen();\n      } catch (error) {\n        logger.error('Error while loading an App Open:', error);\n        appOpenLoading = false;\n        appOpenReady = false;\n        appOpenErrored = true;\n      }\n    };\n\n    /** Show the loaded appOpen. */\n    export const showAppOpen = async () => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      if (!appOpen) {\n        logger.warn('App Open has not been set up, call loadAppOpen first.');\n        return;\n      }\n      if (!appOpenReady) {\n        logger.info('App Open not loaded yet, cannot display it.');\n        return;\n      }\n      appOpenErrored = false;\n\n      try {\n        logger.info('Showing AdMob App Open.');\n        await appOpen.show();\n        // AppOpen will be shown and\n        // `appOpenShowing` will be updated thanks to events\n        // (but it's too early to change it now).\n      } catch (error) {\n        logger.error('Error while showing an AdMob App Open:', error);\n        appOpenShowing = false;\n        appOpenErrored = true;\n      }\n    };\n\n    // -----------------\n    // ---- Banner -----\n    // -----------------\n    export const isBannerConfigured = () => bannerConfigured;\n    export const isBannerLoaded = () => bannerLoaded;\n    export const isBannerShowing = () => bannerShowing;\n    export const isBannerErrored = () => bannerErrored;\n\n    export const setBannerAdSizeType = (\n      bannerAdSizeType:\n        | 'BANNER'\n        | 'LARGE_BANNER'\n        | 'MEDIUM_RECTANGLE'\n        | 'FULL_BANNER'\n        | 'LEADERBOARD'\n        | 'SMART_BANNER'\n    ) => {\n      bannerRequestedAdSizeType =\n        adSizeTypes[bannerAdSizeType] || AdSizeType.SMART_BANNER;\n    };\n\n    /**\n     * Set up a banner that can then be displayed by calling `showBanner`.\n     * If a banner is already set up, it will be hidden and replaced by the new one.\n     */\n    export const setupBanner = async (androidAdUnitId, iosAdUnitId, atTop) => {\n      if (!checkIfAdMobIsAvailable()) return;\n      const adUnitId = getAdUnitId(androidAdUnitId, iosAdUnitId, 'banner');\n      if (!adUnitId) return;\n\n      if (banner && bannerShowing) {\n        logger.info('Banner already visible, hiding it to display new one.');\n        await hideBanner();\n      }\n\n      bannerConfigured = false;\n      bannerLoaded = false;\n\n      banner = new admob.BannerAd({\n        adUnitId,\n        position: atTop ? 'top' : 'bottom',\n        size: bannerRequestedAdSizeType,\n      });\n\n      banner.on('load', () => {\n        bannerShowing = true;\n        bannerLoaded = true;\n      });\n      banner.on('loadfail', () => {\n        bannerShowing = false;\n        bannerLoaded = false;\n        bannerErrored = true;\n      });\n\n      bannerConfigured = true;\n    };\n\n    /**\n     * Display a banner that was set up with `setupBanner` (and `setBannerAdSizeType`).\n     */\n    export const showBanner = async () => {\n      if (!banner) {\n        logger.info('Banner not configured, use setupBanner first.');\n        return;\n      }\n      if (bannerShowing) {\n        logger.info('Banner already visible. Ignoring.');\n        return;\n      }\n      bannerErrored = false;\n\n      try {\n        logger.info('Showing AdMob banner.');\n        await banner.show();\n        if (bannerLoaded) {\n          // Banner is already loaded, so it will be shown immediately.\n          bannerShowing = true;\n        }\n      } catch (error) {\n        bannerShowing = false;\n        bannerErrored = true;\n        logger.error('Error while showing an AdMob banner:', error);\n      }\n    };\n\n    /** Hide the banner shown on screen. */\n    export const hideBanner = async () => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      if (!banner || !bannerShowing) {\n        logger.warn('No banner is being shown.');\n        return;\n      }\n\n      await banner.hide();\n      bannerShowing = false;\n      // Note that the banner is still loaded, which is why bannerLoaded is not set to false.\n      // We hide the banner, but keep it configured to display it again if needed.\n    };\n\n    // -----------------------\n    // ---- Interstitial -----\n    // -----------------------\n    export const isInterstitialLoading = () => interstitialLoading;\n    export const isInterstitialReady = () => interstitialReady;\n    export const isInterstitialShowing = () => interstitialShowing;\n    export const isInterstitialErrored = () => interstitialErrored;\n\n    /** Load an interstitial. */\n    export const loadInterstitial = async (\n      androidAdUnitId,\n      iosAdUnitId,\n      displayWhenLoaded\n    ) => {\n      if (!checkIfAdMobIsAvailable()) return;\n      // If an interstitial is already loading or showing, we don't stop it.\n      if (interstitialLoading || interstitialShowing) {\n        return;\n      }\n\n      const adUnitId = getAdUnitId(\n        androidAdUnitId,\n        iosAdUnitId,\n        'interstitial'\n      );\n      if (!adUnitId) return;\n\n      interstitialLoading = true;\n      interstitialReady = false;\n      interstitialErrored = false;\n\n      interstitial = new admob.InterstitialAd({\n        adUnitId,\n        npa: npaValue,\n      });\n\n      interstitial.on('load', () => {\n        interstitialReady = true;\n        interstitialLoading = false;\n      });\n      interstitial.on('loadfail', () => {\n        interstitialLoading = false;\n        interstitialErrored = true;\n      });\n      interstitial.on('show', () => {\n        interstitialShowing = true;\n        interstitialReady = false;\n      });\n      interstitial.on('showfail', () => {\n        interstitialShowing = false;\n        interstitialErrored = true;\n      });\n      interstitial.on('dismiss', () => {\n        interstitialShowing = false;\n      });\n\n      try {\n        logger.info('Loading Admob interstitial.');\n        await interstitial.load();\n        logger.info('AdMob interstitial successfully loaded.');\n        interstitialLoading = false;\n        interstitialReady = true;\n        if (displayWhenLoaded) showInterstitial();\n      } catch (error) {\n        logger.error('Error while loading a interstitial:', error);\n        interstitialLoading = false;\n        interstitialReady = false;\n        interstitialErrored = true;\n      }\n    };\n\n    /** Show the loaded interstitial. */\n    export const showInterstitial = async () => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      if (!interstitial) {\n        logger.warn(\n          'Interstitial has not been set up, call loadInterstitial first.'\n        );\n        return;\n      }\n      if (!interstitialReady) {\n        logger.info('Interstitial not loaded yet, cannot display it.');\n        return;\n      }\n      interstitialErrored = false;\n\n      try {\n        logger.info('Showing AdMob interstitial.');\n        await interstitial.show();\n        // Interstitial will be shown and\n        // `interstitialShowing` will be updated thanks to events\n        // (but it's too early to change it now).\n      } catch (error) {\n        logger.error('Error while showing an AdMob interstitial:', error);\n        interstitialShowing = false;\n        interstitialErrored = true;\n      }\n    };\n\n    // --------------------------------\n    // ---- Rewarded Interstitial -----\n    // --------------------------------\n    export const isRewardedInterstitialLoading = () =>\n      rewardedInterstitialLoading;\n    export const isRewardedInterstitialReady = () => rewardedInterstitialReady;\n    export const isRewardedInterstitialShowing = () =>\n      rewardedInterstitialShowing;\n    export const isRewardedInterstitialErrored = () =>\n      rewardedInterstitialErrored;\n\n    /** Check if the reward of the rewarded interstitial was received. */\n    export const wasRewardedInterstitialRewardReceived = function (\n      markAsClaimed\n    ) {\n      const reward = rewardedInterstitialRewardReceived;\n      if (markAsClaimed) {\n        rewardedInterstitialRewardReceived = false;\n      }\n      return reward;\n    };\n\n    /** Load a rewarded interstitial. */\n    export const loadRewardedInterstitial = async (\n      androidAdUnitID,\n      iosAdUnitID,\n      displayWhenLoaded\n    ) => {\n      if (!checkIfAdMobIsAvailable()) return;\n      if (rewardedInterstitialLoading || rewardedInterstitialShowing) {\n        return;\n      }\n\n      const adUnitId = getAdUnitId(\n        androidAdUnitID,\n        iosAdUnitID,\n        'rewardedInterstitial'\n      );\n      if (!adUnitId) return;\n\n      rewardedInterstitialLoading = true;\n      rewardedInterstitialReady = false;\n      rewardedInterstitialErrored = false;\n\n      rewardedInterstitial = new admob.RewardedInterstitialAd({\n        adUnitId,\n        npa: npaValue,\n      });\n\n      // Rewarded video event listeners\n      rewardedInterstitial.on('load', () => {\n        rewardedInterstitialReady = true;\n        rewardedInterstitialLoading = false;\n      });\n      rewardedInterstitial.on('loadfail', () => {\n        rewardedInterstitialLoading = false;\n        rewardedInterstitialErrored = true;\n      });\n      rewardedInterstitial.on('show', () => {\n        rewardedInterstitialShowing = true;\n        rewardedInterstitialReady = false;\n      });\n      rewardedInterstitial.on('showfail', () => {\n        rewardedInterstitialShowing = false;\n        rewardedInterstitialErrored = true;\n      });\n      rewardedInterstitial.on('dismiss', () => {\n        rewardedInterstitialShowing = false;\n      });\n      rewardedInterstitial.on('reward', () => {\n        rewardedInterstitialRewardReceived = true;\n      });\n\n      try {\n        logger.info('Loading AdMob rewarded interstitial.');\n        await rewardedInterstitial.load();\n        logger.info('AdMob rewarded interstitial successfully loaded.');\n        rewardedInterstitialLoading = false;\n        rewardedInterstitialReady = true;\n        if (displayWhenLoaded) showRewardedInterstitial();\n      } catch (error) {\n        rewardedInterstitialLoading = false;\n        rewardedInterstitialReady = false;\n        rewardedInterstitialErrored = true;\n        logger.error('Error while loading a rewarded interstitial:', error);\n      }\n    };\n\n    /** Show the loaded reward interstitial. */\n    export const showRewardedInterstitial = async () => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      if (!rewardedInterstitial) {\n        logger.warn(\n          'interstitial has not been set up, call loadRewardedInterstitial first.'\n        );\n        return;\n      }\n      if (!rewardedInterstitialReady) {\n        logger.info('Rewarded interstitial not loaded yet, cannot display it.');\n      }\n      rewardedInterstitialErrored = false;\n\n      try {\n        logger.info('Showing AdMob rewarded interstitial.');\n        await rewardedInterstitial.show();\n        // Rewarded interstitial will be shown and\n        // `rewardedInterstitialShowing` will be updated thanks to events\n        // (but it's too early to change it now).\n      } catch (error) {\n        logger.error(\n          'Error while showing an AdMob rewarded interstitial:',\n          error\n        );\n        rewardedInterstitialShowing = false;\n        rewardedInterstitialErrored = true;\n      }\n    };\n\n    /** Mark the reward of the interstitial as claimed. */\n    export const markRewardedInterstitialRewardAsClaimed = () => {\n      rewardedInterstitialRewardReceived = false;\n    };\n\n    // -------------------------\n    // ---- Rewarded Video -----\n    // -------------------------\n    export const isRewardedVideoLoading = () => rewardedVideoLoading;\n    export const isRewardedVideoReady = () => rewardedVideoReady;\n    export const isRewardedVideoShowing = () => rewardedVideoShowing;\n    export const isRewardedVideoErrored = () => rewardedVideoErrored;\n\n    /** Check if the reward of the rewarded video was received. */\n    export const wasRewardedVideoRewardReceived = function (markAsClaimed) {\n      const reward = rewardedVideoRewardReceived;\n      if (markAsClaimed) {\n        rewardedVideoRewardReceived = false;\n      }\n      return reward;\n    };\n\n    /** Load a rewarded video. */\n    export const loadRewardedVideo = async (\n      androidAdUnitID,\n      iosAdUnitID,\n      displayWhenLoaded\n    ) => {\n      if (!checkIfAdMobIsAvailable()) return;\n      if (rewardedVideoLoading || rewardedVideoShowing) {\n        return;\n      }\n\n      const adUnitId = getAdUnitId(androidAdUnitID, iosAdUnitID, 'rewarded');\n      if (!adUnitId) return;\n\n      rewardedVideoLoading = true;\n      rewardedVideoReady = false;\n      rewardedVideoErrored = false;\n\n      rewardedVideo = new admob.RewardedAd({\n        adUnitId,\n        npa: npaValue,\n      });\n\n      // Rewarded video event listeners\n      rewardedVideo.on('load', () => {\n        rewardedVideoReady = true;\n        rewardedVideoLoading = false;\n      });\n      rewardedVideo.on('loadfail', () => {\n        rewardedVideoLoading = false;\n        rewardedVideoErrored = true;\n      });\n      rewardedVideo.on('show', () => {\n        rewardedVideoShowing = true;\n        rewardedVideoReady = false;\n      });\n      rewardedVideo.on('showfail', () => {\n        rewardedVideoShowing = false;\n        rewardedVideoErrored = true;\n      });\n      rewardedVideo.on('dismiss', () => {\n        rewardedVideoShowing = false;\n      });\n      rewardedVideo.on('reward', () => {\n        rewardedVideoRewardReceived = true;\n      });\n\n      try {\n        logger.info('Loading AdMob rewarded video.');\n        await rewardedVideo.load();\n        logger.info('AdMob rewarded video successfully loaded.');\n        rewardedVideoLoading = false;\n        rewardedVideoReady = true;\n        if (displayWhenLoaded) showRewardedVideo();\n      } catch (error) {\n        rewardedVideoLoading = false;\n        rewardedVideoReady = false;\n        rewardedVideoErrored = true;\n        logger.error('Error while loading a rewarded video:', error);\n      }\n    };\n\n    /** Show the loaded reward video. */\n    export const showRewardedVideo = async () => {\n      if (!checkIfAdMobIsAvailable()) return;\n\n      if (!rewardedVideo) {\n        logger.warn('Video has not been set up, call loadRewardedVideo first.');\n        return;\n      }\n      if (!rewardedVideoReady) {\n        logger.info('Rewarded video not loaded yet, cannot display it.');\n      }\n      rewardedVideoErrored = false;\n\n      try {\n        logger.info('Showing AdMob rewarded video.');\n        await rewardedVideo.show();\n        // Rewarded video will be shown and\n        // `rewardedVideoShowing` will be updated thanks to events\n        // (but it's too early to change it now).\n      } catch (error) {\n        logger.error('Error while showing an AdMob rewarded video:', error);\n        rewardedVideoShowing = false;\n        rewardedVideoErrored = true;\n      }\n    };\n\n    /** Mark the reward of the video as claimed. */\n    export const markRewardedVideoRewardAsClaimed = () => {\n      rewardedVideoRewardReceived = false;\n    };\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
