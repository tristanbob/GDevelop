{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/D_storagetools.ts"],
  "sourcesContent": ["namespace gdjs {\n  export namespace evtTools {\n    export namespace firebaseTools {\n      /**\n       * Firebase Storage Event Tools\n       * @namespace\n       */\n      export namespace storage {\n        /**\n         * The map containing all current uploads.\n         */\n        export const uploads = new Map<string, firebase.storage.UploadTask>();\n\n        /**\n         * Uploads a file as string to the firebase storage bucket.\n         * @param file - The entire file as string.\n         * @param onlinePath - The path under wich the file will be accessible on the bucket.\n         * @param [type] - The type/format of the string to upload.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         * @param [callbackValueVariable] - The variable where to store the result (url to the file).\n         */\n        export const uploadFile = (\n          uploadID: string,\n          file: string,\n          onlinePath: string,\n          type?: 'none' | 'base64' | 'base64url' | 'data_url',\n          callbackStateVariable?: gdjs.Variable,\n          callbackValueVariable?: gdjs.Variable\n        ) => {\n          try {\n            var uploadTask = firebase\n              .storage()\n              .ref(onlinePath)\n              .putString(file, type === 'none' ? undefined : type);\n          } catch (e) {\n            if (typeof callbackStateVariable !== 'undefined')\n              callbackStateVariable.setString(e.message);\n            return;\n          }\n\n          uploads.set(uploadID, uploadTask);\n          uploadTask.on(\n            firebase.storage.TaskEvent.STATE_CHANGED,\n            () => {},\n            (error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            },\n            () => {\n              // Free memory from the finished upload task\n              uploads.delete(uploadID);\n\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n\n              if (typeof callbackValueVariable !== 'undefined')\n                uploadTask.snapshot.ref\n                  .getDownloadURL()\n                  .then((url) => callbackValueVariable.setString(url));\n            }\n          );\n        };\n\n        /**\n         * Generate a download URL for a file.\n         * @param filePath - The path in the remote storage bucket to the file to download.\n         * @param [callbackValueVariable] - The variable where to store the result.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const getDownloadURL = (\n          filePath: string,\n          callbackValueVariable?: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .storage()\n            .ref(filePath)\n            .getDownloadURL()\n            .then(function (downloadURL) {\n              if (typeof callbackValueVariable !== 'undefined')\n                callbackValueVariable.setString(downloadURL);\n\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch(function (error) {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Deletes a file on the remote storage bucket.\n         * @param filePath - The path in the remote storage bucket to the file to download.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const deleteFile = (\n          filePath: string,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .storage()\n            .ref(filePath)\n            .delete()\n            .then(function () {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch(function (error) {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n      }\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CACE,GAAU,GAAV,UAAU,EAAV,CAKE,GAAU,GAAV,UAAU,EAAV,CAIE,AAAM,UAAU,GAAI,KAUd,aAAa,CACxB,EACA,EACA,EACA,EACA,EACA,IACG,CACH,GAAI,CACF,GAAI,GAAa,SACd,UACA,IAAI,GACJ,UAAU,EAAM,IAAS,OAAS,OAAY,SAC1C,EAAP,CACA,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,EAAE,SACpC,OAGF,UAAQ,IAAI,EAAU,GACtB,EAAW,GACT,SAAS,QAAQ,UAAU,cAC3B,IAAM,GACN,AAAC,GAAU,CACT,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,EAAM,UAE1C,IAAM,CAEJ,UAAQ,OAAO,GAEX,MAAO,IAA0B,aACnC,EAAsB,UAAU,MAE9B,MAAO,IAA0B,aACnC,EAAW,SAAS,IACjB,iBACA,KAAK,AAAC,GAAQ,EAAsB,UAAU,OAW5C,iBAAiB,CAC5B,EACA,EACA,IACG,CACH,SACG,UACA,IAAI,GACJ,iBACA,KAAK,SAAU,EAAa,CAC3B,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,GAE9B,MAAO,IAA0B,aACnC,EAAsB,UAAU,QAEnC,MAAM,SAAU,EAAO,CACtB,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,EAAM,YASjC,aAAa,CACxB,EACA,IACG,CACH,SACG,UACA,IAAI,GACJ,SACA,KAAK,UAAY,CAChB,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,QAEnC,MAAM,SAAU,EAAO,CACtB,AAAI,MAAO,IAA0B,aACnC,EAAsB,UAAU,EAAM,cAvG/B,+BALF,2CADF,iCADT",
  "names": []
}
