{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/D_authtools.ts"],
  "sourcesContent": ["namespace gdjs {\n  export namespace evtTools {\n    export namespace firebaseTools {\n      /**\n       * Firebase Authentication Event Tools.\n       * @namespace\n       */\n      export namespace auth {\n        type ProviderClass =\n          | typeof firebase.auth.GoogleAuthProvider\n          | typeof firebase.auth.FacebookAuthProvider\n          | typeof firebase.auth.GithubAuthProvider\n          | typeof firebase.auth.TwitterAuthProvider;\n        type ProviderInstance =\n          | firebase.auth.GoogleAuthProvider_Instance\n          | firebase.auth.FacebookAuthProvider_Instance\n          | firebase.auth.GithubAuthProvider_Instance\n          | firebase.auth.TwitterAuthProvider_Instance;\n        type ProviderName = 'google' | 'facebook' | 'github' | 'twitter';\n\n        /**\n         * Table of available external providers.\n         */\n        const providersList: Record<ProviderName, ProviderClass> = {\n          google: firebase.auth.GoogleAuthProvider,\n          facebook: firebase.auth.FacebookAuthProvider,\n          github: firebase.auth.GithubAuthProvider,\n          twitter: firebase.auth.TwitterAuthProvider,\n        };\n\n        /**\n         * The actual current token.\n         */\n        let _token = '';\n\n        /**\n         * The current auth provider for reauthenticating.\n         */\n        let _currentProvider: ProviderInstance | null = null;\n\n        /**\n         * The current authentication status.\n         */\n        export let authentified = false;\n\n        /**\n         * The logged-in users data.\n         */\n        export let currentUser: firebase.User | null = null;\n\n        /**\n         * A namespace containing tools for managing the current user.\n         * @namespace\n         */\n        export namespace userManagement {\n          /**\n           * Contains dangerous management functions. Requires reauthentication before usage.\n           * @namespace\n           */\n          export namespace dangerous {\n            /**\n             * Changes the users email.\n             * Use this when using basic auth.\n             * @param oldEmail - Old email for reauthentication.\n             * @param password - Old password for reauthentication.\n             * @param newEmail - New email for the user.\n             * @param [sendVerificationEmail] - Send a verification email to the old address before changing the email?\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const changeEmail = (\n              oldEmail: string,\n              password: string,\n              newEmail: string,\n              sendVerificationEmail: boolean = true,\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (!currentUser) return;\n\n              const credential = firebase.auth.EmailAuthProvider.credential(\n                oldEmail,\n                password\n              );\n              const updater = sendVerificationEmail\n                ? currentUser.updateEmail\n                : currentUser.verifyBeforeUpdateEmail;\n\n              currentUser\n                .reauthenticateWithCredential(credential)\n                .then(() => updater(newEmail))\n                .then(() => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString('ok');\n                })\n                .catch((error) => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString(error.message);\n                });\n            };\n\n            /**\n             * Changes the users password.\n             * Use this when using basic auth.\n             * @param email - Old email for reauthentication.\n             * @param oldPassword - Old password for reauthentication.\n             * @param newPassword - New password for the user.\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const changePassword = (\n              email: string,\n              oldPassword: string,\n              newPassword: string,\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (!currentUser) return;\n\n              const credential = firebase.auth.EmailAuthProvider.credential(\n                email,\n                oldPassword\n              );\n\n              currentUser\n                .reauthenticateWithCredential(credential)\n                .then(() => currentUser!.updatePassword(newPassword))\n                .then(() => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString('ok');\n                })\n                .catch((error) => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString(error.message);\n                });\n            };\n\n            /**\n             * Deletes the current user.\n             * Use this when using basic auth.\n             * @param email - Old email for reauthentication.\n             * @param password - Old password for reauthentication.\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const deleteUser = (\n              email: string,\n              password: string,\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (!currentUser) return;\n\n              const credential = firebase.auth.EmailAuthProvider.credential(\n                email,\n                password\n              );\n\n              currentUser\n                .reauthenticateWithCredential(credential)\n                .then(() => currentUser!.delete())\n                .then(() => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString('ok');\n                })\n                .catch((error) => {\n                  if (typeof callbackStateVariable !== 'undefined')\n                    callbackStateVariable.setString(error.message);\n                });\n            };\n\n            /**\n             * Changes the users email.\n             * Use this when using an external provider.\n             * @param newEmail - New email for the user.\n             * @param sendVerificationEmail - Send a verification email to the old address before changing the email?\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const changeEmailProvider = (\n              newEmail: string,\n              sendVerificationEmail: boolean,\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (!currentUser || !_currentProvider) return;\n\n              const updater = sendVerificationEmail\n                ? currentUser.updateEmail\n                : currentUser.verifyBeforeUpdateEmail;\n\n              currentUser\n                .reauthenticateWithPopup(_currentProvider)\n                .then(() => updater(newEmail))\n                .then(() => {\n                  if (typeof callbackStateVariable !== 'undefined') {\n                    callbackStateVariable.setString('ok');\n                  }\n                })\n                .catch((error) => {\n                  if (typeof callbackStateVariable !== 'undefined') {\n                    callbackStateVariable.setString(error.message);\n                  }\n                });\n            };\n            /**\n             * Changes the users password.\n             * Use this when using an external provider.\n             * @param newPassword - New password for the user.\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const changePasswordProvider = (\n              newPassword: string,\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (currentUser && _currentProvider)\n                currentUser\n                  .reauthenticateWithPopup(_currentProvider)\n                  .then(() => currentUser!.updatePassword(newPassword))\n                  .then(() => {\n                    if (typeof callbackStateVariable !== 'undefined')\n                      callbackStateVariable.setString('ok');\n                  })\n                  .catch((error) => {\n                    if (typeof callbackStateVariable !== 'undefined')\n                      callbackStateVariable.setString(error.message);\n                  });\n            };\n\n            /**\n             * Deletes the current user.\n             * Use this when using an external provider.\n             * @param [callbackStateVariable] - The variable where to store the result.\n             */\n            export const deleteUserProvider = (\n              callbackStateVariable?: gdjs.Variable\n            ) => {\n              if (currentUser && _currentProvider)\n                currentUser\n                  .reauthenticateWithPopup(_currentProvider)\n                  .then(() => currentUser!.delete())\n                  .then(() => {\n                    if (typeof callbackStateVariable !== 'undefined')\n                      callbackStateVariable.setString('ok');\n                  })\n                  .catch((error) => {\n                    if (typeof callbackStateVariable !== 'undefined')\n                      callbackStateVariable.setString(error.message);\n                  });\n            };\n          }\n          /**\n           * Verifies if the current users email is verified.\n           */\n          export const isEmailVerified = (): boolean =>\n            currentUser ? currentUser.emailVerified : false;\n\n          /**\n           * Gets the users email address.\n           */\n          export const getEmail = (): string =>\n            currentUser ? currentUser.email || '' : '';\n\n          /**\n           * Gets the creation date of the logged in users account.\n           */\n          export const getCreationTime = (): string =>\n            currentUser ? currentUser.metadata.creationTime || '' : '';\n\n          /**\n           * Gets the last login date of the logged in users account.\n           */\n          export const getLastLoginTime = (): string =>\n            currentUser ? currentUser.metadata.lastSignInTime || '' : '';\n\n          /**\n           * Gets the display name of the current user.\n           */\n          export const getDisplayName = (): string =>\n            currentUser ? currentUser.displayName || '' : '';\n\n          /**\n           * Gets the current users phone number.\n           */\n          export const getPhoneNumber = (): string =>\n            currentUser ? currentUser.phoneNumber || '' : '';\n\n          /**\n           * Gets the current users Unique IDentifier.\n           */\n          export const getUID = (): string =>\n            currentUser ? currentUser.uid || '' : '';\n\n          /**\n           * Gets the tenant ID.\n           * For advanced usage only.\n           */\n          export const getTenantID = (): string =>\n            currentUser ? currentUser.tenantId || '' : '';\n\n          /**\n           * Gets the refresh token.\n           * For advanced usage only.\n           */\n          export const getRefreshToken = (): string =>\n            currentUser ? currentUser.refreshToken || '' : '';\n\n          /**\n           * Gets the users profile picture URL.\n           */\n          export const getPhotoURL = (): string =>\n            currentUser ? currentUser.photoURL || '' : '';\n\n          /**\n           * Changes the display name of an user.\n           */\n          export const setDisplayName = (newDisplayName: string) => {\n            if (currentUser)\n              return currentUser.updateProfile({\n                displayName: newDisplayName,\n              });\n            return Promise.reject('Sign in before setting displayName');\n          };\n\n          /**\n           * Changes the URL to the profile picture of the user.\n           */\n          export const setPhotoURL = (newPhotoURL: string) => {\n            if (currentUser)\n              return currentUser.updateProfile({\n                photoURL: newPhotoURL,\n              });\n            return Promise.reject('Sign in before setting photoURL');\n          };\n\n          /**\n           * Send an email to the users email address to verify it.\n           * @note Even though this function is redundant, we keep it for consistency.\n           * @see currentUser.sendEmailVerification\n           */\n          export const sendVerificationEmail = () =>\n            currentUser ? currentUser.sendEmailVerification() : '';\n        }\n\n        /**\n         * Get the logged-in users authentication token.\n         * Tries to refresh it everytime the function is called.\n         */\n        export const token = (): string => {\n          if (currentUser)\n            currentUser.getIdToken().then((token) => (_token = token));\n          return _token;\n        };\n\n        /**\n         * Returns true if the user is currently authentified.\n         * @see authentified\n         */\n        export const isAuthentified = (): boolean => authentified;\n\n        /**\n         * Signs the user in with basic email-password authentication.\n         * @param email - The users email.\n         * @param password - The users password.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const signInWithEmail = (\n          email: string,\n          password: string,\n          callbackStateVariable?: gdjs.Variable\n        ) =>\n          firebase\n            .auth()\n            .signInWithEmailAndPassword(email, password)\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n\n        /**\n         * Creates an account with basic email-password authentication.\n         * @param email - The users email.\n         * @param password - The users password.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const createAccountWithEmail = (\n          email: string,\n          password: string,\n          callbackStateVariable?: gdjs.Variable\n        ) =>\n          firebase\n            .auth()\n            .createUserWithEmailAndPassword(email, password)\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n\n        /**\n         * Login with a temporary account.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const anonymSignIn = (callbackStateVariable?: gdjs.Variable) =>\n          firebase\n            .auth()\n            .signInAnonymously()\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n\n        /**\n         * Signs the user in with an external provider.\n         * Only works on the web, NOT on Electron/Cordova.\n         * @param providerName - The external provider to use.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const signInWithProvider = function (\n          providerName: ProviderName,\n          callbackStateVariable?: gdjs.Variable\n        ) {\n          _currentProvider = new providersList[providerName]();\n\n          firebase\n            .auth()\n            .signInWithPopup(_currentProvider)\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        // Listen to authentication state changes to regenerate tokens and keep the user and the authenticated state up to date\n        firebaseTools.onAppCreated.push(() => {\n          firebase.auth().onAuthStateChanged((user) => {\n            if (user) {\n              authentified = true;\n              currentUser = user;\n              user.getIdToken().then(\n                // Prefetch the token\n                (token) => (_token = token)\n              );\n            } else {\n              authentified = false;\n              currentUser = null;\n            }\n          });\n        });\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
