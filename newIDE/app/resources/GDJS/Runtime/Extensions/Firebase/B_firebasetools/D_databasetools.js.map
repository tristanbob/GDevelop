{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/D_databasetools.ts"],
  "sourcesContent": ["namespace gdjs {\n  export namespace evtTools {\n    export namespace firebaseTools {\n      /**\n       * Firebase Cloud database Event Tools.\n       * @namespace\n       */\n      export namespace database {\n        /**\n         * (Over)writes a variable in a collection as database variable.\n         * @param path - The path where to store the variable.\n         * @param variable - The variable to write.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const writeVariable = (\n          path: string,\n          variable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .set(variable.toJSObject())\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * (Over)writes a field of a database variable.\n         * @param path - The path where to write the field.\n         * @param field - What field to write.\n         * @param value - The value to write.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const writeField = (\n          path: string,\n          field: string,\n          value: string | number,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .set({ [field]: value })\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Updates a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param variable - The variable to update.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const updateVariable = (\n          path: string,\n          variable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .update(variable.toJSObject())\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Updates a field of a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param field - The field where to update.\n         * @param value - The value to write.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const updateField = (\n          path: string,\n          field: string,\n          value: string | number,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          const updateObject = {};\n          updateObject[field] = value;\n          firebase\n            .database()\n            .ref(path)\n            .update(updateObject)\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Deletes a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const deleteVariable = (\n          path: string,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .remove()\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Deletes a field of a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param field - The field to delete.\n         * @param [callbackStateVariable] - The variable where to store the result.\n         */\n        export const deleteField = (\n          path: string,\n          field: string,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          const updateObject = {};\n          updateObject[field] = null;\n          firebase\n            .database()\n            .ref(path)\n            .update(updateObject)\n            .then(() => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Gets a database variable and store it in a variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param callbackValueVariable - The variable where to store the result.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const getVariable = (\n          path: string,\n          callbackValueVariable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .once('value')\n            .then((snapshot) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n\n              if (typeof callbackValueVariable !== 'undefined')\n                callbackValueVariable.fromJSObject(snapshot.val());\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Gets a field of a database variable and store it in a variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param field - The field to get.\n         * @param callbackValueVariable - The variable where to store the result.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const getField = (\n          path: string,\n          field: string,\n          callbackValueVariable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .once('value')\n            .then((snapshot) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n\n              if (typeof callbackValueVariable !== 'undefined')\n                callbackValueVariable.fromJSObject(snapshot.val()[field]);\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Checks for existence of a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param callbackValueVariable - The variable where to store the result.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const hasVariable = (\n          path: string,\n          callbackValueVariable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .once('value')\n            .then((snapshot) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n\n              if (typeof callbackValueVariable !== 'undefined')\n                callbackValueVariable.setBoolean(\n                  snapshot.exists() &&\n                    snapshot.val() !== null &&\n                    snapshot.val() !== undefined\n                );\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n\n        /**\n         * Checks for existence of a database variable.\n         * @param path - The name under which the variable will be saved (document name).\n         * @param field - The field to check.\n         * @param callbackValueVariable - The variable where to store the result.\n         * @param [callbackStateVariable] - The variable where to store if the operation was successful.\n         */\n        export const hasField = (\n          path: string,\n          field: string,\n          callbackValueVariable: gdjs.Variable,\n          callbackStateVariable?: gdjs.Variable\n        ) => {\n          firebase\n            .database()\n            .ref(path)\n            .once('value')\n            .then((snapshot) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString('ok');\n\n              if (typeof callbackValueVariable !== 'undefined') {\n                const value = snapshot.val()[field];\n                callbackValueVariable.setBoolean(\n                  snapshot.exists() && value !== null && value !== undefined\n                );\n              }\n            })\n            .catch((error) => {\n              if (typeof callbackStateVariable !== 'undefined')\n                callbackStateVariable.setString(error.message);\n            });\n        };\n      }\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
