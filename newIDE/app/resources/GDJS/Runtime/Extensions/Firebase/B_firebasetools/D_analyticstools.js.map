{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/D_analyticstools.ts"],
  "sourcesContent": ["namespace gdjs {\n  export namespace evtTools {\n    export namespace firebaseTools {\n      /**\n       * Firebase Analytics Tools\n       * @namespace\n       */\n      export namespace analytics {\n        let analytics: firebase.analytics.Analytics | null = null;\n\n        /**\n         * Logs an event/conversion for that user on the analytics.\n         * @param eventName The event being triggered.\n         * @param [eventData] Additional data for the event.\n         */\n        export const log = (eventName: string, eventData: string): void => {\n          if (!analytics) return;\n          let eventProperties;\n          if (eventData) {\n            try {\n              eventProperties = JSON.parse(eventData);\n            } catch {\n              eventProperties = { eventData: eventData };\n            }\n          }\n          analytics.logEvent(eventName, eventProperties);\n        };\n\n        /**\n         * Sets the User ID (the name under which the user will appear on the analytics).\n         * Should be unique if possible.\n         * @param newUID The new User ID.\n         */\n        export const setUserID = (newUID: string): void => {\n          if (analytics) analytics.setUserId(newUID);\n        };\n\n        /**\n         * Set an user's property.\n         * @param propertyName The property's name.\n         * @param [propertyData] The data associated to the property.\n         */\n        export const setProperty = (\n          propertyName: string,\n          propertyData: string\n        ): void => {\n          if (!analytics) return;\n          let properties = {};\n          try {\n            properties[propertyName] = JSON.parse(propertyData);\n          } catch {\n            properties[propertyName] = propertyData;\n          }\n          analytics.setUserProperties(properties);\n        };\n\n        // Initialization step required by firebase analytics\n        gdjs.evtTools.firebaseTools.onAppCreated.push(() => {\n          analytics = firebase.analytics();\n        });\n\n        // Callback for setting the analytics current view to the current scene.\n        gdjs.registerRuntimeSceneLoadedCallback((runtimeScene) => {\n          if (analytics) analytics.setCurrentScreen(runtimeScene.getName());\n        });\n      }\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CACE,GAAU,GAAV,UAAU,EAAV,CAKE,GAAU,GAAV,UAAU,EAAV,CACL,GAAI,GAAiD,KAO9C,AAAM,MAAM,CAAC,EAAmB,IAA4B,CACjE,GAAI,CAAC,EAAW,OAChB,GAAI,GACJ,GAAI,EACF,GAAI,CACF,EAAkB,KAAK,MAAM,QAC7B,CACA,EAAkB,CAAE,UAAW,GAGnC,EAAU,SAAS,EAAW,IAQnB,YAAY,AAAC,GAAyB,CACjD,AAAI,GAAW,EAAU,UAAU,IAQxB,cAAc,CACzB,EACA,IACS,CACT,GAAI,CAAC,EAAW,OAChB,GAAI,GAAa,GACjB,GAAI,CACF,EAAW,GAAgB,KAAK,MAAM,QACtC,CACA,EAAW,GAAgB,EAE7B,EAAU,kBAAkB,IAI9B,EAAK,SAAS,cAAc,aAAa,KAAK,IAAM,CAClD,EAAY,SAAS,cAIvB,EAAK,mCAAmC,AAAC,GAAiB,CACxD,AAAI,GAAW,EAAU,iBAAiB,EAAa,eAxD1C,mCALF,2CADF,iCADT",
  "names": []
}
