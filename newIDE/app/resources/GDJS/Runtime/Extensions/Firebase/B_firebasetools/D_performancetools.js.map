{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/D_performancetools.ts"],
  "sourcesContent": ["namespace gdjs {\n  export namespace evtTools {\n    export namespace firebaseTools {\n      /**\n       * Firebase Performance Event Tools.\n       * @namespace\n       */\n      export namespace performance {\n        const logger = new gdjs.Logger('Firebase Performance Measuring');\n        const tracers = new Map<string, firebase.performance.Trace>();\n\n        /**\n         * Get a tracer (custom event) by name, if it doesn't exists create it.\n         * @param tracerName - The name of the tracer.\n         * @returns The tracer instance.\n         */\n        export const getTracer = (\n          tracerName: string\n        ): firebase.performance.Trace => {\n          if (!tracers.has(tracerName))\n            tracers.set(tracerName, firebase.performance().trace(tracerName));\n          return tracers.get(tracerName) as firebase.performance.Trace;\n        };\n\n        /**\n         * Start measuring performance for a custom event (tracer).\n         * @param tracerName - The name of the tracer.\n         */\n        export const startTracer = (tracerName: string) => {\n          try {\n            getTracer(tracerName).start();\n          } catch {\n            logger.error(\n              `Could not start tracer \"${tracerName}\". Make sure it is not already running!`\n            );\n          }\n        };\n\n        /**\n         * Stop measuring performance for a custom event (tracer).\n         * @param tracerName - The name of the tracer.\n         */\n        export const stopTracer = (tracerName: string) => {\n          getTracer(tracerName).stop();\n          tracers.delete(tracerName);\n        };\n\n        /**\n         * Record performance for a specific time.\n         * @param tracerName - The name of the tracer.\n         * @param delay - The delay before starting measuring.\n         * @param duration - The duration of the measuring.\n         */\n        export const recordPerformance = (\n          tracerName: string,\n          delay: float,\n          duration: number\n        ) => {\n          getTracer(tracerName).record(Date.now() + delay, duration);\n        };\n      }\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACS,GAAU,GAAV,UAAU,EAAV,CACE,GAAU,GAAV,UAAU,EAAV,CAKE,GAAU,GAAV,UAAU,EAAV,CACL,KAAM,GAAS,GAAI,GAAK,OAAO,kCACzB,EAAU,GAAI,KAOb,AAAM,YAAY,AACvB,GAEK,GAAQ,IAAI,IACf,EAAQ,IAAI,EAAY,SAAS,cAAc,MAAM,IAChD,EAAQ,IAAI,IAOR,cAAc,AAAC,GAAuB,CACjD,GAAI,CACF,YAAU,GAAY,aACtB,CACA,EAAO,MACL,2BAA2B,8CASpB,aAAa,AAAC,GAAuB,CAChD,YAAU,GAAY,OACtB,EAAQ,OAAO,IASJ,oBAAoB,CAC/B,EACA,EACA,IACG,CACH,YAAU,GAAY,OAAO,KAAK,MAAQ,EAAO,MAnDpC,uCALF,2CADF,iCADT",
  "names": []
}
