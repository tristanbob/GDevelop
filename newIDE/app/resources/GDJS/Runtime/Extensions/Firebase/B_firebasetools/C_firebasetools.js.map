{
  "version": 3,
  "sources": ["../../../../../../../../Extensions/Firebase/B_firebasetools/C_firebasetools.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Firebase (setup)');\n  export namespace evtTools {\n    /**\n     * Firebase Event Tools\n     * @namespace\n     */\n    export namespace firebaseTools {\n      /**\n       * An array of callbacks to call when the app gets initialized.\n       */\n      export const onAppCreated: Array<() => void> = [];\n\n      /**\n       * Sets up the Firebase SDK. Only exported for testing purposes.\n       * @internal\n       */\n      export const _setupFirebase = async (runtimeScene: gdjs.RuntimeScene) => {\n        try {\n          var firebaseConfig = JSON.parse(\n            //@ts-expect-error We have a try catch to catch this potential error.\n            runtimeScene\n              .getGame()\n              .getExtensionProperty('Firebase', 'FirebaseConfig')\n          );\n        } catch (e) {\n          logger.error('The Firebase configuration is invalid! Error: ' + e);\n          return;\n        }\n        if (typeof firebaseConfig !== 'object') return;\n        if (firebase.apps.length !== 0) await firebase.app().delete();\n        firebase.initializeApp(firebaseConfig);\n        for (let func of onAppCreated) func();\n      };\n\n      gdjs.registerFirstRuntimeSceneLoadedCallback(_setupFirebase);\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,oBACxB,GAAU,GAAV,UAAU,EAAV,CAKE,GAAU,GAAV,UAAU,EAAV,CAIE,AAAM,eAAkC,GAMlC,iBAAiB,KAAO,IAAoC,CACvE,GAAI,CACF,GAAI,GAAiB,KAAK,MAExB,EACG,UACA,qBAAqB,WAAY,yBAE/B,EAAP,CACA,EAAO,MAAM,iDAAmD,GAChE,OAEF,GAAI,MAAO,IAAmB,SAC9B,CAAI,SAAS,KAAK,SAAW,GAAG,KAAM,UAAS,MAAM,SACrD,SAAS,cAAc,GACvB,OAAS,KAAQ,gBAAc,MAGjC,EAAK,wCAAwC,oBA5B9B,2CALF,iCAFT",
  "names": []
}
