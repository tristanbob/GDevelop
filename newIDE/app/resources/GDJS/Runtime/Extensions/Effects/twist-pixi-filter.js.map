{
  "version": 3,
  "sources": ["../../../../../../../Extensions/Effects/twist-pixi-filter.ts"],
  "sourcesContent": ["namespace gdjs {\n  // Use a different name for PIXI to avoid confusing Typescript between the\n  // PIXI module, and the PIXI \"namespace\" where filters are added. Could maybe\n  // be removed when filters typings are reworked.\n  import PIXI_ = GlobalPIXIModule.PIXI;\n\n  gdjs.PixiFiltersTools.registerFilterCreator(\n    'Twist',\n    new (class extends gdjs.PixiFiltersTools.PixiFilterCreator {\n      makePIXIFilter(target, effectData) {\n        const twistFilter = new PIXI.filters.TwistFilter();\n        twistFilter.offset = new PIXI_.Point(0, 0);\n        return twistFilter;\n      }\n      updatePreRender(filter, target) {\n        const twistFilter = (filter as unknown) as PIXI.filters.TwistFilter;\n        twistFilter.offset.x = Math.round(\n          // @ts-ignore - extra properties are stored on the filter.\n          twistFilter._offsetX * target.getWidth()\n        );\n        twistFilter.offset.y = Math.round(\n          // @ts-ignore - extra properties are stored on the filter.\n          twistFilter._offsetY * target.getHeight()\n        );\n      }\n      updateDoubleParameter(filter, parameterName, value) {\n        const twistFilter = (filter as unknown) as PIXI.filters.TwistFilter;\n        if (parameterName === 'radius') {\n          twistFilter.radius = value;\n        } else if (parameterName === 'angle') {\n          twistFilter.angle = value;\n        } else if (parameterName === 'padding') {\n          twistFilter.padding = value;\n        } else if (parameterName === 'offsetX') {\n          // @ts-ignore - extra properties are stored on the filter.\n          twistFilter._offsetX = value;\n        } else if (parameterName === 'offsetY') {\n          // @ts-ignore - extra properties are stored on the filter.\n          twistFilter._offsetY = value;\n        }\n      }\n      updateStringParameter(filter, parameterName, value) {}\n      updateBooleanParameter(filter, parameterName, value) {}\n    })()\n  );\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CAIE,KAAO,GAAQ,iBAAiB,KAEhC,EAAK,iBAAiB,sBACpB,QACA,GAAK,cAAc,GAAK,iBAAiB,iBAAkB,CACzD,eAAe,EAAQ,EAAY,CACjC,KAAM,GAAc,GAAI,MAAK,QAAQ,YACrC,SAAY,OAAS,GAAI,GAAM,MAAM,EAAG,GACjC,EAET,gBAAgB,EAAQ,EAAQ,CAC9B,KAAM,GAAe,EACrB,EAAY,OAAO,EAAI,KAAK,MAE1B,EAAY,SAAW,EAAO,YAEhC,EAAY,OAAO,EAAI,KAAK,MAE1B,EAAY,SAAW,EAAO,aAGlC,sBAAsB,EAAQ,EAAe,EAAO,CAClD,KAAM,GAAe,EACrB,AAAI,IAAkB,SACpB,EAAY,OAAS,EAChB,AAAI,IAAkB,QAC3B,EAAY,MAAQ,EACf,AAAI,IAAkB,UAC3B,EAAY,QAAU,EACjB,AAAI,IAAkB,UAE3B,EAAY,SAAW,EACd,IAAkB,WAE3B,GAAY,SAAW,GAG3B,sBAAsB,EAAQ,EAAe,EAAO,EACpD,uBAAuB,EAAQ,EAAe,EAAO,OA1CjD",
  "names": []
}
