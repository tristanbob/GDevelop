{
  "version": 3,
  "sources": ["../../../../../../../Extensions/Effects/glitch-pixi-filter.ts"],
  "sourcesContent": ["// @ts-nocheck - TODO: fix typings in this file\n\nnamespace gdjs {\n  gdjs.PixiFiltersTools.registerFilterCreator(\n    'Glitch',\n    new (class extends gdjs.PixiFiltersTools.PixiFilterCreator {\n      makePIXIFilter(layer, effectData) {\n        const glitchFilter = new PIXI.filters.GlitchFilter();\n        glitchFilter._animationTimer = 0;\n        return glitchFilter;\n      }\n      updatePreRender(filter, target) {\n        if (filter.animationFrequency !== 0) {\n          filter._animationTimer += target.getElapsedTime() / 1000;\n          if (filter._animationTimer >= 1 / filter.animationFrequency) {\n            filter.seed = Math.random();\n            filter._animationTimer = 0;\n          }\n        }\n      }\n      updateDoubleParameter(filter, parameterName, value) {\n        if (parameterName === 'slices') {\n          filter.slices = value;\n        } else if (parameterName === 'offset') {\n          filter.offset = value;\n        } else if (parameterName === 'direction') {\n          filter.direction = value;\n        } else if (parameterName === 'fillMode') {\n          filter.fillMode = value;\n        } else if (parameterName === 'minSize') {\n          filter.minSize = value;\n        } else if (parameterName === 'sampleSize') {\n          filter.sampleSize = value;\n        } else if (parameterName === 'redX') {\n          filter.red.x = value;\n        } else if (parameterName === 'redY') {\n          filter.red.y = value;\n        } else if (parameterName === 'greenX') {\n          filter.green.x = value;\n        } else if (parameterName === 'greenY') {\n          filter.green.y = value;\n        } else if (parameterName === 'blueX') {\n          filter.blue.x = value;\n        } else if (parameterName === 'blueY') {\n          filter.blue.y = value;\n        } else if (parameterName === 'animationFrequency') {\n          filter.animationFrequency = value;\n        }\n      }\n      updateStringParameter(filter, parameterName, value) {}\n      updateBooleanParameter(filter, parameterName, value) {\n        if (parameterName === 'average') {\n          filter.average = value;\n        }\n      }\n    })()\n  );\n}\n"],
  "mappings": "AAEA,GAAU,MAAV,UAAU,EAAV,CACE,EAAK,iBAAiB,sBACpB,SACA,GAAK,cAAc,GAAK,iBAAiB,iBAAkB,CACzD,eAAe,EAAO,EAAY,CAChC,KAAM,GAAe,GAAI,MAAK,QAAQ,aACtC,SAAa,gBAAkB,EACxB,EAET,gBAAgB,EAAQ,EAAQ,CAC9B,AAAI,EAAO,qBAAuB,GAChC,GAAO,iBAAmB,EAAO,iBAAmB,IAChD,EAAO,iBAAmB,EAAI,EAAO,oBACvC,GAAO,KAAO,KAAK,SACnB,EAAO,gBAAkB,IAI/B,sBAAsB,EAAQ,EAAe,EAAO,CAClD,AAAI,IAAkB,SACpB,EAAO,OAAS,EACX,AAAI,IAAkB,SAC3B,EAAO,OAAS,EACX,AAAI,IAAkB,YAC3B,EAAO,UAAY,EACd,AAAI,IAAkB,WAC3B,EAAO,SAAW,EACb,AAAI,IAAkB,UAC3B,EAAO,QAAU,EACZ,AAAI,IAAkB,aAC3B,EAAO,WAAa,EACf,AAAI,IAAkB,OAC3B,EAAO,IAAI,EAAI,EACV,AAAI,IAAkB,OAC3B,EAAO,IAAI,EAAI,EACV,AAAI,IAAkB,SAC3B,EAAO,MAAM,EAAI,EACZ,AAAI,IAAkB,SAC3B,EAAO,MAAM,EAAI,EACZ,AAAI,IAAkB,QAC3B,EAAO,KAAK,EAAI,EACX,AAAI,IAAkB,QAC3B,EAAO,KAAK,EAAI,EACP,IAAkB,sBAC3B,GAAO,mBAAqB,GAGhC,sBAAsB,EAAQ,EAAe,EAAO,EACpD,uBAAuB,EAAQ,EAAe,EAAO,CACnD,AAAI,IAAkB,WACpB,GAAO,QAAU,QAlDjB",
  "names": []
}
