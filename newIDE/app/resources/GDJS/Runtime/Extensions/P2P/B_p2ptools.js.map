{
  "version": 3,
  "sources": ["../../../../../../../Extensions/P2P/B_p2ptools.ts"],
  "sourcesContent": ["/// <reference path=\"peerjs.d.ts\" />\nnamespace gdjs {\n  export namespace evtTools {\n    /**\n     * Tools for p2p multiplayer.\n     * @namespace\n     */\n    export namespace p2p {\n      /**\n       * The type of the data that is sent across peerjs.\n       */\n      type NetworkEvent = {\n        eventName: string;\n        data: string;\n      };\n\n      const isValidNetworkEvent = (event: unknown): event is NetworkEvent =>\n        typeof event === 'object' &&\n        event !== null &&\n        typeof event['eventName'] === 'string' &&\n        typeof event['data'] === 'string';\n\n      /**\n       * The data bound to an event that got triggered.\n       */\n      class EventData {\n        constructor(data: string, sender: string) {\n          this.data = data;\n          this.sender = sender;\n        }\n\n        /**\n         * The data sent alongside the event.\n         */\n        public readonly data: string = '';\n\n        /**\n         * The ID of the sender of the event.\n         */\n        public readonly sender: string = '';\n      }\n\n      /**\n       * An event that can be listened to.\n       */\n      class Event {\n        private readonly data: EventData[] = [];\n        public dataloss = false;\n\n        /**\n         * Returns true if the event is triggered.\n         */\n        isTriggered() {\n          return this.data.length > 0;\n        }\n\n        /**\n         * Add new data, to be called with the event data each time the event is triggered.\n         */\n        pushData(newData: EventData) {\n          if (this.dataloss && this.data.length > 0) this.data[0] = newData;\n          else this.data.push(newData);\n        }\n\n        /**\n         * Deleted the last event data, to be called when it is sure the event was processed thoroughly.\n         */\n        popData() {\n          this.data.shift();\n        }\n\n        /**\n         * Get the data sent with the last event triggering.\n         */\n        getData() {\n          return this.data.length === 0 ? '' : this.data[0].data;\n        }\n\n        /**\n         * Get the sender of the last event triggering.\n         */\n        getSender() {\n          return this.data.length === 0 ? '' : this.data[0].sender;\n        }\n      }\n\n      /**\n       * The optional peer ID. Only used if explicitly overridden.\n       */\n      let peerId: string | null = null;\n\n      /**\n       * The peer to peer configuration.\n       */\n      let peerConfig: Peer.PeerJSOption = { debug: 1 };\n\n      /**\n       * The p2p client.\n       */\n      let peer: Peer<NetworkEvent> | null = null;\n\n      /**\n       * All connected p2p clients, keyed by their ID.\n       */\n      const connections = new Map<string, Peer.DataConnection<NetworkEvent>>();\n\n      /**\n       * Contains a map of events triggered by other p2p clients.\n       * It is keyed by the event name.\n       */\n      const events = new Map<string, Event>();\n\n      /**\n       * True if PeerJS is initialized and ready.\n       */\n      let ready = false;\n\n      /**\n       * True if an error occurred.\n       */\n      let error = false;\n\n      /**\n       * Last error's message.\n       */\n      let lastError = '';\n\n      /**\n       * List of IDs of peers that just disconnected.\n       */\n      const disconnectedPeers: string[] = [];\n\n      /**\n       * List of IDs of peers that just remotely initiated a connection.\n       */\n      const connectedPeers: string[] = [];\n\n      /**\n       * Internal function called to initialize PeerJS after it\n       * has been configured.\n       */\n      const loadPeerJS = () => {\n        if (peer !== null) return;\n        if (peerId !== null) {\n          peer = new Peer(peerId, peerConfig);\n        } else {\n          peer = new Peer(peerConfig);\n        }\n        peer.on('open', () => {\n          ready = true;\n        });\n        peer.on('error', (errorMessage) => {\n          error = true;\n          lastError = errorMessage.message;\n        });\n        peer.on('connection', (connection) => {\n          connection.on('open', () => {\n            _onConnection(connection);\n            connectedPeers.push(connection.peer);\n          });\n        });\n        peer.on('close', () => {\n          peer = null;\n          loadPeerJS();\n        });\n        peer.on('disconnected', peer.reconnect);\n      };\n\n      /**\n       * Internal function called when a connection with a remote peer is initiated.\n       * @param connection The DataConnection of the peer\n       */\n      const _onConnection = (connection: Peer.DataConnection<NetworkEvent>) => {\n        connections.set(connection.peer, connection);\n        connection.on('data', (data) => {\n          if (isValidNetworkEvent(data))\n            getEvent(data.eventName).pushData(\n              new EventData(data.data, connection.peer)\n            );\n        });\n\n        // Close event is only for graceful disconnection,\n        // but we want onDisconnect to trigger for any type of disconnection,\n        // so we register a listener for both event types.\n        connection.on('error', () => {\n          _onDisconnect(connection.peer);\n        });\n        connection.on('close', () => {\n          _onDisconnect(connection.peer);\n        });\n\n        // Regularly check for disconnection as the built in way is not reliable.\n        (function disconnectChecker() {\n          if (\n            connection.peerConnection.connectionState === 'failed' ||\n            connection.peerConnection.connectionState === 'disconnected' ||\n            connection.peerConnection.connectionState === 'closed'\n          ) {\n            _onDisconnect(connection.peer);\n          } else {\n            setTimeout(disconnectChecker, 1000);\n          }\n        })();\n      };\n\n      /**\n       * Internal function called when a remote client disconnects.\n       * @param connectionID The ID of the peer that disconnected.\n       */\n      const _onDisconnect = (connectionID: string) => {\n        if (!connections.has(connectionID)) return;\n        disconnectedPeers.push(connectionID);\n        connections.delete(connectionID);\n      };\n\n      /**\n       * Get an event, and creates it if it doesn't exist.\n       */\n      export const getEvent = (name: string): Event => {\n        let event = events.get(name);\n        if (!event) events.set(name, (event = new Event()));\n        return event;\n      };\n\n      /**\n       * Connects to another p2p client.\n       * @param id - The other client's ID.\n       */\n      export const connect = (id: string) => {\n        if (peer === null) return;\n        const connection = peer.connect(id);\n        connection.on('open', () => {\n          _onConnection(connection);\n        });\n      };\n\n      /**\n       * Disconnects from another p2p client.\n       * @param id - The other client's ID.\n       */\n      export const disconnectFromPeer = (id: string) => {\n        const connection = connections.get(id);\n        if (connection) connection.close();\n      };\n\n      /**\n       * Disconnects from all other p2p clients.\n       */\n      export const disconnectFromAllPeers = () => {\n        for (const connection of connections.values()) connection.close();\n      };\n\n      /**\n       * Disconnects from all peers and the broker server.\n       */\n      export const disconnectFromAll = () => {\n        if (peer) {\n          peer.destroy();\n          peer = null;\n        }\n      };\n\n      /**\n       * Disconnects from the broker server, leaving the connections intact.\n       */\n      export const disconnectFromBroker = () => {\n        if (peer) {\n          peer.disconnect();\n          peer = null;\n        }\n      };\n\n      /**\n       * Returns true when the event got triggered by another p2p client.\n       * @param defaultDataLoss Is data loss allowed (accelerates event handling when true)?\n       */\n      export const onEvent = (\n        eventName: string,\n        defaultDataLoss: boolean\n      ): boolean => {\n        const event = getEvent(eventName);\n        event.dataloss = defaultDataLoss;\n        return event.isTriggered();\n      };\n\n      /**\n       * Send an event to one specific connected client.\n       * @param id - The ID of the client to send the event to.\n       * @param eventName - The event to trigger.\n       * @param [eventData] - Additional data to send with the event.\n       */\n      export const sendDataTo = (\n        id: string,\n        eventName: string,\n        eventData: string\n      ) => {\n        const connection = connections.get(id);\n        if (connection) {\n          connection.send({\n            eventName: eventName,\n            data: eventData,\n          });\n        }\n      };\n\n      /**\n       * Send an event to all connected clients.\n       * @param eventName - The event to trigger.\n       * @param [eventData] - Additional data to send with the event.\n       */\n      export const sendDataToAll = (eventName: string, eventData: string) => {\n        for (const connection of connections.values())\n          connection.send({\n            eventName: eventName,\n            data: eventData,\n          });\n      };\n\n      /**\n       * Send an event to one specific connected client.\n       * @param id - The ID of the client to send the event to.\n       * @param eventName - The event to trigger.\n       * @param variable - Additional variable to send with the event.\n       */\n      export const sendVariableTo = (\n        id: string,\n        eventName: string,\n        variable: gdjs.Variable\n      ) => {\n        sendDataTo(id, eventName, JSON.stringify(variable.toJSObject()));\n      };\n\n      /**\n       * Send an event to all connected clients.\n       * @param eventName - The event to trigger.\n       * @param variable - Additional variable to send with the event.\n       */\n      export const sendVariableToAll = (\n        eventName: string,\n        variable: gdjs.Variable\n      ) => {\n        sendDataToAll(eventName, JSON.stringify(variable.toJSObject()));\n      };\n\n      /**\n       * Get some data associated to the last trigger of an event.\n       * @param eventName - The event to get data from.\n       * @returns - The data as JSON.\n       */\n      export const getEventData = (eventName: string) =>\n        getEvent(eventName).getData();\n\n      /**\n       * Get the id of peer that caused the last trigger of an event.\n       * @param eventName - The event to get the sender from.\n       */\n      export const getEventSender = (eventName: string) =>\n        getEvent(eventName).getSender();\n\n      /**\n       * Get a variable associated to the last trigger of an event.\n       * @param eventName - The event to get the variable from.\n       * @param variable - The variable where to store the variable content.\n       */\n      export const getEventVariable = (\n        eventName: string,\n        variable: gdjs.Variable\n      ) => {\n        variable.fromJSON(getEventData(eventName));\n      };\n\n      /**\n       * Connects to a custom broker server.\n       * @param host The host of the broker server.\n       * @param port The port of the broker server.\n       * @param path The path (part of the url after the host) to the broker server.\n       * @param key Optional password to connect to the broker server.\n       * @param ssl Use ssl?\n       */\n      export const useCustomBrokerServer = (\n        host: string,\n        port: number,\n        path: string,\n        key: string,\n        ssl: boolean\n      ) => {\n        Object.assign(peerConfig, {\n          host,\n          port,\n          path,\n          secure: ssl,\n          // All servers have \"peerjs\" as default key\n          key: key.length === 0 ? 'peerjs' : key,\n        });\n        loadPeerJS();\n      };\n\n      /**\n       * Use default broker server.\n       * This is not recommended for published games,\n       * this server should only be used for quick testing in development.\n       */\n      export const useDefaultBrokerServer = loadPeerJS;\n\n      /**\n       * Adds an ICE server candidate, and removes the default ones provided by PeerJs. Must be called before connecting to a broker.\n       * @param urls The URL of the STUN/TURN server.\n       * @param username An optional username to send to the server.\n       * @param credential An optional password to send to the server.\n       */\n      export const useCustomICECandidate = (\n        urls: string,\n        username?: string,\n        credential?: string\n      ) => {\n        peerConfig.config = peerConfig.config || {};\n        peerConfig.config.iceServers = peerConfig.config.iceServers || [];\n        peerConfig.config.iceServers.push({\n          urls,\n          username,\n          credential,\n        });\n      };\n\n      /**\n       * Overrides the default peer ID. Must be called before connecting to a broker.\n       * Overriding the ID may have unwanted consequences. Do not use this feature\n       * unless you really know what you are doing.\n       * @param id The peer ID to use when connecting to a broker.\n       */\n      export const overrideId = (id: string) => {\n        peerId = id;\n      };\n\n      /**\n       * Returns the own current peer ID.\n       * @see Peer.id\n       */\n      export const getCurrentId = (): string => {\n        if (peer == undefined) return '';\n        return peer.id || '';\n      };\n\n      /**\n       * Returns true once PeerJS finished initialization.\n       * @see ready\n       */\n      export const isReady = () => ready;\n\n      /**\n       * Returns true once when there is an error.\n       */\n      export const onError = (): boolean => {\n        const returnValue = error;\n        error = false;\n        return returnValue;\n      };\n\n      /**\n       * Returns the latest error message.\n       */\n      export const getLastError = () => lastError;\n\n      /**\n       * Returns true once a peer disconnected.\n       */\n      export const onDisconnect = () => disconnectedPeers.length > 0;\n\n      /**\n       * Get the ID of the peer that triggered onDisconnect.\n       */\n      export const getDisconnectedPeer = () => disconnectedPeers[0] || '';\n\n      /**\n       * Returns true once if a remote peer just initiated a connection.\n       */\n      export const onConnection = () => connectedPeers.length > 0;\n\n      /**\n       * Get the ID of the peer that triggered onConnection.\n       */\n      export const getConnectedPeer = (): string => connectedPeers[0] || '';\n\n      /**\n       * A JavaScript-only function to get the raw P2P DataConnection.\n       * This can be useful for example when you want to use a binary protocol\n       * instead of GDevelop variables for high-performance networking.\n       */\n      export const getConnectionInstance = (peerID: string) =>\n        connections.get(peerID);\n\n      gdjs.callbacksRuntimeScenePostEvents.push(() => {\n        for (const event of events.values()) {\n          event.popData();\n        }\n        if (disconnectedPeers.length > 0) {\n          disconnectedPeers.shift();\n        }\n        if (connectedPeers.length > 0) {\n          connectedPeers.shift();\n        }\n      });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
