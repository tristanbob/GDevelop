{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TiledSpriteObject/tiledspriteruntimeobject-pixi-renderer.ts"],
  "sourcesContent": ["namespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  class TiledSpriteRuntimeObjectPixiRenderer {\n    _object: gdjs.TiledSpriteRuntimeObject;\n    _tiledSprite: PIXI.TilingSprite;\n\n    constructor(\n      runtimeObject: gdjs.TiledSpriteRuntimeObject,\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      textureName: string\n    ) {\n      this._object = runtimeObject;\n      const texture = instanceContainer\n        .getGame()\n        .getImageManager()\n        .getPIXITexture(textureName);\n      this._tiledSprite = new PIXI.TilingSprite(texture, 1024, 1024);\n\n      instanceContainer\n        .getLayer('')\n        .getRenderer()\n        .addRendererObject(this._tiledSprite, runtimeObject.getZOrder());\n      this.updatePosition();\n      this.updateAngle();\n      this.updateXOffset();\n      this.updateYOffset();\n    }\n\n    getRendererObject() {\n      return this._tiledSprite;\n    }\n\n    updateOpacity(): void {\n      this._tiledSprite.alpha = this._object.opacity / 255;\n    }\n\n    updatePosition(): void {\n      this._tiledSprite.position.x =\n        this._object.x + this._tiledSprite.width / 2;\n      this._tiledSprite.position.y =\n        this._object.y + this._tiledSprite.height / 2;\n    }\n\n    setTexture(\n      textureName: string,\n      instanceContainer: RuntimeInstanceContainer\n    ): void {\n      const texture = instanceContainer\n        .getGame()\n        .getImageManager()\n        .getPIXITexture(textureName);\n      this._tiledSprite.texture = texture;\n      this.updatePosition();\n    }\n\n    updateAngle(): void {\n      this._tiledSprite.rotation = gdjs.toRad(this._object.angle);\n    }\n\n    getWidth(): float {\n      return this._tiledSprite.width;\n    }\n\n    getHeight(): float {\n      return this._tiledSprite.height;\n    }\n\n    setWidth(width: float): void {\n      this._tiledSprite.width = width;\n      this._tiledSprite.pivot.x = width / 2;\n      this.updatePosition();\n    }\n\n    setHeight(height: float): void {\n      this._tiledSprite.height = height;\n      this._tiledSprite.pivot.y = height / 2;\n      this.updatePosition();\n    }\n\n    updateXOffset(): void {\n      // Known PIXI.js issue, the coordinates should not exceed the width/height of the texture,\n      // otherwise the texture will be pixelated over time.\n      // See https://github.com/pixijs/pixijs/issues/7891#issuecomment-947549553\n      this._tiledSprite.tilePosition.x =\n        -this._object._xOffset % this._tiledSprite.texture.width;\n    }\n\n    updateYOffset(): void {\n      // Known PIXI.js issue, the coordinates should not exceed the width/height of the texture,\n      // otherwise the texture will be pixelated over time.\n      // See https://github.com/pixijs/pixijs/issues/7891#issuecomment-947549553\n      this._tiledSprite.tilePosition.y =\n        -this._object._yOffset % this._tiledSprite.texture.height;\n    }\n\n    setColor(rgbColor: string): void {\n      const colors = rgbColor.split(';');\n      if (colors.length < 3) {\n        return;\n      }\n      // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'number'.\n      this._tiledSprite.tint =\n        '0x' +\n        gdjs.rgbToHex(\n          parseInt(colors[0], 10),\n          parseInt(colors[1], 10),\n          parseInt(colors[2], 10)\n        );\n    }\n\n    getColor() {\n      const rgb = PIXI.utils.hex2rgb(this._tiledSprite.tint);\n      return (\n        Math.floor(rgb[0] * 255) +\n        ';' +\n        Math.floor(rgb[1] * 255) +\n        ';' +\n        Math.floor(rgb[2] * 255)\n      );\n    }\n\n    getTextureWidth() {\n      return this._tiledSprite.texture.width;\n    }\n\n    getTextureHeight() {\n      return this._tiledSprite.texture.height;\n    }\n  }\n\n  export const TiledSpriteRuntimeObjectRenderer = TiledSpriteRuntimeObjectPixiRenderer;\n  export type TiledSpriteRuntimeObjectRenderer = TiledSpriteRuntimeObjectPixiRenderer;\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAO,GAAO,iBAAiB,KAE/B,OAA2C,CAIzC,YACE,EACA,EACA,EACA,CACA,KAAK,QAAU,EACf,KAAM,GAAU,EACb,UACA,kBACA,eAAe,GAClB,KAAK,aAAe,GAAI,GAAK,aAAa,EAAS,KAAM,MAEzD,EACG,SAAS,IACT,cACA,kBAAkB,KAAK,aAAc,EAAc,aACtD,KAAK,iBACL,KAAK,cACL,KAAK,gBACL,KAAK,gBAGP,mBAAoB,CAClB,MAAO,MAAK,aAGd,eAAsB,CACpB,KAAK,aAAa,MAAQ,KAAK,QAAQ,QAAU,IAGnD,gBAAuB,CACrB,KAAK,aAAa,SAAS,EACzB,KAAK,QAAQ,EAAI,KAAK,aAAa,MAAQ,EAC7C,KAAK,aAAa,SAAS,EACzB,KAAK,QAAQ,EAAI,KAAK,aAAa,OAAS,EAGhD,WACE,EACA,EACM,CACN,KAAM,GAAU,EACb,UACA,kBACA,eAAe,GAClB,KAAK,aAAa,QAAU,EAC5B,KAAK,iBAGP,aAAoB,CAClB,KAAK,aAAa,SAAW,EAAK,MAAM,KAAK,QAAQ,OAGvD,UAAkB,CAChB,MAAO,MAAK,aAAa,MAG3B,WAAmB,CACjB,MAAO,MAAK,aAAa,OAG3B,SAAS,EAAoB,CAC3B,KAAK,aAAa,MAAQ,EAC1B,KAAK,aAAa,MAAM,EAAI,EAAQ,EACpC,KAAK,iBAGP,UAAU,EAAqB,CAC7B,KAAK,aAAa,OAAS,EAC3B,KAAK,aAAa,MAAM,EAAI,EAAS,EACrC,KAAK,iBAGP,eAAsB,CAIpB,KAAK,aAAa,aAAa,EAC7B,CAAC,KAAK,QAAQ,SAAW,KAAK,aAAa,QAAQ,MAGvD,eAAsB,CAIpB,KAAK,aAAa,aAAa,EAC7B,CAAC,KAAK,QAAQ,SAAW,KAAK,aAAa,QAAQ,OAGvD,SAAS,EAAwB,CAC/B,KAAM,GAAS,EAAS,MAAM,KAC9B,AAAI,EAAO,OAAS,GAIpB,MAAK,aAAa,KAChB,KACA,EAAK,SACH,SAAS,EAAO,GAAI,IACpB,SAAS,EAAO,GAAI,IACpB,SAAS,EAAO,GAAI,MAI1B,UAAW,CACT,KAAM,GAAM,EAAK,MAAM,QAAQ,KAAK,aAAa,MACjD,MACE,MAAK,MAAM,EAAI,GAAK,KACpB,IACA,KAAK,MAAM,EAAI,GAAK,KACpB,IACA,KAAK,MAAM,EAAI,GAAK,KAIxB,iBAAkB,CAChB,MAAO,MAAK,aAAa,QAAQ,MAGnC,kBAAmB,CACjB,MAAO,MAAK,aAAa,QAAQ,QAI9B,AAAM,mCAAmC,IAnIxC",
  "names": []
}
