{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TiledSpriteObject/tiledspriteruntimeobject.ts"],
  "sourcesContent": ["/*\n *  GDevelop JS Platform\n *  2013 Florian Rival (Florian.Rival@gmail.com)\n */\nnamespace gdjs {\n  /** Initial properties for a Tiled Sprite object */\n  export type TiledSpriteObjectDataType = {\n    /** Default width of the object, if the instance has no custom width. */\n    width: number;\n    /** Default height of the object, if the instance has no custom height. */\n    height: number;\n    texture: string;\n  };\n\n  export type TiledSpriteObjectData = ObjectData & TiledSpriteObjectDataType;\n\n  /**\n   * The TiledSpriteRuntimeObject displays a tiled texture.\n   */\n  export class TiledSpriteRuntimeObject extends gdjs.RuntimeObject {\n    _xOffset: float = 0;\n    _yOffset: float = 0;\n    opacity: float = 255;\n\n    // Width and height can be stored because they do not depend on the\n    // size of the texture being used (contrary to most objects).\n    _width: float;\n    _height: float;\n\n    _renderer: gdjs.TiledSpriteRuntimeObjectRenderer;\n\n    /**\n     * @param instanceContainer The container the object belongs to.\n     * @param tiledSpriteObjectData The initial properties of the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      tiledSpriteObjectData: TiledSpriteObjectData\n    ) {\n      super(instanceContainer, tiledSpriteObjectData);\n      this._renderer = new gdjs.TiledSpriteRuntimeObjectRenderer(\n        this,\n        instanceContainer,\n        tiledSpriteObjectData.texture\n      );\n      this._width = 0;\n      this._height = 0;\n      this.setWidth(tiledSpriteObjectData.width);\n      this.setHeight(tiledSpriteObjectData.height);\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    updateFromObjectData(oldObjectData, newObjectData): boolean {\n      if (oldObjectData.texture !== newObjectData.texture) {\n        this.setTexture(newObjectData.texture, this.getRuntimeScene());\n      }\n      if (oldObjectData.width !== newObjectData.width) {\n        this.setWidth(newObjectData.width);\n      }\n      if (oldObjectData.height !== newObjectData.height) {\n        this.setHeight(newObjectData.height);\n      }\n      return true;\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      super.onDestroyFromScene(instanceContainer);\n      if ((this._renderer as any).onDestroy) {\n        (this._renderer as any).onDestroy();\n      }\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n    }\n\n    /**\n     * Set the X position of the Tiled Sprite object.\n     * @param x The new X position.\n     */\n    setX(x: float): void {\n      super.setX(x);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set the Y position of the Tiled Sprite object.\n     * @param y The new Y position.\n     */\n    setY(y: float): void {\n      super.setY(y);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Assign a new texture to the Tiled Sprite object.\n     * @param textureName The name of the image texture resource.\n     * @param instanceContainer The container in which the texture is used.\n     */\n    setTexture(\n      textureName: string,\n      instanceContainer: gdjs.RuntimeInstanceContainer\n    ): void {\n      this._renderer.setTexture(textureName, instanceContainer);\n    }\n\n    /**\n     * Set the angle of the Tiled Sprite object.\n     * @param angle The new angle.\n     */\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Get the width of the Tiled Sprite object.\n     * @returns The width of the Tiled Sprite object\n     */\n    getWidth(): float {\n      return this._width;\n    }\n\n    /**\n     * Get the height of the Tiled Sprite object.\n     * @returns The height of the Tiled Sprite object\n     */\n    getHeight(): float {\n      return this._height;\n    }\n\n    /**\n     * Set the width of the Tiled Sprite object.\n     * @param width The new width.\n     */\n    setWidth(width: float): void {\n      if (this._width === width) return;\n\n      this._width = width;\n      this._renderer.setWidth(width);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the height of the Tiled Sprite object.\n     * @param height The new height.\n     */\n    setHeight(height: float): void {\n      if (this._height === height) return;\n\n      this._height = height;\n      this._renderer.setHeight(height);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Set the size of the Tiled Sprite object.\n     * @param width The new width.\n     * @param height The new height.\n     */\n    setSize(width: float, height: float): void {\n      this.setWidth(width);\n      this.setHeight(height);\n    }\n\n    /**\n     * Set the offset on the X-axis when displaying the image of the Tiled Sprite object.\n     * @param xOffset The new offset on the X-axis.\n     */\n    setXOffset(xOffset: number): void {\n      this._xOffset = xOffset;\n      this._renderer.updateXOffset();\n    }\n\n    /**\n     * Set the offset on the Y-axis when displaying the image of the Tiled Sprite object.\n     * @param yOffset The new offset on the Y-axis.\n     */\n    setYOffset(yOffset: number): void {\n      this._yOffset = yOffset;\n      this._renderer.updateYOffset();\n    }\n\n    /**\n     * Get the offset on the X-axis of the Tiled Sprite object.\n     * @returns The offset on the X-axis\n     */\n    getXOffset(): number {\n      return this._xOffset;\n    }\n\n    /**\n     * Get the offset on the Y-axis of the Tiled Sprite object.\n     * @returns The offset on the Y-axis\n     */\n    getYOffset(): number {\n      return this._yOffset;\n    }\n\n    /**\n     * Change the transparency of the object.\n     * @param opacity The new opacity, between 0 (transparent) and 255 (opaque).\n     */\n    setOpacity(opacity: float): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this.opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get the transparency of the object.\n     * @return The opacity, between 0 (transparent) and 255 (opaque).\n     */\n    getOpacity(): number {\n      return this.opacity;\n    }\n\n    /**\n     * Change the tint of the tiled sprite object.\n     *\n     * @param rgbColor The color, in RGB format (\"128;200;255\").\n     */\n    setColor(rgbColor: string): void {\n      this._renderer.setColor(rgbColor);\n    }\n\n    /**\n     * Get the tint of the tiled sprite object.\n     *\n     * @returns The color, in RGB format (\"128;200;255\").\n     */\n    getColor(): string {\n      return this._renderer.getColor();\n    }\n\n    // Implement support for get/set scale:\n\n    /**\n     * Get scale of the tiled sprite object.\n     */\n    getScale(): float {\n      return (this.getScaleX() + this.getScaleY()) / 2.0;\n    }\n\n    /**\n     * Get x-scale of the tiled sprite object.\n     */\n    getScaleX(): float {\n      return this._width / this._renderer.getTextureWidth();\n    }\n\n    /**\n     * Get y-scale of the tiled sprite object.\n     */\n    getScaleY(): float {\n      return this._height / this._renderer.getTextureHeight();\n    }\n\n    /**\n     * Set the tiled sprite object scale.\n     * @param newScale The new scale for the tiled sprite object.\n     */\n    setScale(newScale: float): void {\n      this.setWidth(this._renderer.getTextureWidth() * newScale);\n      this.setHeight(this._renderer.getTextureHeight() * newScale);\n    }\n\n    /**\n     * Set the tiled sprite object x-scale.\n     * @param newScale The new x-scale for the tiled sprite object.\n     */\n    setScaleX(newScale: float): void {\n      this.setWidth(this._renderer.getTextureWidth() * newScale);\n    }\n\n    /**\n     * Set the tiled sprite object y-scale.\n     * @param newScale The new y-scale for the tiled sprite object.\n     */\n    setScaleY(newScale: float): void {\n      this.setHeight(this._renderer.getTextureHeight() * newScale);\n    }\n  }\n  gdjs.registerObject(\n    'TiledSpriteObject::TiledSprite',\n    gdjs.TiledSpriteRuntimeObject\n  );\n}\n"],
  "mappings": "AAIA,GAAU,MAAV,UAAU,EAAV,CAeS,eAAuC,GAAK,aAAc,CAgB/D,YACE,EACA,EACA,CACA,MAAM,EAAmB,GAnB3B,cAAkB,EAClB,cAAkB,EAClB,aAAiB,IAkBf,KAAK,UAAY,GAAI,GAAK,iCACxB,KACA,EACA,EAAsB,SAExB,KAAK,OAAS,EACd,KAAK,QAAU,EACf,KAAK,SAAS,EAAsB,OACpC,KAAK,UAAU,EAAsB,QAGrC,KAAK,YAGP,qBAAqB,EAAe,EAAwB,CAC1D,MAAI,GAAc,UAAY,EAAc,SAC1C,KAAK,WAAW,EAAc,QAAS,KAAK,mBAE1C,EAAc,QAAU,EAAc,OACxC,KAAK,SAAS,EAAc,OAE1B,EAAc,SAAW,EAAc,QACzC,KAAK,UAAU,EAAc,QAExB,GAGT,mBAAoB,CAClB,MAAO,MAAK,UAAU,oBAGxB,mBAAmB,EAAwD,CACzE,MAAM,mBAAmB,GACpB,KAAK,UAAkB,WACzB,KAAK,UAAkB,YAO5B,uCAAuC,EAAmC,CACxE,AAAI,EAAoB,YACtB,MAAK,SAAS,EAAoB,OAClC,KAAK,UAAU,EAAoB,SAQvC,KAAK,EAAgB,CACnB,MAAM,KAAK,GACX,KAAK,UAAU,iBAOjB,KAAK,EAAgB,CACnB,MAAM,KAAK,GACX,KAAK,UAAU,iBAQjB,WACE,EACA,EACM,CACN,KAAK,UAAU,WAAW,EAAa,GAOzC,SAAS,EAAoB,CAC3B,MAAM,SAAS,GACf,KAAK,UAAU,cAOjB,UAAkB,CAChB,MAAO,MAAK,OAOd,WAAmB,CACjB,MAAO,MAAK,QAOd,SAAS,EAAoB,CAC3B,AAAI,KAAK,SAAW,GAEpB,MAAK,OAAS,EACd,KAAK,UAAU,SAAS,GACxB,KAAK,sBAOP,UAAU,EAAqB,CAC7B,AAAI,KAAK,UAAY,GAErB,MAAK,QAAU,EACf,KAAK,UAAU,UAAU,GACzB,KAAK,sBAQP,QAAQ,EAAc,EAAqB,CACzC,KAAK,SAAS,GACd,KAAK,UAAU,GAOjB,WAAW,EAAuB,CAChC,KAAK,SAAW,EAChB,KAAK,UAAU,gBAOjB,WAAW,EAAuB,CAChC,KAAK,SAAW,EAChB,KAAK,UAAU,gBAOjB,YAAqB,CACnB,MAAO,MAAK,SAOd,YAAqB,CACnB,MAAO,MAAK,SAOd,WAAW,EAAsB,CAC/B,AAAI,EAAU,GACZ,GAAU,GAER,EAAU,KACZ,GAAU,KAEZ,KAAK,QAAU,EACf,KAAK,UAAU,gBAOjB,YAAqB,CACnB,MAAO,MAAK,QAQd,SAAS,EAAwB,CAC/B,KAAK,UAAU,SAAS,GAQ1B,UAAmB,CACjB,MAAO,MAAK,UAAU,WAQxB,UAAkB,CAChB,MAAQ,MAAK,YAAc,KAAK,aAAe,EAMjD,WAAmB,CACjB,MAAO,MAAK,OAAS,KAAK,UAAU,kBAMtC,WAAmB,CACjB,MAAO,MAAK,QAAU,KAAK,UAAU,mBAOvC,SAAS,EAAuB,CAC9B,KAAK,SAAS,KAAK,UAAU,kBAAoB,GACjD,KAAK,UAAU,KAAK,UAAU,mBAAqB,GAOrD,UAAU,EAAuB,CAC/B,KAAK,SAAS,KAAK,UAAU,kBAAoB,GAOnD,UAAU,EAAuB,CAC/B,KAAK,UAAU,KAAK,UAAU,mBAAqB,IAtRhD,EAAM,2BAyRb,EAAK,eACH,iCACA,EAAK,4BA1SC",
  "names": []
}
