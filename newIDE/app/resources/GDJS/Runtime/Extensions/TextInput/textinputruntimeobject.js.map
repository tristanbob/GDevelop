{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TextInput/textinputruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  const supportedInputTypes = [\n    'text',\n    'email',\n    'password',\n    'number',\n    'telephone number',\n    'url',\n    'search',\n    'text area',\n  ] as const;\n\n  type SupportedInputType = typeof supportedInputTypes[number];\n\n  const parseInputType = (potentialInputType: string): SupportedInputType => {\n    const lowercasedNewInputType = potentialInputType.toLowerCase();\n\n    // @ts-ignore - we're actually checking that this value is correct.\n    if (supportedInputTypes.includes(lowercasedNewInputType))\n      return potentialInputType as SupportedInputType;\n\n    return 'text';\n  };\n\n  /** Base parameters for {@link gdjs.TextInputRuntimeObject} */\n  export interface TextInputObjectData extends ObjectData {\n    /** The base parameters of the TextInput */\n    content: {\n      initialValue: string;\n      placeholder: string;\n      fontResourceName: string;\n      fontSize: float;\n      inputType: SupportedInputType;\n      textColor: string;\n      fillColor: string;\n      fillOpacity: float;\n      borderColor: string;\n      borderOpacity: float;\n      borderWidth: float;\n      disabled: boolean;\n      readOnly: boolean;\n    };\n  }\n\n  const DEFAULT_WIDTH = 300;\n  const DEFAULT_HEIGHT = 30;\n\n  /**\n   * Shows a text input on the screen the player can type text into.\n   */\n  export class TextInputRuntimeObject extends gdjs.RuntimeObject {\n    private _string: string;\n    private _placeholder: string;\n    private opacity: float = 255;\n    private _width: float = DEFAULT_WIDTH;\n    private _height: float = DEFAULT_HEIGHT;\n    private _fontResourceName: string;\n    private _fontSize: float;\n    private _inputType: SupportedInputType;\n    private _textColor: [float, float, float];\n    private _fillColor: [float, float, float];\n    private _fillOpacity: float;\n    private _borderColor: [float, float, float];\n    private _borderOpacity: float;\n    private _borderWidth: float;\n    private _disabled: boolean;\n    private _readOnly: boolean;\n\n    _renderer: TextInputRuntimeObjectRenderer;\n\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: TextInputObjectData\n    ) {\n      super(instanceContainer, objectData);\n\n      this._string = objectData.content.initialValue;\n      this._placeholder = objectData.content.placeholder;\n      this._fontResourceName = objectData.content.fontResourceName;\n      this._fontSize = objectData.content.fontSize || 20;\n      this._inputType = parseInputType(objectData.content.inputType);\n      this._textColor = gdjs.rgbOrHexToRGBColor(objectData.content.textColor);\n      this._fillColor = gdjs.rgbOrHexToRGBColor(objectData.content.fillColor);\n      this._fillOpacity = objectData.content.fillOpacity;\n      this._borderColor = gdjs.rgbOrHexToRGBColor(\n        objectData.content.borderColor\n      );\n      this._borderOpacity = objectData.content.borderOpacity;\n      this._borderWidth = objectData.content.borderWidth;\n      this._disabled = objectData.content.disabled;\n      this._readOnly = objectData.content.readOnly;\n\n      this._renderer = new gdjs.TextInputRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return null;\n    }\n\n    updateFromObjectData(\n      oldObjectData: TextInputObjectData,\n      newObjectData: TextInputObjectData\n    ): boolean {\n      if (\n        oldObjectData.content.initialValue !==\n        newObjectData.content.initialValue\n      ) {\n        if (this._string === oldObjectData.content.initialValue) {\n          this.setString(newObjectData.content.initialValue);\n        }\n      }\n      if (\n        oldObjectData.content.placeholder !== newObjectData.content.placeholder\n      ) {\n        this.setPlaceholder(newObjectData.content.placeholder);\n      }\n      if (\n        oldObjectData.content.fontResourceName !==\n        newObjectData.content.fontResourceName\n      ) {\n        this.setFontResourceName(newObjectData.content.fontResourceName);\n      }\n      if (oldObjectData.content.fontSize !== newObjectData.content.fontSize) {\n        this.setFontSize(newObjectData.content.fontSize);\n      }\n      if (oldObjectData.content.inputType !== newObjectData.content.inputType) {\n        this.setInputType(newObjectData.content.inputType);\n      }\n      if (oldObjectData.content.textColor !== newObjectData.content.textColor) {\n        this.setTextColor(newObjectData.content.textColor);\n      }\n      if (oldObjectData.content.fillColor !== newObjectData.content.fillColor) {\n        this.setFillColor(newObjectData.content.fillColor);\n      }\n      if (\n        oldObjectData.content.fillOpacity !== newObjectData.content.fillOpacity\n      ) {\n        this.setFillOpacity(newObjectData.content.fillOpacity);\n      }\n      if (\n        oldObjectData.content.borderColor !== newObjectData.content.borderColor\n      ) {\n        this.setBorderColor(newObjectData.content.borderColor);\n      }\n      if (\n        oldObjectData.content.borderOpacity !==\n        newObjectData.content.borderOpacity\n      ) {\n        this.setBorderOpacity(newObjectData.content.borderOpacity);\n      }\n      if (\n        oldObjectData.content.borderWidth !== newObjectData.content.borderWidth\n      ) {\n        this.setBorderWidth(newObjectData.content.borderWidth);\n      }\n      if (oldObjectData.content.disabled !== newObjectData.content.disabled) {\n        this.setDisabled(newObjectData.content.disabled);\n      }\n      if (oldObjectData.content.readOnly !== newObjectData.content.readOnly) {\n        this.setReadOnly(newObjectData.content.readOnly);\n      }\n      return true;\n    }\n\n    updatePreRender(instanceContainer: RuntimeInstanceContainer): void {\n      this._renderer.updatePreRender();\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      for (const property of initialInstanceData.stringProperties) {\n        if (property.name === 'initialValue') {\n          this.setString(property.value);\n        } else if (property.name === 'placeholder') {\n          this.setPlaceholder(property.value);\n        }\n      }\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n    }\n\n    onScenePaused(runtimeScene: gdjs.RuntimeScene): void {\n      this._renderer.onScenePaused();\n    }\n\n    onSceneResumed(runtimeScene: gdjs.RuntimeScene): void {\n      this._renderer.onSceneResumed();\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      super.onDestroyFromScene(instanceContainer);\n      this._renderer.onDestroy();\n    }\n\n    /**\n     * Set object opacity.\n     */\n    setOpacity(opacity): void {\n      this.opacity = Math.max(0, Math.min(255, opacity));\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity() {\n      return this.opacity;\n    }\n\n    /**\n     * Set the width of the object, if applicable.\n     * @param width The new width in pixels.\n     */\n    setWidth(width: float): void {\n      this._width = width;\n    }\n\n    /**\n     * Set the height of the object, if applicable.\n     * @param height The new height in pixels.\n     */\n    setHeight(height: float): void {\n      this._height = height;\n    }\n\n    /**\n     * Return the width of the object.\n     * @return The width of the object\n     */\n    getWidth(): float {\n      return this._width;\n    }\n\n    /**\n     * Return the width of the object.\n     * @return The height of the object\n     */\n    getHeight(): float {\n      return this._height;\n    }\n\n    /**\n     * Get the text entered in the text input.\n     */\n    getString() {\n      return this._string;\n    }\n\n    /**\n     * Replace the text inside the text input.\n     */\n    setString(newString: string) {\n      if (newString === this._string) return;\n\n      this._string = newString;\n      this._renderer.updateString();\n    }\n\n    /**\n     * Called by the renderer when the value of the input shown on the screen\n     * was changed (because the user typed something).\n     * This does not propagate back the value to the renderer, which would\n     * result in the cursor being sent back to the end of the text.\n     *\n     * Do not use this if you are not inside the renderer - use `setString` instead.\n     */\n    onRendererInputValueChanged(inputValue: string) {\n      this._string = inputValue;\n    }\n\n    getFontResourceName() {\n      return this._fontResourceName;\n    }\n\n    setFontResourceName(resourceName: string) {\n      if (this._fontResourceName === resourceName) return;\n\n      this._fontResourceName = resourceName;\n      this._renderer.updateFont();\n    }\n\n    getFontSize() {\n      return this._fontSize;\n    }\n\n    setFontSize(newSize: number) {\n      this._fontSize = newSize;\n    }\n\n    /**\n     * Get the placeholder shown when no text is entered\n     */\n    getPlaceholder() {\n      return this._placeholder;\n    }\n\n    /**\n     * Replace the text inside the text input.\n     */\n    setPlaceholder(newPlaceholder: string) {\n      if (newPlaceholder === this._placeholder) return;\n\n      this._placeholder = newPlaceholder;\n      this._renderer.updatePlaceholder();\n    }\n\n    /**\n     * Get the type of the input.\n     */\n    getInputType() {\n      return this._inputType;\n    }\n\n    /**\n     * Set the type of the input.\n     */\n    setInputType(newInputType: string) {\n      const lowercasedNewInputType = newInputType.toLowerCase();\n      if (lowercasedNewInputType === this._inputType) return;\n\n      this._inputType = parseInputType(lowercasedNewInputType);\n      this._renderer.updateInputType();\n    }\n\n    setTextColor(newColor: string) {\n      this._textColor = gdjs.rgbOrHexToRGBColor(newColor);\n      this._renderer.updateTextColor();\n    }\n\n    getTextColor(): string {\n      return (\n        this._textColor[0] + ';' + this._textColor[1] + ';' + this._textColor[2]\n      );\n    }\n\n    _getRawTextColor(): [float, float, float] {\n      return this._textColor;\n    }\n\n    setFillColor(newColor: string) {\n      this._fillColor = gdjs.rgbOrHexToRGBColor(newColor);\n      this._renderer.updateFillColorAndOpacity();\n    }\n\n    getFillColor(): string {\n      return (\n        this._fillColor[0] + ';' + this._fillColor[1] + ';' + this._fillColor[2]\n      );\n    }\n\n    _getRawFillColor(): [float, float, float] {\n      return this._fillColor;\n    }\n\n    setFillOpacity(newOpacity: float) {\n      this._fillOpacity = Math.max(0, Math.min(255, newOpacity));\n      this._renderer.updateFillColorAndOpacity();\n    }\n\n    getFillOpacity(): float {\n      return this._fillOpacity;\n    }\n\n    setBorderColor(newColor: string) {\n      this._borderColor = gdjs.rgbOrHexToRGBColor(newColor);\n      this._renderer.updateBorderColorAndOpacity();\n    }\n\n    getBorderColor(): string {\n      return (\n        this._borderColor[0] +\n        ';' +\n        this._borderColor[1] +\n        ';' +\n        this._borderColor[2]\n      );\n    }\n\n    _getRawBorderColor(): [float, float, float] {\n      return this._borderColor;\n    }\n\n    setBorderOpacity(newOpacity: float) {\n      this._borderOpacity = Math.max(0, Math.min(255, newOpacity));\n      this._renderer.updateBorderColorAndOpacity();\n    }\n\n    getBorderOpacity(): float {\n      return this._borderOpacity;\n    }\n\n    setBorderWidth(width: float) {\n      this._borderWidth = Math.max(0, width);\n      this._renderer.updateBorderWidth();\n    }\n\n    getBorderWidth(): float {\n      return this._borderWidth;\n    }\n\n    setDisabled(value: boolean) {\n      this._disabled = value;\n      this._renderer.updateDisabled();\n    }\n\n    isDisabled(): boolean {\n      return this._disabled;\n    }\n\n    setReadOnly(value: boolean) {\n      this._readOnly = value;\n      this._renderer.updateReadOnly();\n    }\n\n    isReadOnly(): boolean {\n      return this._readOnly;\n    }\n\n    isFocused(): boolean {\n      return this._renderer.isFocused();\n    }\n\n    focus(): void {\n      this._renderer.focus();\n    }\n  }\n  gdjs.registerObject(\n    'TextInput::TextInputObject',\n    gdjs.TextInputRuntimeObject\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
