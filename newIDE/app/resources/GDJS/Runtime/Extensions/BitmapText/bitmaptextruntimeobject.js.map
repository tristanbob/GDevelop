{
  "version": 3,
  "sources": ["../../../../../../../Extensions/BitmapText/bitmaptextruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  /** Base parameters for {@link gdjs.BitmapTextRuntimeObject} */\n  export type BitmapTextObjectDataType = {\n    /** The base parameters of the Bitmap Text */\n    content: {\n      /** The opacity of the text. */\n      opacity: float;\n      /** Content of the text. */\n      text: string;\n      /** The tint of the text. */\n      tint: string;\n      /** The name of the resource containing the bitmap font for the text. */\n      bitmapFontResourceName: string;\n      /** The name of the resource containing the atlas image file for the text. */\n      textureAtlasResourceName: string;\n      /** The scale of the text. */\n      scale: float;\n      /** Activate word wrap if set to true. */\n      wordWrap: boolean;\n      /** Wrapping with from custom size properties. */\n      wrappingWidth: float;\n      /** Alignment of the text. */\n      align: 'left' | 'center' | 'right';\n    };\n  };\n  export type BitmapTextObjectData = ObjectData & BitmapTextObjectDataType;\n\n  /**\n   * Displays a text using a \"Bitmap Font\", generated in a external editor like bmFont.\n   * This is more efficient/faster to render than a traditional text (which needs\n   * to have its whole texture re-rendered anytime it changes).\n   *\n   * Bitmap Font can be created with softwares like:\n   * * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/|http://www.angelcode.com/products/bmfont/\n   * * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner|http://www.71squared.com/en/glyphdesigner\n   * * Littera (Web-based, free): http://kvazars.com/littera/|http://kvazars.com/littera/\n   */\n  export class BitmapTextRuntimeObject extends gdjs.RuntimeObject {\n    _opacity: float;\n    _text: string;\n    /** color in format [r, g, b], where each component is in the range [0, 255] */\n    _tint: integer[];\n    _bitmapFontResourceName: string;\n    _textureAtlasResourceName: string;\n    _scale: number;\n    _wordWrap: boolean;\n    _wrappingWidth: float;\n    _align: string;\n\n    _renderer: gdjs.BitmapTextRuntimeObjectPixiRenderer;\n\n    /**\n     * @param instanceContainer The container the object belongs to.\n     * @param objectData The object data used to initialize the object\n     */\n    constructor(\n      instanceContainer: gdjs.RuntimeInstanceContainer,\n      objectData: BitmapTextObjectData\n    ) {\n      super(instanceContainer, objectData);\n\n      this._opacity = objectData.content.opacity;\n      this._text = objectData.content.text;\n      this._tint = gdjs.rgbOrHexToRGBColor(objectData.content.tint);\n\n      this._bitmapFontResourceName = objectData.content.bitmapFontResourceName; // fnt/xml files\n      this._textureAtlasResourceName =\n        objectData.content.textureAtlasResourceName; // texture file used with fnt/xml (bitmap font file)\n      this._scale = objectData.content.scale;\n      this._wordWrap = objectData.content.wordWrap;\n      this._wrappingWidth = 0;\n      this._align = objectData.content.align;\n\n      this._renderer = new gdjs.BitmapTextRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    // @ts-ignore\n    updateFromObjectData(\n      oldObjectData: BitmapTextObjectDataType,\n      newObjectData: BitmapTextObjectDataType\n    ): boolean {\n      if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n        this.setOpacity(newObjectData.content.opacity);\n      }\n      if (oldObjectData.content.text !== newObjectData.content.text) {\n        this.setText(newObjectData.content.text);\n      }\n      if (oldObjectData.content.tint !== newObjectData.content.tint) {\n        this._tint = gdjs.rgbOrHexToRGBColor(newObjectData.content.tint);\n        this._renderer.updateTint();\n      }\n      if (\n        oldObjectData.content.bitmapFontResourceName !==\n        newObjectData.content.bitmapFontResourceName\n      ) {\n        this.setBitmapFontResourceName(\n          newObjectData.content.bitmapFontResourceName\n        );\n      }\n      if (\n        oldObjectData.content.textureAtlasResourceName !==\n        newObjectData.content.textureAtlasResourceName\n      ) {\n        this.setTextureAtlasResourceName(\n          newObjectData.content.textureAtlasResourceName\n        );\n      }\n      if (oldObjectData.content.scale !== newObjectData.content.scale) {\n        this.setScale(newObjectData.content.scale);\n      }\n      if (oldObjectData.content.wordWrap !== newObjectData.content.wordWrap) {\n        this.setWordWrap(newObjectData.content.wordWrap);\n      }\n      if (oldObjectData.content.align !== newObjectData.content.align) {\n        this.setAlignment(newObjectData.content.align);\n      }\n\n      return true;\n    }\n\n    /**\n     * Initialize the extra parameters that could be set for an instance.\n     */\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWrappingWidth(initialInstanceData.width);\n      }\n    }\n\n    onDestroyFromScene(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      super.onDestroyFromScene(instanceContainer);\n      this._renderer.onDestroy();\n    }\n\n    /**\n     * Set the text to display.\n     */\n    setText(text: string): void {\n      this._text = text;\n      this._renderer.updateTextContent();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the text displayed by the object.\n     */\n    getText(): string {\n      return this._text;\n    }\n\n    setTint(rgbColorString: string): void {\n      this._tint = gdjs.rgbOrHexToRGBColor(rgbColorString);\n      this._renderer.updateTint();\n    }\n\n    getTint(): string {\n      return this._tint[0] + ';' + this._tint[1] + ';' + this._tint[2];\n    }\n\n    setScale(scale: float): void {\n      this._scale = scale;\n      this._renderer.updateScale();\n      this.invalidateHitboxes();\n    }\n\n    getScale(): float {\n      return this._scale;\n    }\n\n    getFontSize(): float {\n      return this._renderer.getFontSize();\n    }\n\n    setBitmapFontAndTextureAtlasResourceName(\n      bitmapFontResourceName: string,\n      textureAtlasResourceName: string\n    ): void {\n      if (bitmapFontResourceName) {\n        this.setBitmapFontResourceName(bitmapFontResourceName);\n        this._renderer.updateFont();\n      }\n      if (textureAtlasResourceName) {\n        this.setTextureAtlasResourceName(textureAtlasResourceName);\n        this._renderer.updateFont();\n      }\n    }\n\n    setBitmapFontResourceName(bitmapFontResourceName: string): void {\n      this._bitmapFontResourceName = bitmapFontResourceName;\n    }\n\n    getBitmapFontResourceName(): string {\n      return this._bitmapFontResourceName;\n    }\n\n    setTextureAtlasResourceName(textureAtlasResourceName: string): void {\n      this._textureAtlasResourceName = textureAtlasResourceName;\n    }\n\n    getTextureAtlasResourceName(): string {\n      return this._textureAtlasResourceName;\n    }\n\n    setAlignment(align: string): void {\n      this._align = align;\n      this._renderer.updateAlignment();\n    }\n\n    getAlignment(): string {\n      return this._align;\n    }\n\n    /**\n     * Set object position on X axis.\n     * @param x The new position X of the object.\n     */\n    setX(x: float): void {\n      super.setX(x);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set object position on Y axis.\n     * @param y The new position Y of the object.\n     */\n    setY(y: float): void {\n      super.setY(y);\n      this._renderer.updatePosition();\n    }\n\n    /**\n     * Set the angle of the object.\n     * @param angle The new angle of the object.\n     */\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     * @param opacity The new opacity of the object (0-255).\n     */\n    setOpacity(opacity: float): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this._opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity(): float {\n      return this._opacity;\n    }\n\n    /**\n     * Set the wrapping width.\n     * @param width The new width in pixels.\n     */\n    setWrappingWidth(width: float): void {\n      this._wrappingWidth = width;\n      this._renderer.updateWrappingWidth();\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the wrapping width of the object.\n     */\n    getWrappingWidth(): float {\n      return this._wrappingWidth;\n    }\n\n    setWordWrap(wordWrap: boolean): void {\n      this._wordWrap = wordWrap;\n      this._renderer.updateWrappingWidth();\n      this.invalidateHitboxes();\n    }\n\n    getWordWrap(): boolean {\n      return this._wordWrap;\n    }\n\n    /**\n     * Get the width of the object.\n     */\n    getWidth(): float {\n      return this._renderer.getWidth();\n    }\n\n    /**\n     * Get the height of the object.\n     */\n    getHeight(): float {\n      return this._renderer.getHeight();\n    }\n  }\n  gdjs.registerObject(\n    'BitmapText::BitmapTextObject',\n    // @ts-ignore\n    gdjs.BitmapTextRuntimeObject\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
