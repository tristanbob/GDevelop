{
  "version": 3,
  "sources": ["../../../../../../../Extensions/TileMap/tilemapruntimeobject.ts"],
  "sourcesContent": ["/// <reference path=\"helper/TileMapHelper.d.ts\" />\nnamespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  /**\n   * Displays a Tilemap object (mapeditor.org supported).\n   */\n  export class TileMapRuntimeObject extends gdjs.RuntimeObject {\n    _frameElapsedTime: float = 0;\n    _opacity: float;\n    _tilemapJsonFile: string;\n    _tilesetJsonFile: string;\n    _tilemapAtlasImage: string;\n    _displayMode: string;\n    _layerIndex: integer;\n    _levelIndex: integer;\n    _animationSpeedScale: number;\n    _animationFps: number;\n    _tileMapManager: gdjs.TileMap.TileMapRuntimeManager;\n    _renderer: gdjs.TileMapRuntimeObjectPixiRenderer;\n\n    constructor(instanceContainer: gdjs.RuntimeInstanceContainer, objectData) {\n      super(instanceContainer, objectData);\n      this._opacity = objectData.content.opacity;\n      this._tilemapJsonFile = objectData.content.tilemapJsonFile;\n      this._tilesetJsonFile = objectData.content.tilesetJsonFile;\n      this._tilemapAtlasImage = objectData.content.tilemapAtlasImage;\n      this._displayMode = objectData.content.displayMode;\n      this._layerIndex = objectData.content.layerIndex;\n      this._levelIndex = objectData.content.levelIndex;\n      this._animationSpeedScale = objectData.content.animationSpeedScale;\n      this._animationFps = objectData.content.animationFps;\n      this._tileMapManager = gdjs.TileMap.TileMapRuntimeManager.getManager(\n        instanceContainer\n      );\n      this._renderer = new gdjs.TileMapRuntimeObjectRenderer(\n        this,\n        instanceContainer\n      );\n      this._updateTileMap();\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    update(instanceContainer: gdjs.RuntimeInstanceContainer): void {\n      if (this._animationSpeedScale <= 0 || this._animationFps === 0) {\n        return;\n      }\n      const elapsedTime = this.getElapsedTime() / 1000;\n      this._frameElapsedTime += elapsedTime * this._animationSpeedScale;\n      while (this._frameElapsedTime > 1 / this._animationFps) {\n        this._renderer.incrementAnimationFrameX(instanceContainer);\n        this._frameElapsedTime -= 1 / this._animationFps;\n      }\n    }\n\n    updateFromObjectData(oldObjectData: any, newObjectData: any): boolean {\n      if (oldObjectData.content.opacity !== newObjectData.content.opacity) {\n        this.setOpacity(newObjectData.content.opacity);\n      }\n      if (\n        oldObjectData.content.tilemapJsonFile !==\n        newObjectData.content.tilemapJsonFile\n      ) {\n        this.setTilemapJsonFile(newObjectData.content.tilemapJsonFile);\n      }\n      if (\n        oldObjectData.content.tilesetJsonFile !==\n        newObjectData.content.tilesetJsonFile\n      ) {\n        this.setTilesetJsonFile(newObjectData.content.tilesetJsonFile);\n      }\n      if (\n        oldObjectData.content.displayMode !== newObjectData.content.displayMode\n      ) {\n        this.setDisplayMode(newObjectData.content.displayMode);\n      }\n      if (\n        oldObjectData.content.layerIndex !== newObjectData.content.layerIndex\n      ) {\n        this.setLayerIndex(newObjectData.content.layerIndex);\n      }\n      if (\n        oldObjectData.content.levelIndex !== newObjectData.content.levelIndex\n      ) {\n        this.setLevelIndex(newObjectData.content.levelIndex);\n      }\n      if (\n        oldObjectData.content.animationSpeedScale !==\n        newObjectData.content.animationSpeedScale\n      ) {\n        this.setAnimationSpeedScale(newObjectData.content.animationSpeedScale);\n      }\n      if (\n        oldObjectData.content.animationFps !==\n        newObjectData.content.animationFps\n      ) {\n        this.setAnimationFps(newObjectData.content.animationFps);\n      }\n      if (\n        oldObjectData.content.tilemapAtlasImage !==\n        newObjectData.content.tilemapAtlasImage\n      ) {\n        // TODO: support changing the atlas texture\n        return false;\n      }\n      return true;\n    }\n\n    extraInitializationFromInitialInstance(initialInstanceData): void {\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n    }\n\n    private _updateTileMap(): void {\n      this._tileMapManager.getOrLoadTileMap(\n        this._tilemapJsonFile,\n        this._tilesetJsonFile,\n        this._levelIndex,\n        (tileMap: TileMapHelper.EditableTileMap | null) => {\n          if (!tileMap) {\n            // getOrLoadTileMap already warn.\n            return;\n          }\n          this._tileMapManager.getOrLoadTextureCache(\n            (textureName) => {\n              const game = this.getInstanceContainer().getGame();\n              const mappedName = game.resolveEmbeddedResource(\n                this._tilemapJsonFile,\n                textureName\n              );\n              return (game\n                .getImageManager()\n                .getPIXITexture(mappedName) as unknown) as PIXI.BaseTexture<\n                PIXI.Resource\n              >;\n            },\n            this._tilemapAtlasImage,\n            this._tilemapJsonFile,\n            this._tilesetJsonFile,\n            this._levelIndex,\n            (textureCache: TileMapHelper.TileTextureCache | null) => {\n              if (!textureCache) {\n                // getOrLoadTextureCache already log warns and errors.\n                return;\n              }\n              this._renderer.updatePixiTileMap(tileMap, textureCache);\n            }\n          );\n        }\n      );\n    }\n\n    /**\n     * Set the Tilemap file to display.\n     */\n    setTilemapJsonFile(tilemapJsonFile: string): void {\n      this._tilemapJsonFile = tilemapJsonFile;\n      this._updateTileMap();\n    }\n\n    getTilemapJsonFile(): string {\n      return this._tilemapJsonFile;\n    }\n\n    isTilemapJsonFile(selectedTilemapJsonFile: string): boolean {\n      return this._tilemapJsonFile === selectedTilemapJsonFile;\n    }\n\n    setTilesetJsonFile(tilesetJsonFile: string): void {\n      this._tilesetJsonFile = tilesetJsonFile;\n      this._updateTileMap();\n    }\n\n    getTilesetJsonFile(): string {\n      return this._tilesetJsonFile;\n    }\n\n    setAnimationFps(animationFps: float) {\n      this._animationFps = animationFps;\n    }\n\n    getAnimationFps(): float {\n      return this._animationFps;\n    }\n\n    isTilesetJsonFile(selectedTilesetJsonFile: string): boolean {\n      return this._tilesetJsonFile === selectedTilesetJsonFile;\n    }\n\n    isDisplayMode(selectedDisplayMode: string): boolean {\n      return this._displayMode === selectedDisplayMode;\n    }\n\n    setDisplayMode(displayMode: string): void {\n      this._displayMode = displayMode;\n      this._updateTileMap();\n    }\n\n    getDisplayMode(): string {\n      return this._displayMode;\n    }\n\n    setLayerIndex(layerIndex): void {\n      this._layerIndex = layerIndex;\n      this._updateTileMap();\n    }\n\n    getLayerIndex(): integer {\n      return this._layerIndex;\n    }\n\n    setLevelIndex(levelIndex): void {\n      this._levelIndex = levelIndex;\n      this._updateTileMap();\n    }\n\n    getLevelIndex() {\n      return this._levelIndex;\n    }\n\n    setAnimationSpeedScale(animationSpeedScale): void {\n      this._animationSpeedScale = animationSpeedScale;\n    }\n\n    getAnimationSpeedScale(): float {\n      return this._animationSpeedScale;\n    }\n\n    /**\n     * Change the width of the object. This changes the scale on X axis of the object.\n     *\n     * @param width The new width of the object, in pixels.\n     */\n    setWidth(width: float): void {\n      if (this.getWidth() === width) return;\n\n      this._renderer.setWidth(width);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Change the height of the object. This changes the scale on Y axis of the object.\n     *\n     * @param height The new height of the object, in pixels.\n     */\n    setHeight(height: float): void {\n      if (this.getHeight() === height) return;\n\n      this._renderer.setHeight(height);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Get the scale of the object (or the geometric mean of the X and Y scale in case they are different).\n     *\n     * @return the scale of the object (or the geometric mean of the X and Y scale in case they are different).\n     */\n    getScale(): number {\n      const scaleX = this.getScaleX();\n      const scaleY = this.getScaleY();\n      return scaleX === scaleY ? scaleX : Math.sqrt(scaleX * scaleY);\n    }\n\n    /**\n     * Change the scale on X and Y axis of the object.\n     *\n     * @param scale The new scale (must be greater than 0).\n     */\n    setScale(scale: float): void {\n      this.setScaleX(scale);\n      this.setScaleY(scale);\n    }\n\n    /**\n     * Change the scale on X axis of the object (changing its width).\n     *\n     * @param scaleX The new scale (must be greater than 0).\n     */\n    setScaleX(scaleX: float): void {\n      if (scaleX < 0) {\n        scaleX = 0;\n      }\n      if (this.getScaleX() === scaleX) return;\n\n      this._renderer.setScaleX(scaleX);\n      this.invalidateHitboxes();\n    }\n\n    /**\n     * Change the scale on Y axis of the object (changing its width).\n     *\n     * @param scaleY The new scale (must be greater than 0).\n     */\n    setScaleY(scaleY: float): void {\n      if (scaleY < 0) {\n        scaleY = 0;\n      }\n      if (this.getScaleY() === scaleY) return;\n\n      this._renderer.setScaleY(scaleY);\n      this.invalidateHitboxes();\n    }\n\n    setX(x: float): void {\n      super.setX(x);\n      this._renderer.updatePosition();\n    }\n\n    setY(y: float): void {\n      super.setY(y);\n      this._renderer.updatePosition();\n    }\n\n    setAngle(angle: float): void {\n      super.setAngle(angle);\n      this._renderer.updateAngle();\n    }\n\n    /**\n     * Set object opacity.\n     * @param opacity The new opacity of the object (0-255).\n     */\n    setOpacity(opacity: float): void {\n      this._opacity = opacity;\n      this._renderer.updateOpacity();\n    }\n\n    /**\n     * Get object opacity.\n     */\n    getOpacity(): float {\n      return this._opacity;\n    }\n\n    getWidth(): float {\n      return this._renderer.getWidth();\n    }\n\n    getHeight(): float {\n      return this._renderer.getHeight();\n    }\n\n    getScaleX(): float {\n      return this._renderer.getScaleX();\n    }\n\n    getScaleY(): float {\n      return this._renderer.getScaleY();\n    }\n  }\n  gdjs.registerObject('TileMap::TileMap', gdjs.TileMapRuntimeObject);\n}\n"],
  "mappings": "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",
  "names": []
}
