{
  "version": 3,
  "sources": ["../../../../../../../Extensions/Lighting/lightruntimeobject.ts"],
  "sourcesContent": ["namespace gdjs {\n  export type LightObjectDataType = {\n    /** The base parameters of light object. */\n    content: {\n      /** The radius of light object. */\n      radius: number;\n      /** A string representing color in hexadecimal format. */\n      color: string;\n      /** A string representing the name of texture used for light object. */\n      texture: string;\n      /** true if the light objects shows debug graphics, false otherwise. */\n      debugMode: boolean;\n    };\n  };\n\n  export type LightObjectData = ObjectData & LightObjectDataType;\n\n  /**\n   * Displays a Light object.\n   */\n  export class LightRuntimeObject extends gdjs.RuntimeObject {\n    _radius: number;\n\n    /** color in format [r, g, b], where each component is in the range [0, 255] */\n    _color: integer[];\n    _debugMode: boolean;\n    _texture: string;\n    _obstaclesManager: gdjs.LightObstaclesManager;\n    _renderer: gdjs.LightRuntimeObjectRenderer;\n    _instanceContainer: gdjs.RuntimeScene;\n\n    constructor(\n      runtimeScene: gdjs.RuntimeScene,\n      lightObjectData: LightObjectData\n    ) {\n      super(runtimeScene, lightObjectData);\n      this._radius =\n        lightObjectData.content.radius > 0 ? lightObjectData.content.radius : 1;\n      this._color = gdjs.rgbOrHexToRGBColor(lightObjectData.content.color);\n      this._debugMode = lightObjectData.content.debugMode;\n      this._texture = lightObjectData.content.texture;\n      this._obstaclesManager = gdjs.LightObstaclesManager.getManager(\n        runtimeScene\n      );\n      this._renderer = new gdjs.LightRuntimeObjectRenderer(this, runtimeScene);\n      this._instanceContainer = runtimeScene;\n\n      // *ALWAYS* call `this.onCreated()` at the very end of your object constructor.\n      this.onCreated();\n    }\n\n    static hexToRGBColor(hex) {\n      const hexNumber = parseInt(hex.replace('#', ''), 16);\n      return [(hexNumber >> 16) & 255, (hexNumber >> 8) & 255, hexNumber & 255];\n    }\n\n    getRendererObject() {\n      return this._renderer.getRendererObject();\n    }\n\n    updateFromObjectData(\n      oldObjectData: LightObjectData,\n      newObjectData: LightObjectData\n    ): boolean {\n      if (oldObjectData.content.radius !== newObjectData.content.radius) {\n        this.setRadius(newObjectData.content.radius);\n      }\n      if (oldObjectData.content.color !== newObjectData.content.color) {\n        this._color = gdjs.rgbOrHexToRGBColor(newObjectData.content.color);\n        this._renderer.updateColor();\n      }\n      if (oldObjectData.content.texture !== newObjectData.content.texture) {\n        this._texture = newObjectData.content.texture;\n        this._renderer.updateMesh();\n      }\n      if (oldObjectData.content.debugMode !== newObjectData.content.debugMode) {\n        this._debugMode = newObjectData.content.debugMode;\n        this._renderer.updateDebugMode();\n      }\n      return true;\n    }\n\n    updatePreRender(): void {\n      this._renderer.ensureUpToDate();\n    }\n\n    /**\n     * Get the radius of the light object.\n     * @returns radius of the light object.\n     */\n    getRadius(): number {\n      return this._radius;\n    }\n\n    /**\n     * Set the radius of the light object.\n     */\n    setRadius(radius: number): void {\n      this._radius = radius > 0 ? radius : 1;\n      this._renderer.updateRadius();\n    }\n\n    /**\n     * Get the height of the light object.\n     * @returns height of light object.\n     */\n    getHeight(): float {\n      return 2 * this._radius;\n    }\n\n    /**\n     * Get the width of the light object.\n     * @returns width of light object.\n     */\n    getWidth(): float {\n      return 2 * this._radius;\n    }\n\n    /**\n     * Get the x co-ordinate of the top-left vertex/point of light object.\n     * @returns x co-ordinate of the top-left vertex/point.\n     */\n    getDrawableX(): float {\n      return this.x - this._radius;\n    }\n\n    /**\n     * Get the y co-ordinate of the top-left vertex/point of light object.\n     * @returns y co-ordinate of the top-left vertex/point.\n     */\n    getDrawableY(): float {\n      return this.y - this._radius;\n    }\n\n    /**\n     * Get the color of the light object as a \"R;G;B\" string.\n     * @returns the color of light object in \"R;G;B\" format.\n     */\n    getColor(): string {\n      return this._color[0] + ';' + this._color[1] + ';' + this._color[2];\n    }\n\n    /**\n     * Set the color of the light object in format \"R;G;B\" string, with components in the range of [0-255].\n     */\n    setColor(color: string): void {\n      this._color = gdjs.rgbOrHexToRGBColor(color);\n      this._renderer.updateColor();\n    }\n\n    /**\n     * Get the light obstacles manager.\n     * @returns the light obstacles manager.\n     */\n    getObstaclesManager(): gdjs.LightObstaclesManager {\n      return this._obstaclesManager;\n    }\n\n    /**\n     * Returns true if the light shows debug graphics, false otherwise.\n     * @returns true if debug mode is activated.\n     */\n    getDebugMode(): boolean {\n      return this._debugMode;\n    }\n\n    /**\n     * Returns the path of texture resource.\n     * @returns the path of texture.\n     */\n    getTexture(): string {\n      return this._texture;\n    }\n  }\n  gdjs.registerObject('Lighting::LightObject', gdjs.LightRuntimeObject);\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CAoBS,eAAiC,GAAK,aAAc,CAWzD,YACE,EACA,EACA,CACA,MAAM,EAAc,GACpB,KAAK,QACH,EAAgB,QAAQ,OAAS,EAAI,EAAgB,QAAQ,OAAS,EACxE,KAAK,OAAS,EAAK,mBAAmB,EAAgB,QAAQ,OAC9D,KAAK,WAAa,EAAgB,QAAQ,UAC1C,KAAK,SAAW,EAAgB,QAAQ,QACxC,KAAK,kBAAoB,EAAK,sBAAsB,WAClD,GAEF,KAAK,UAAY,GAAI,GAAK,2BAA2B,KAAM,GAC3D,KAAK,mBAAqB,EAG1B,KAAK,kBAGA,eAAc,EAAK,CACxB,KAAM,GAAY,SAAS,EAAI,QAAQ,IAAK,IAAK,IACjD,MAAO,CAAE,GAAa,GAAM,IAAM,GAAa,EAAK,IAAK,EAAY,KAGvE,mBAAoB,CAClB,MAAO,MAAK,UAAU,oBAGxB,qBACE,EACA,EACS,CACT,MAAI,GAAc,QAAQ,SAAW,EAAc,QAAQ,QACzD,KAAK,UAAU,EAAc,QAAQ,QAEnC,EAAc,QAAQ,QAAU,EAAc,QAAQ,OACxD,MAAK,OAAS,EAAK,mBAAmB,EAAc,QAAQ,OAC5D,KAAK,UAAU,eAEb,EAAc,QAAQ,UAAY,EAAc,QAAQ,SAC1D,MAAK,SAAW,EAAc,QAAQ,QACtC,KAAK,UAAU,cAEb,EAAc,QAAQ,YAAc,EAAc,QAAQ,WAC5D,MAAK,WAAa,EAAc,QAAQ,UACxC,KAAK,UAAU,mBAEV,GAGT,iBAAwB,CACtB,KAAK,UAAU,iBAOjB,WAAoB,CAClB,MAAO,MAAK,QAMd,UAAU,EAAsB,CAC9B,KAAK,QAAU,EAAS,EAAI,EAAS,EACrC,KAAK,UAAU,eAOjB,WAAmB,CACjB,MAAO,GAAI,KAAK,QAOlB,UAAkB,CAChB,MAAO,GAAI,KAAK,QAOlB,cAAsB,CACpB,MAAO,MAAK,EAAI,KAAK,QAOvB,cAAsB,CACpB,MAAO,MAAK,EAAI,KAAK,QAOvB,UAAmB,CACjB,MAAO,MAAK,OAAO,GAAK,IAAM,KAAK,OAAO,GAAK,IAAM,KAAK,OAAO,GAMnE,SAAS,EAAqB,CAC5B,KAAK,OAAS,EAAK,mBAAmB,GACtC,KAAK,UAAU,cAOjB,qBAAkD,CAChD,MAAO,MAAK,kBAOd,cAAwB,CACtB,MAAO,MAAK,WAOd,YAAqB,CACnB,MAAO,MAAK,UAvJT,EAAM,qBA0Jb,EAAK,eAAe,wBAAyB,EAAK,sBA9K1C",
  "names": []
}
