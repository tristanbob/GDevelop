{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/logger.ts"],
  "sourcesContent": ["namespace gdjs {\n  /**\n   * A LoggerOutput specifies a single method to be called to display\n   * or register a log.\n   */\n  export interface LoggerOutput {\n    log(\n      group: string,\n      message: string,\n      type: 'info' | 'warning' | 'error',\n      internal?: boolean\n    ): void;\n  }\n\n  const supportedConsoleFunctions = {\n    info: console.log,\n    warning: console.warn,\n    error: console.error,\n  };\n\n  /**\n   * The default logging output: uses the JavaScript console.\n   */\n  class ConsoleLoggerOutput implements LoggerOutput {\n    private readonly discardedConsoleGroups = new Set<string>();\n\n    discardGroup(groupName: string) {\n      this.discardedConsoleGroups.add(groupName);\n    }\n\n    enableGroup(groupName: string) {\n      this.discardedConsoleGroups.delete(groupName);\n    }\n\n    log(\n      group: string,\n      message: string,\n      type: 'info' | 'warning' | 'error' = 'info',\n      internal = true\n    ): void {\n      if (this.discardedConsoleGroups.has(group)) return;\n\n      const logger =\n        supportedConsoleFunctions[type] || supportedConsoleFunctions.info;\n      logger(`[${group}] ${message}`);\n    }\n  }\n\n  const consoleLoggerOutput = new ConsoleLoggerOutput();\n\n  /**\n   * The current output method - can be changed at runtime.\n   * By default, output to the JavaScript console.\n   */\n  let loggerOutput: LoggerOutput = consoleLoggerOutput;\n\n  function objectsToString(objects: any[]): string {\n    return objects.reduce(\n      (accumulator, value) => accumulator + value.toString(),\n      ''\n    );\n  }\n\n  /**\n   * A Console API like class for logging in a GDevelop game.\n   */\n  export class Logger {\n    private readonly group: string;\n\n    /**\n     * Create a new logger with the given group name.\n     * You can then use log, info, warn and error on this object.\n     */\n    constructor(group: string) {\n      this.group = group;\n    }\n\n    log(...messages: any[]): void {\n      loggerOutput.log(this.group, objectsToString(messages), 'info');\n    }\n\n    info(...messages: any[]): void {\n      loggerOutput.log(this.group, objectsToString(messages), 'info');\n    }\n\n    warn(...messages: any[]): void {\n      loggerOutput.log(this.group, objectsToString(messages), 'warning');\n    }\n\n    error(...messages: any[]): void {\n      loggerOutput.log(this.group, objectsToString(messages), 'error');\n    }\n\n    /**\n     * Give access to the console output used by default by the logger.\n     * This can be useful to restore the default log method if you overrode it\n     * or to disable some logging in the console.\n     */\n    static getDefaultConsoleLoggerOutput() {\n      return consoleLoggerOutput;\n    }\n\n    /**\n     * Return the current logger output (common to all gdjs.Logger instances).\n     */\n    static getLoggerOutput(): LoggerOutput {\n      return loggerOutput;\n    }\n\n    /**\n     * Change the logger output (common to all gdjs.Logger instances).\n     */\n    static setLoggerOutput(newLoggerOutput: LoggerOutput) {\n      loggerOutput = newLoggerOutput;\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CAcE,KAAM,GAA4B,CAChC,KAAM,QAAQ,IACd,QAAS,QAAQ,KACjB,MAAO,QAAQ,OAMjB,OAAkD,CAAlD,aAvBF,CAwBqB,4BAAyB,GAAI,KAE9C,aAAa,EAAmB,CAC9B,KAAK,uBAAuB,IAAI,GAGlC,YAAY,EAAmB,CAC7B,KAAK,uBAAuB,OAAO,GAGrC,IACE,EACA,EACA,EAAqC,OACrC,EAAW,GACL,CACN,GAAI,KAAK,uBAAuB,IAAI,GAAQ,OAI5C,AADE,GAA0B,IAAS,EAA0B,MACxD,IAAI,MAAU,MAIzB,KAAM,GAAsB,GAAI,GAMhC,GAAI,GAA6B,EAEjC,WAAyB,EAAwB,CAC/C,MAAO,GAAQ,OACb,CAAC,EAAa,IAAU,EAAc,EAAM,WAC5C,IAOG,OAAa,CAOlB,YAAY,EAAe,CACzB,KAAK,MAAQ,EAGf,OAAO,EAAuB,CAC5B,EAAa,IAAI,KAAK,MAAO,EAAgB,GAAW,QAG1D,QAAQ,EAAuB,CAC7B,EAAa,IAAI,KAAK,MAAO,EAAgB,GAAW,QAG1D,QAAQ,EAAuB,CAC7B,EAAa,IAAI,KAAK,MAAO,EAAgB,GAAW,WAG1D,SAAS,EAAuB,CAC9B,EAAa,IAAI,KAAK,MAAO,EAAgB,GAAW,eAQnD,gCAAgC,CACrC,MAAO,SAMF,kBAAgC,CACrC,MAAO,SAMF,iBAAgB,EAA+B,CACpD,EAAe,GA/CZ,EAAM,WAlEL",
  "names": []
}
