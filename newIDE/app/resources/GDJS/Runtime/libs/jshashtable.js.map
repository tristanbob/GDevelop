{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/libs/jshashtable.ts"],
  "sourcesContent": ["/**\n * A generic map (key-value) container.\n *\n * Used notably for storing lists of objects for\n * GDevelop generated events.\n */\nclass Hashtable<T> {\n  /**\n   * The content of the Hashtable. Prefer using methods rather\n   * than accessing this internal object, unless you need to iterate\n   * on the values.\n   */\n  items: { [key: string]: T } = {};\n\n  /**\n   * Construct a Hashtable from a JS object.\n   *\n   * @param items The content of the Hashtable.\n   * @returns The new hashtable.\n   * @static\n   */\n  static newFrom<T>(items: { [key: string]: T }): Hashtable<T> {\n    const hashtable = new Hashtable<T>();\n    hashtable.items = items;\n    return hashtable;\n  }\n\n  /**\n   * Add a key-value pair to the Hashtable.\n   * If a value already exists for this key, it is overwritten.\n   *\n   * @param key The key.\n   * @param value The value to associate to the key.\n   */\n  put(key: string | number, value: T) {\n    this.items[key] = value;\n  }\n\n  /**\n   * Get a value corresponding to a key, or undefined if not found.\n   *\n   * @param key The key associated to the value.\n   */\n  get(key: string | number) {\n    return this.items[key];\n  }\n\n  /**\n   * Verify if a key exists in the Hashtable.\n   *\n   * @param key The key to search in the Hashtable.\n   * @returns true if the key exists.\n   */\n  containsKey(key: string | number): boolean {\n    return this.items.hasOwnProperty(key);\n  }\n\n  /**\n   * Remove the value associated to the specified key.\n   *\n   * @param key The key to remove.\n   */\n  remove(key: string | number) {\n    delete this.items[key];\n  }\n\n  /**\n   * Get the first key of the Hashtable.\n   *\n   * @returns The first key of the Hashtable, or undefined if empty.\n   */\n  firstKey(): string | number | null {\n    for (const k in this.items) {\n      if (this.items.hasOwnProperty(k)) {\n        return k;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Dump all the keys of the Hashtable to an array (which is cleared first).\n   *\n   * @param result The Array where the result gets pushed.\n   */\n  keys(result: string[]) {\n    result.length = 0;\n    for (const k in this.items) {\n      if (this.items.hasOwnProperty(k)) {\n        result.push(k);\n      }\n    }\n  }\n\n  /**\n   * Dump all the values of the Hashtable to an array (which is cleared first).\n   *\n   * @param result The Array where the results get pushed.\n   */\n  values(result: Array<T>) {\n    result.length = 0;\n    for (const k in this.items) {\n      if (this.items.hasOwnProperty(k)) {\n        result.push(this.items[k]);\n      }\n    }\n  }\n\n  /**\n   * Clear the Hashtable.\n   */\n  clear() {\n    for (const k in this.items) {\n      if (this.items.hasOwnProperty(k)) {\n        delete this.items[k];\n      }\n    }\n  }\n}\n"],
  "mappings": "AAMA,eAAmB,CAAnB,aANA,CAYE,WAA8B,SASvB,SAAW,EAA2C,CAC3D,KAAM,GAAY,GAAI,WACtB,SAAU,MAAQ,EACX,EAUT,IAAI,EAAsB,EAAU,CAClC,KAAK,MAAM,GAAO,EAQpB,IAAI,EAAsB,CACxB,MAAO,MAAK,MAAM,GASpB,YAAY,EAA+B,CACzC,MAAO,MAAK,MAAM,eAAe,GAQnC,OAAO,EAAsB,CAC3B,MAAO,MAAK,MAAM,GAQpB,UAAmC,CACjC,SAAW,KAAK,MAAK,MACnB,GAAI,KAAK,MAAM,eAAe,GAC5B,MAAO,GAGX,MAAO,MAQT,KAAK,EAAkB,CACrB,EAAO,OAAS,EAChB,SAAW,KAAK,MAAK,MACnB,AAAI,KAAK,MAAM,eAAe,IAC5B,EAAO,KAAK,GAUlB,OAAO,EAAkB,CACvB,EAAO,OAAS,EAChB,SAAW,KAAK,MAAK,MACnB,AAAI,KAAK,MAAM,eAAe,IAC5B,EAAO,KAAK,KAAK,MAAM,IAQ7B,OAAQ,CACN,SAAW,KAAK,MAAK,MACnB,AAAI,KAAK,MAAM,eAAe,IAC5B,MAAO,MAAK,MAAM",
  "names": []
}
