{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/CustomRuntimeObject.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2022 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  export type ObjectConfiguration = {\n    content: any;\n  };\n\n  export type CustomObjectConfiguration = ObjectConfiguration & {\n    childrenContent: { [objectName: string]: ObjectConfiguration & any };\n  };\n\n  /**\n   * An object that contains other object.\n   *\n   * This is the base class for objects generated from EventsBasedObject.\n   *\n   * @see gdjs.CustomRuntimeObjectInstanceContainer\n   */\n  export class CustomRuntimeObject extends gdjs.RuntimeObject {\n    /** It contains the children of this object. */\n    _instanceContainer: gdjs.CustomRuntimeObjectInstanceContainer;\n    _isUntransformedHitBoxesDirty: boolean = true;\n    /** It contains shallow copies of the children hitboxes */\n    _untransformedHitBoxes: gdjs.Polygon[] = [];\n    /** The dimension of this object is calculated from its children AABBs. */\n    _unrotatedAABB: AABB = { min: [0, 0], max: [0, 0] };\n    _scaleX: float = 1;\n    _scaleY: float = 1;\n    _flippedX: boolean = false;\n    _flippedY: boolean = false;\n    opacity: float = 255;\n    _customCenter: FloatPoint | null = null;\n    _localTransformation: gdjs.AffineTransformation = new gdjs.AffineTransformation();\n    _localInverseTransformation: gdjs.AffineTransformation = new gdjs.AffineTransformation();\n    _isLocalTransformationDirty: boolean = true;\n\n    /**\n     * @param parent The container the object belongs to\n     * @param objectData The object data used to initialize the object\n     */\n    constructor(\n      parent: gdjs.RuntimeInstanceContainer,\n      objectData: ObjectData & CustomObjectConfiguration\n    ) {\n      super(parent, objectData);\n      this._instanceContainer = new gdjs.CustomRuntimeObjectInstanceContainer(\n        parent,\n        this\n      );\n\n      this._instanceContainer.loadFrom(objectData);\n      this.getRenderer().reinitialize(this, parent);\n\n      // The generated code calls onCreated at the constructor end\n      // and onCreated calls its super implementation at its end.\n    }\n\n    reinitialize(objectData: ObjectData & CustomObjectConfiguration) {\n      super.reinitialize(objectData);\n\n      this._instanceContainer.loadFrom(objectData);\n      this.getRenderer().reinitialize(this, this.getParent());\n\n      // The generated code calls the onCreated super implementation at the end.\n      this.onCreated();\n    }\n\n    updateFromObjectData(\n      oldObjectData: ObjectData & CustomObjectConfiguration,\n      newObjectData: ObjectData & CustomObjectConfiguration\n    ): boolean {\n      return this._instanceContainer.updateFrom(oldObjectData, newObjectData);\n    }\n\n    extraInitializationFromInitialInstance(initialInstanceData: InstanceData) {\n      if (initialInstanceData.customSize) {\n        this.setWidth(initialInstanceData.width);\n        this.setHeight(initialInstanceData.height);\n      }\n    }\n\n    onDestroyFromScene(parent: gdjs.RuntimeInstanceContainer): void {\n      // Let subclasses do something before the object is destroyed.\n      this.onDestroy(parent);\n      // Let behaviors do something before the object is destroyed.\n      super.onDestroyFromScene(parent);\n      // Destroy the children.\n      this._instanceContainer.onDestroyFromScene(parent);\n    }\n\n    update(parent: gdjs.RuntimeInstanceContainer): void {\n      this._instanceContainer._updateObjectsPreEvents();\n\n      this.doStepPreEvents(parent);\n\n      const profiler = this.getRuntimeScene().getProfiler();\n      if (profiler) {\n        profiler.begin(this.type);\n      }\n      // This is a bit like the \"scene\" events for custom objects.\n      this.doStepPostEvents(parent);\n      if (profiler) {\n        profiler.end(this.type);\n      }\n\n      this._instanceContainer._updateObjectsPostEvents();\n    }\n\n    /**\n     * This method is called when the preview is being hot-reloaded.\n     */\n    onHotReloading(parent: gdjs.RuntimeInstanceContainer) {}\n\n    // This is only to handle trigger once.\n    doStepPreEvents(parent: gdjs.RuntimeInstanceContainer) {}\n\n    /**\n     * This method is called each tick after events are done.\n     * @param parent The instanceContainer owning the object\n     */\n    doStepPostEvents(parent: gdjs.RuntimeInstanceContainer) {}\n\n    /**\n     * This method is called when the object is being removed from its parent\n     * container and is about to be destroyed/reused later.\n     */\n    onDestroy(parent: gdjs.RuntimeInstanceContainer) {}\n\n    updatePreRender(parent: gdjs.RuntimeInstanceContainer): void {\n      this._instanceContainer._updateObjectsPreRender();\n      this.getRenderer().ensureUpToDate();\n    }\n\n    getRendererObject() {\n      return this.getRenderer().getRendererObject();\n    }\n\n    getRenderer() {\n      return this._instanceContainer.getRenderer();\n    }\n\n    onChildrenLocationChanged() {\n      this._isUntransformedHitBoxesDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().update();\n    }\n\n    updateHitBoxes(): void {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n\n      // Update the current hitboxes with the frame custom hit boxes\n      // and apply transformations.\n      const localTransformation = this.getLocalTransformation();\n      for (let i = 0; i < this._untransformedHitBoxes.length; ++i) {\n        if (i >= this.hitBoxes.length) {\n          this.hitBoxes.push(new gdjs.Polygon());\n        }\n        for (\n          let j = 0;\n          j < this._untransformedHitBoxes[i].vertices.length;\n          ++j\n        ) {\n          if (j >= this.hitBoxes[i].vertices.length) {\n            this.hitBoxes[i].vertices.push([0, 0]);\n          }\n          localTransformation.transform(\n            this._untransformedHitBoxes[i].vertices[j],\n            this.hitBoxes[i].vertices[j]\n          );\n        }\n        this.hitBoxes[i].vertices.length = this._untransformedHitBoxes[\n          i\n        ].vertices.length;\n      }\n    }\n\n    /**\n     * Merge the hitboxes of the children.\n     */\n    _updateUntransformedHitBoxes() {\n      this._isUntransformedHitBoxesDirty = false;\n\n      this._untransformedHitBoxes.length = 0;\n      if (this._instanceContainer.getAdhocListOfAllInstances().length === 0) {\n        this._unrotatedAABB.min[0] = 0;\n        this._unrotatedAABB.min[1] = 0;\n        this._unrotatedAABB.max[0] = 0;\n        this._unrotatedAABB.max[1] = 0;\n      } else {\n        let minX = Number.MAX_VALUE;\n        let minY = Number.MAX_VALUE;\n        let maxX = -Number.MAX_VALUE;\n        let maxY = -Number.MAX_VALUE;\n        for (const childInstance of this._instanceContainer.getAdhocListOfAllInstances()) {\n          if (!childInstance.isIncludedInParentCollisionMask()) {\n            continue;\n          }\n          Array.prototype.push.apply(\n            this._untransformedHitBoxes,\n            childInstance.getHitBoxes()\n          );\n          const childAABB = childInstance.getAABB();\n          minX = Math.min(minX, childAABB.min[0]);\n          minY = Math.min(minY, childAABB.min[1]);\n          maxX = Math.max(maxX, childAABB.max[0]);\n          maxY = Math.max(maxY, childAABB.max[1]);\n        }\n        this._unrotatedAABB.min[0] = minX;\n        this._unrotatedAABB.min[1] = minY;\n        this._unrotatedAABB.max[0] = maxX;\n        this._unrotatedAABB.max[1] = maxY;\n\n        while (this.hitBoxes.length < this._untransformedHitBoxes.length) {\n          this.hitBoxes.push(new gdjs.Polygon());\n        }\n        this.hitBoxes.length = this._untransformedHitBoxes.length;\n      }\n    }\n\n    // Position:\n    /**\n     * Return an array containing the coordinates of the point passed as parameter\n     * in parent coordinate coordinates (as opposed to the object local coordinates).\n     *\n     * All transformations (flipping, scale, rotation) are supported.\n     *\n     * @param x The X position of the point, in object coordinates.\n     * @param y The Y position of the point, in object coordinates.\n     * @param result Array that will be updated with the result\n     * (x and y position of the point in parent coordinates).\n     */\n    applyObjectTransformation(x: float, y: float, destination: FloatPoint) {\n      const source = destination;\n      source[0] = x;\n      source[1] = y;\n      this.getLocalTransformation().transform(source, destination);\n    }\n\n    /**\n     * Return the affine transformation that represents\n     * flipping, scale, rotation and translation of the object.\n     * @returns the affine transformation.\n     */\n    getLocalTransformation(): gdjs.AffineTransformation {\n      if (this._isLocalTransformationDirty) {\n        this._updateLocalTransformation();\n      }\n      return this._localTransformation;\n    }\n\n    getLocalInverseTransformation(): gdjs.AffineTransformation {\n      if (this._isLocalTransformationDirty) {\n        this._updateLocalTransformation();\n      }\n      return this._localInverseTransformation;\n    }\n\n    _updateLocalTransformation() {\n      const absScaleX = Math.abs(this._scaleX);\n      const absScaleY = Math.abs(this._scaleY);\n      const centerX = this.getUnscaledCenterX() * absScaleX;\n      const centerY = this.getUnscaledCenterY() * absScaleY;\n      const angleInRadians = (this.angle * Math.PI) / 180;\n\n      this._localTransformation.setToTranslation(this.x, this.y);\n      this._localTransformation.rotateAround(angleInRadians, centerX, centerY);\n      if (this._flippedX) {\n        this._localTransformation.flipX(centerX);\n      }\n      if (this._flippedY) {\n        this._localTransformation.flipY(centerY);\n      }\n      this._localTransformation.scale(absScaleX, absScaleY);\n\n      this._localInverseTransformation.copyFrom(this._localTransformation);\n      this._localInverseTransformation.invert();\n      this._isLocalTransformationDirty = false;\n    }\n\n    /**\n     * Return an array containing the coordinates of the point passed as parameter\n     * in object local coordinates (as opposed to the parent coordinate coordinates).\n     *\n     * All transformations (flipping, scale, rotation) are supported.\n     *\n     * @param x The X position of the point, in parent coordinates.\n     * @param y The Y position of the point, in parent coordinates.\n     * @param result Array that will be updated with the result\n     * (x and y position of the point in object coordinates).\n     */\n    applyObjectInverseTransformation(\n      x: float,\n      y: float,\n      destination: FloatPoint\n    ) {\n      const source = destination;\n      source[0] = x;\n      source[1] = y;\n      this.getLocalInverseTransformation().transform(source, destination);\n    }\n\n    getDrawableX(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      const absScaleX = this.getScaleX();\n      if (!this._flippedX) {\n        return this.x + this._unrotatedAABB.min[0] * absScaleX;\n      } else {\n        return (\n          this.x +\n          (-this._unrotatedAABB.min[0] -\n            this.getUnscaledWidth() +\n            2 * this.getUnscaledCenterX()) *\n            absScaleX\n        );\n      }\n    }\n\n    getDrawableY(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      const absScaleY = this.getScaleY();\n      if (!this._flippedY) {\n        return this.y + this._unrotatedAABB.min[1] * absScaleY;\n      } else {\n        return (\n          this.y +\n          (-this._unrotatedAABB.min[1] -\n            this.getUnscaledHeight() +\n            2 * this.getUnscaledCenterY()) *\n            absScaleY\n        );\n      }\n    }\n\n    /**\n     * @return the internal width of the object according to its children.\n     */\n    getUnscaledWidth(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return this._unrotatedAABB.max[0] - this._unrotatedAABB.min[0];\n    }\n\n    /**\n     * @return the internal height of the object according to its children.\n     */\n    getUnscaledHeight(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return this._unrotatedAABB.max[1] - this._unrotatedAABB.min[1];\n    }\n\n    /**\n     * @returns the center X from the local origin (0;0).\n     */\n    getUnscaledCenterX(): float {\n      if (this._customCenter) {\n        return this._customCenter[0];\n      }\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return (this._unrotatedAABB.min[0] + this._unrotatedAABB.max[0]) / 2;\n    }\n\n    /**\n     * @returns the center Y from the local origin (0;0).\n     */\n    getUnscaledCenterY(): float {\n      if (this._customCenter) {\n        return this._customCenter[1];\n      }\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return (this._unrotatedAABB.min[1] + this._unrotatedAABB.max[1]) / 2;\n    }\n\n    /**\n     * The center of rotation is defined relatively to the origin (the object\n     * position).\n     * This avoids the center to move when children push the bounds.\n     *\n     * When no custom center is defined, it will move\n     * to stay at the center of the children bounds.\n     *\n     * @param x coordinate of the custom center\n     * @param y coordinate of the custom center\n     */\n    setRotationCenter(x: float, y: float) {\n      if (!this._customCenter) {\n        this._customCenter = [0, 0];\n      }\n      this._customCenter[0] = x;\n      this._customCenter[1] = y;\n\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n    }\n\n    getCenterX(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return (\n        (this.getUnscaledCenterX() - this._unrotatedAABB.min[0]) *\n        this.getScaleX()\n      );\n    }\n\n    getCenterY(): float {\n      if (this._isUntransformedHitBoxesDirty) {\n        this._updateUntransformedHitBoxes();\n      }\n      return (\n        (this.getUnscaledCenterY() - this._unrotatedAABB.min[1]) *\n        this.getScaleY()\n      );\n    }\n\n    getWidth(): float {\n      return this.getUnscaledWidth() * this.getScaleX();\n    }\n\n    getHeight(): float {\n      return this.getUnscaledHeight() * this.getScaleY();\n    }\n\n    setWidth(newWidth: float): void {\n      const unscaledWidth = this.getUnscaledWidth();\n      if (unscaledWidth !== 0) {\n        this.setScaleX(newWidth / unscaledWidth);\n      }\n    }\n\n    setHeight(newHeight: float): void {\n      const unscaledHeight = this.getUnscaledHeight();\n      if (unscaledHeight !== 0) {\n        this.setScaleY(newHeight / unscaledHeight);\n      }\n    }\n\n    /**\n     * Change the size of the object.\n     *\n     * @param newWidth The new width of the object, in pixels.\n     * @param newHeight The new height of the object, in pixels.\n     */\n    setSize(newWidth: float, newHeight: float): void {\n      this.setWidth(newWidth);\n      this.setHeight(newHeight);\n    }\n\n    setX(x: float): void {\n      if (x === this.x) {\n        return;\n      }\n      this.x = x;\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().updateX();\n    }\n\n    setY(y: float): void {\n      if (y === this.y) {\n        return;\n      }\n      this.y = y;\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().updateY();\n    }\n\n    setAngle(angle: float): void {\n      if (this.angle === angle) {\n        return;\n      }\n      this.angle = angle;\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().updateAngle();\n    }\n\n    /**\n     * Change the scale on X and Y axis of the object.\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScale(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      if (\n        newScale === Math.abs(this._scaleX) &&\n        newScale === Math.abs(this._scaleY)\n      ) {\n        return;\n      }\n      this._scaleX = newScale * (this._flippedX ? -1 : 1);\n      this._scaleY = newScale * (this._flippedY ? -1 : 1);\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().update();\n    }\n\n    /**\n     * Change the scale on X axis of the object (changing its width).\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScaleX(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      if (newScale === Math.abs(this._scaleX)) {\n        return;\n      }\n      this._scaleX = newScale * (this._flippedX ? -1 : 1);\n      this._isLocalTransformationDirty = true;\n      this.invalidateHitboxes();\n      this.getRenderer().update();\n    }\n\n    /**\n     * Change the scale on Y axis of the object (changing its height).\n     *\n     * @param newScale The new scale (must be greater than 0).\n     */\n    setScaleY(newScale: number): void {\n      if (newScale < 0) {\n        newScale = 0;\n      }\n      if (newScale === Math.abs(this._scaleY)) {\n        return;\n      }\n      this._scaleY = newScale * (this._flippedY ? -1 : 1);\n      this.invalidateHitboxes();\n      this.getRenderer().update();\n    }\n\n    /**\n     * Get the scale of the object (or the average of the X and Y scale in case\n     * they are different).\n     *\n     * @return the scale of the object (or the average of the X and Y scale in\n     * case they are different).\n     */\n    getScale(): number {\n      return (Math.abs(this._scaleX) + Math.abs(this._scaleY)) / 2.0;\n    }\n\n    /**\n     * Get the scale of the object on Y axis.\n     *\n     * @return the scale of the object on Y axis\n     */\n    getScaleY(): float {\n      return Math.abs(this._scaleY);\n    }\n\n    /**\n     * Get the scale of the object on X axis.\n     *\n     * @return the scale of the object on X axis\n     */\n    getScaleX(): float {\n      return Math.abs(this._scaleX);\n    }\n\n    // Visibility and display :\n    /**\n     * Change the transparency of the object.\n     * @param opacity The new opacity, between 0 (transparent) and 255 (opaque).\n     */\n    setOpacity(opacity: float): void {\n      if (opacity < 0) {\n        opacity = 0;\n      }\n      if (opacity > 255) {\n        opacity = 255;\n      }\n      this.opacity = opacity;\n      this.getRenderer().updateOpacity();\n    }\n\n    /**\n     * Get the transparency of the object.\n     * @return The opacity, between 0 (transparent) and 255 (opaque).\n     */\n    getOpacity(): number {\n      return this.opacity;\n    }\n\n    /**\n     * Hide (or show) the object\n     * @param enable true to hide the object, false to show it again.\n     */\n    hide(enable: boolean): void {\n      if (enable === undefined) {\n        enable = true;\n      }\n      this.hidden = enable;\n      this.getRenderer().updateVisibility();\n    }\n\n    flipX(enable: boolean) {\n      if (enable !== this._flippedX) {\n        this._scaleX *= -1;\n        this._flippedX = enable;\n        this.invalidateHitboxes();\n        this.getRenderer().update();\n      }\n    }\n\n    flipY(enable: boolean) {\n      if (enable !== this._flippedY) {\n        this._scaleY *= -1;\n        this._flippedY = enable;\n        this.invalidateHitboxes();\n        this.getRenderer().update();\n      }\n    }\n\n    isFlippedX(): boolean {\n      return this._flippedX;\n    }\n\n    isFlippedY(): boolean {\n      return this._flippedY;\n    }\n  }\n\n  // Others initialization and internal state management :\n  // TODO EBO Activate and test instance recycling.\n  CustomRuntimeObject.supportsReinitialization = false;\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CAgBS,eAAkC,GAAK,aAAc,CAsB1D,YACE,EACA,EACA,CACA,MAAM,EAAQ,GAvBhB,mCAAyC,GAEzC,4BAAyC,GAEzC,oBAAuB,CAAE,IAAK,CAAC,EAAG,GAAI,IAAK,CAAC,EAAG,IAC/C,aAAiB,EACjB,aAAiB,EACjB,eAAqB,GACrB,eAAqB,GACrB,aAAiB,IACjB,mBAAmC,KACnC,0BAAkD,GAAI,GAAK,qBAC3D,iCAAyD,GAAI,GAAK,qBAClE,iCAAuC,GAWrC,KAAK,mBAAqB,GAAI,GAAK,qCACjC,EACA,MAGF,KAAK,mBAAmB,SAAS,GACjC,KAAK,cAAc,aAAa,KAAM,GAMxC,aAAa,EAAoD,CAC/D,MAAM,aAAa,GAEnB,KAAK,mBAAmB,SAAS,GACjC,KAAK,cAAc,aAAa,KAAM,KAAK,aAG3C,KAAK,YAGP,qBACE,EACA,EACS,CACT,MAAO,MAAK,mBAAmB,WAAW,EAAe,GAG3D,uCAAuC,EAAmC,CACxE,AAAI,EAAoB,YACtB,MAAK,SAAS,EAAoB,OAClC,KAAK,UAAU,EAAoB,SAIvC,mBAAmB,EAA6C,CAE9D,KAAK,UAAU,GAEf,MAAM,mBAAmB,GAEzB,KAAK,mBAAmB,mBAAmB,GAG7C,OAAO,EAA6C,CAClD,KAAK,mBAAmB,0BAExB,KAAK,gBAAgB,GAErB,KAAM,GAAW,KAAK,kBAAkB,cACxC,AAAI,GACF,EAAS,MAAM,KAAK,MAGtB,KAAK,iBAAiB,GAClB,GACF,EAAS,IAAI,KAAK,MAGpB,KAAK,mBAAmB,2BAM1B,eAAe,EAAuC,EAGtD,gBAAgB,EAAuC,EAMvD,iBAAiB,EAAuC,EAMxD,UAAU,EAAuC,EAEjD,gBAAgB,EAA6C,CAC3D,KAAK,mBAAmB,0BACxB,KAAK,cAAc,iBAGrB,mBAAoB,CAClB,MAAO,MAAK,cAAc,oBAG5B,aAAc,CACZ,MAAO,MAAK,mBAAmB,cAGjC,2BAA4B,CAC1B,KAAK,8BAAgC,GACrC,KAAK,qBACL,KAAK,cAAc,SAGrB,gBAAuB,CACrB,AAAI,KAAK,+BACP,KAAK,+BAKP,KAAM,GAAsB,KAAK,yBACjC,OAAS,GAAI,EAAG,EAAI,KAAK,uBAAuB,OAAQ,EAAE,EAAG,CAC3D,AAAI,GAAK,KAAK,SAAS,QACrB,KAAK,SAAS,KAAK,GAAI,GAAK,SAE9B,OACM,GAAI,EACR,EAAI,KAAK,uBAAuB,GAAG,SAAS,OAC5C,EAAE,EAEF,AAAI,GAAK,KAAK,SAAS,GAAG,SAAS,QACjC,KAAK,SAAS,GAAG,SAAS,KAAK,CAAC,EAAG,IAErC,EAAoB,UAClB,KAAK,uBAAuB,GAAG,SAAS,GACxC,KAAK,SAAS,GAAG,SAAS,IAG9B,KAAK,SAAS,GAAG,SAAS,OAAS,KAAK,uBACtC,GACA,SAAS,QAOf,8BAA+B,CAI7B,GAHA,KAAK,8BAAgC,GAErC,KAAK,uBAAuB,OAAS,EACjC,KAAK,mBAAmB,6BAA6B,SAAW,EAClE,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,MACxB,CACL,GAAI,GAAO,OAAO,UACd,EAAO,OAAO,UACd,EAAO,CAAC,OAAO,UACf,EAAO,CAAC,OAAO,UACnB,SAAW,KAAiB,MAAK,mBAAmB,6BAA8B,CAChF,GAAI,CAAC,EAAc,kCACjB,SAEF,MAAM,UAAU,KAAK,MACnB,KAAK,uBACL,EAAc,eAEhB,KAAM,GAAY,EAAc,UAChC,EAAO,KAAK,IAAI,EAAM,EAAU,IAAI,IACpC,EAAO,KAAK,IAAI,EAAM,EAAU,IAAI,IACpC,EAAO,KAAK,IAAI,EAAM,EAAU,IAAI,IACpC,EAAO,KAAK,IAAI,EAAM,EAAU,IAAI,IAOtC,IALA,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,EAC7B,KAAK,eAAe,IAAI,GAAK,EAEtB,KAAK,SAAS,OAAS,KAAK,uBAAuB,QACxD,KAAK,SAAS,KAAK,GAAI,GAAK,SAE9B,KAAK,SAAS,OAAS,KAAK,uBAAuB,QAgBvD,0BAA0B,EAAU,EAAU,EAAyB,CACrE,KAAM,GAAS,EACf,EAAO,GAAK,EACZ,EAAO,GAAK,EACZ,KAAK,yBAAyB,UAAU,EAAQ,GAQlD,wBAAoD,CAClD,MAAI,MAAK,6BACP,KAAK,6BAEA,KAAK,qBAGd,+BAA2D,CACzD,MAAI,MAAK,6BACP,KAAK,6BAEA,KAAK,4BAGd,4BAA6B,CAC3B,KAAM,GAAY,KAAK,IAAI,KAAK,SAC1B,EAAY,KAAK,IAAI,KAAK,SAC1B,EAAU,KAAK,qBAAuB,EACtC,EAAU,KAAK,qBAAuB,EACtC,EAAkB,KAAK,MAAQ,KAAK,GAAM,IAEhD,KAAK,qBAAqB,iBAAiB,KAAK,EAAG,KAAK,GACxD,KAAK,qBAAqB,aAAa,EAAgB,EAAS,GAC5D,KAAK,WACP,KAAK,qBAAqB,MAAM,GAE9B,KAAK,WACP,KAAK,qBAAqB,MAAM,GAElC,KAAK,qBAAqB,MAAM,EAAW,GAE3C,KAAK,4BAA4B,SAAS,KAAK,sBAC/C,KAAK,4BAA4B,SACjC,KAAK,4BAA8B,GAcrC,iCACE,EACA,EACA,EACA,CACA,KAAM,GAAS,EACf,EAAO,GAAK,EACZ,EAAO,GAAK,EACZ,KAAK,gCAAgC,UAAU,EAAQ,GAGzD,cAAsB,CACpB,AAAI,KAAK,+BACP,KAAK,+BAEP,KAAM,GAAY,KAAK,YACvB,MAAK,MAAK,UAIN,KAAK,EACJ,EAAC,KAAK,eAAe,IAAI,GACxB,KAAK,mBACL,EAAI,KAAK,sBACT,EAPG,KAAK,EAAI,KAAK,eAAe,IAAI,GAAK,EAYjD,cAAsB,CACpB,AAAI,KAAK,+BACP,KAAK,+BAEP,KAAM,GAAY,KAAK,YACvB,MAAK,MAAK,UAIN,KAAK,EACJ,EAAC,KAAK,eAAe,IAAI,GACxB,KAAK,oBACL,EAAI,KAAK,sBACT,EAPG,KAAK,EAAI,KAAK,eAAe,IAAI,GAAK,EAejD,kBAA0B,CACxB,MAAI,MAAK,+BACP,KAAK,+BAEA,KAAK,eAAe,IAAI,GAAK,KAAK,eAAe,IAAI,GAM9D,mBAA2B,CACzB,MAAI,MAAK,+BACP,KAAK,+BAEA,KAAK,eAAe,IAAI,GAAK,KAAK,eAAe,IAAI,GAM9D,oBAA4B,CAC1B,MAAI,MAAK,cACA,KAAK,cAAc,GAExB,MAAK,+BACP,KAAK,+BAEC,MAAK,eAAe,IAAI,GAAK,KAAK,eAAe,IAAI,IAAM,GAMrE,oBAA4B,CAC1B,MAAI,MAAK,cACA,KAAK,cAAc,GAExB,MAAK,+BACP,KAAK,+BAEC,MAAK,eAAe,IAAI,GAAK,KAAK,eAAe,IAAI,IAAM,GAcrE,kBAAkB,EAAU,EAAU,CACpC,AAAK,KAAK,eACR,MAAK,cAAgB,CAAC,EAAG,IAE3B,KAAK,cAAc,GAAK,EACxB,KAAK,cAAc,GAAK,EAExB,KAAK,4BAA8B,GACnC,KAAK,qBAGP,YAAoB,CAClB,MAAI,MAAK,+BACP,KAAK,+BAGJ,MAAK,qBAAuB,KAAK,eAAe,IAAI,IACrD,KAAK,YAIT,YAAoB,CAClB,MAAI,MAAK,+BACP,KAAK,+BAGJ,MAAK,qBAAuB,KAAK,eAAe,IAAI,IACrD,KAAK,YAIT,UAAkB,CAChB,MAAO,MAAK,mBAAqB,KAAK,YAGxC,WAAmB,CACjB,MAAO,MAAK,oBAAsB,KAAK,YAGzC,SAAS,EAAuB,CAC9B,KAAM,GAAgB,KAAK,mBAC3B,AAAI,IAAkB,GACpB,KAAK,UAAU,EAAW,GAI9B,UAAU,EAAwB,CAChC,KAAM,GAAiB,KAAK,oBAC5B,AAAI,IAAmB,GACrB,KAAK,UAAU,EAAY,GAU/B,QAAQ,EAAiB,EAAwB,CAC/C,KAAK,SAAS,GACd,KAAK,UAAU,GAGjB,KAAK,EAAgB,CACnB,AAAI,IAAM,KAAK,GAGf,MAAK,EAAI,EACT,KAAK,4BAA8B,GACnC,KAAK,qBACL,KAAK,cAAc,WAGrB,KAAK,EAAgB,CACnB,AAAI,IAAM,KAAK,GAGf,MAAK,EAAI,EACT,KAAK,4BAA8B,GACnC,KAAK,qBACL,KAAK,cAAc,WAGrB,SAAS,EAAoB,CAC3B,AAAI,KAAK,QAAU,GAGnB,MAAK,MAAQ,EACb,KAAK,4BAA8B,GACnC,KAAK,qBACL,KAAK,cAAc,eAQrB,SAAS,EAAwB,CAI/B,AAHI,EAAW,GACb,GAAW,GAGX,MAAa,KAAK,IAAI,KAAK,UAC3B,IAAa,KAAK,IAAI,KAAK,WAI7B,MAAK,QAAU,EAAY,MAAK,UAAY,GAAK,GACjD,KAAK,QAAU,EAAY,MAAK,UAAY,GAAK,GACjD,KAAK,4BAA8B,GACnC,KAAK,qBACL,KAAK,cAAc,UAQrB,UAAU,EAAwB,CAIhC,AAHI,EAAW,GACb,GAAW,GAET,IAAa,KAAK,IAAI,KAAK,UAG/B,MAAK,QAAU,EAAY,MAAK,UAAY,GAAK,GACjD,KAAK,4BAA8B,GACnC,KAAK,qBACL,KAAK,cAAc,UAQrB,UAAU,EAAwB,CAIhC,AAHI,EAAW,GACb,GAAW,GAET,IAAa,KAAK,IAAI,KAAK,UAG/B,MAAK,QAAU,EAAY,MAAK,UAAY,GAAK,GACjD,KAAK,qBACL,KAAK,cAAc,UAUrB,UAAmB,CACjB,MAAQ,MAAK,IAAI,KAAK,SAAW,KAAK,IAAI,KAAK,UAAY,EAQ7D,WAAmB,CACjB,MAAO,MAAK,IAAI,KAAK,SAQvB,WAAmB,CACjB,MAAO,MAAK,IAAI,KAAK,SAQvB,WAAW,EAAsB,CAC/B,AAAI,EAAU,GACZ,GAAU,GAER,EAAU,KACZ,GAAU,KAEZ,KAAK,QAAU,EACf,KAAK,cAAc,gBAOrB,YAAqB,CACnB,MAAO,MAAK,QAOd,KAAK,EAAuB,CAC1B,AAAI,IAAW,QACb,GAAS,IAEX,KAAK,OAAS,EACd,KAAK,cAAc,mBAGrB,MAAM,EAAiB,CACrB,AAAI,IAAW,KAAK,WAClB,MAAK,SAAW,GAChB,KAAK,UAAY,EACjB,KAAK,qBACL,KAAK,cAAc,UAIvB,MAAM,EAAiB,CACrB,AAAI,IAAW,KAAK,WAClB,MAAK,SAAW,GAChB,KAAK,UAAY,EACjB,KAAK,qBACL,KAAK,cAAc,UAIvB,YAAsB,CACpB,MAAO,MAAK,UAGd,YAAsB,CACpB,MAAO,MAAK,WAzmBT,EAAM,sBA+mBb,EAAoB,yBAA2B,KA/nBvC",
  "names": []
}
