{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/pixi-renderers/pixi-filters-tools.ts"],
  "sourcesContent": ["namespace gdjs {\n  const logger = new gdjs.Logger('Filters');\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  export namespace PixiFiltersTools {\n    export const clampValue = function (value, min, max) {\n      return Math.max(min, Math.min(max, value));\n    };\n\n    export const clampKernelSize = function (value, min, max) {\n      const len = Math.round((max - min) / 2 + 1);\n      const arr = new Array(len);\n      for (let i = 0; i < len; i++) {\n        arr[i] = min + 2 * i;\n      }\n      return arr.indexOf(value) !== -1 ? value : min;\n    };\n\n    const _filterCreators: {\n      [filterName: string]: FilterCreator;\n    } = {};\n\n    /**\n     * Return the creator for the filter with the given name, if any.\n     * @param filterName The name of the filter to get\n     * @return The filter creator, if any (null otherwise).\n     */\n    export const getFilterCreator = function (\n      filterName: string\n    ): FilterCreator | null {\n      if (_filterCreators.hasOwnProperty(filterName)) {\n        return _filterCreators[filterName];\n      }\n      return null;\n    };\n\n    /**\n     * Register a new PIXI filter creator, to be used by GDJS.\n     * @param filterName The name of the filter to get\n     * @param filterCreator The object used to create the filter.\n     */\n    export const registerFilterCreator = function (\n      filterName: string,\n      filterCreator: FilterCreator\n    ) {\n      if (_filterCreators.hasOwnProperty(filterName)) {\n        logger.warn(\n          'Filter \"' +\n            filterName +\n            '\" was already registered in gdjs.PixiFiltersTools. Replacing it with the new one.'\n        );\n      }\n      _filterCreators[filterName] = filterCreator;\n    };\n\n    /**\n     * Convert a string RGB color (\"rrr;ggg;bbb\") or a hex string (#rrggbb) to a hex number.\n     * @param value The color as a RGB string or hex string\n     */\n    export const rgbOrHexToHexNumber = function (value: string): number {\n      const splitValue = value.split(';');\n      if (splitValue.length === 3) {\n        return gdjs.rgbToHexNumber(\n          parseInt(splitValue[0], 10),\n          parseInt(splitValue[1], 10),\n          parseInt(splitValue[2], 10)\n        );\n      }\n      return parseInt(value.replace('#', '0x'), 16);\n    };\n\n    /** A wrapper allowing to create an effect. */\n    export interface FilterCreator {\n      /** Function to call to create the filter */\n      makeFilter(target: EffectsTarget, effectData: EffectData): Filter;\n    }\n\n    /** An effect. */\n    export interface Filter {\n      /**\n       * Check if an effect is enabled.\n       * @return true if the filter is enabled\n       */\n      isEnabled(target: EffectsTarget): boolean;\n      /**\n       * Enable an effect.\n       * @param enabled Set to true to enable, false to disable\n       */\n      setEnabled(target: EffectsTarget, enabled: boolean): boolean;\n      /**\n       * Apply the effect on the PixiJS DisplayObject.\n       * Called after the effect is initialized.\n       * @param rendererObject The renderer object\n       * @param effect The effect to be applied.\n       */\n      applyEffect(target: EffectsTarget): boolean;\n      removeEffect(target: EffectsTarget): boolean;\n      /** The function to be called to update the filter at every frame before the rendering. */\n      updatePreRender(target: gdjs.EffectsTarget): any;\n      /** The function to be called to update a parameter (with a number) */\n      updateDoubleParameter(\n        //filter: PIXI.Filter,\n        parameterName: string,\n        value: number\n      ): void;\n      /** The function to be called to update a parameter (with a string) */\n      updateStringParameter(parameterName: string, value: string): void;\n      /** The function to be called to update a parameter (with a boolean) */\n      updateBooleanParameter(parameterName: string, value: boolean): void;\n    }\n\n    /** A wrapper allowing to create a PIXI filter and update it using a common interface */\n    export abstract class PixiFilterCreator implements FilterCreator {\n      /** Function to call to create the filter */\n      makeFilter(target: EffectsTarget, effectData: EffectData): Filter {\n        const pixiFilter = this.makePIXIFilter(target, effectData);\n        if (target.isLightingLayer && target.isLightingLayer()) {\n          pixiFilter.blendMode = PIXI.BLEND_MODES.ADD;\n        }\n        return new PixiFilter(pixiFilter, this);\n      }\n      /** Function to call to create the filter */\n      abstract makePIXIFilter(\n        target: EffectsTarget,\n        effectData: EffectData\n      ): any;\n      /** The function to be called to update the filter at every frame before the rendering. */\n      abstract updatePreRender(\n        filter: PIXI.Filter,\n        target: gdjs.EffectsTarget\n      ): any;\n      /** The function to be called to update a parameter (with a number) */\n      abstract updateDoubleParameter(\n        filter: PIXI.Filter,\n        parameterName: string,\n        value: number\n      ): void;\n      /** The function to be called to update a parameter (with a string) */\n      abstract updateStringParameter(\n        filter: PIXI.Filter,\n        parameterName: string,\n        value: string\n      ): void;\n      /** The function to be called to update a parameter (with a boolean) */\n      abstract updateBooleanParameter(\n        filter: PIXI.Filter,\n        parameterName: string,\n        value: boolean\n      ): void;\n    }\n\n    /**An effect used to manipulate a Pixi filter. */\n    export class PixiFilter implements Filter {\n      /** The PIXI filter */\n      pixiFilter: PIXI.Filter;\n      filterCreator: gdjs.PixiFiltersTools.PixiFilterCreator;\n\n      constructor(\n        pixiFilter: PIXI.Filter,\n        filterCreator: gdjs.PixiFiltersTools.PixiFilterCreator\n      ) {\n        this.pixiFilter = pixiFilter;\n        this.filterCreator = filterCreator;\n      }\n\n      isEnabled(target: EffectsTarget): boolean {\n        return this.pixiFilter.enabled;\n      }\n\n      setEnabled(target: EffectsTarget, enabled: boolean): boolean {\n        return (this.pixiFilter.enabled = enabled);\n      }\n\n      applyEffect(target: EffectsTarget): boolean {\n        const rendererObject = target.getRendererObject() as\n          | PIXI.DisplayObject\n          | null\n          | undefined;\n        if (!rendererObject) {\n          return false;\n        }\n        rendererObject.filters = (rendererObject.filters || []).concat(\n          this.pixiFilter\n        );\n        return true;\n      }\n\n      removeEffect(target: EffectsTarget): boolean {\n        const rendererObject = target.getRendererObject() as\n          | PIXI.DisplayObject\n          | null\n          | undefined;\n        if (!rendererObject) {\n          return false;\n        }\n        rendererObject.filters = (rendererObject.filters || []).filter(\n          (pixiFilter) => pixiFilter !== this.pixiFilter\n        );\n        return true;\n      }\n\n      updatePreRender(target: gdjs.EffectsTarget): any {\n        this.filterCreator.updatePreRender(this.pixiFilter, target);\n      }\n\n      updateDoubleParameter(parameterName: string, value: number): void {\n        this.filterCreator.updateDoubleParameter(\n          this.pixiFilter,\n          parameterName,\n          value\n        );\n      }\n\n      updateStringParameter(parameterName: string, value: string): void {\n        this.filterCreator.updateStringParameter(\n          this.pixiFilter,\n          parameterName,\n          value\n        );\n      }\n\n      updateBooleanParameter(parameterName: string, value: boolean): void {\n        this.filterCreator.updateBooleanParameter(\n          this.pixiFilter,\n          parameterName,\n          value\n        );\n      }\n    }\n  }\n}\n"],
  "mappings": "AAAA,GAAU,MAAV,UAAU,EAAV,CACE,KAAM,GAAS,GAAI,GAAK,OAAO,WACxB,EAAO,iBAAiB,KAExB,GAAU,GAAV,UAAU,EAAV,CACE,AAAM,aAAa,SAAU,EAAO,EAAK,EAAK,CACnD,MAAO,MAAK,IAAI,EAAK,KAAK,IAAI,EAAK,KAGxB,kBAAkB,SAAU,EAAO,EAAK,EAAK,CACxD,KAAM,GAAM,KAAK,MAAO,GAAM,GAAO,EAAI,GACnC,EAAM,GAAI,OAAM,GACtB,OAAS,GAAI,EAAG,EAAI,EAAK,IACvB,EAAI,GAAK,EAAM,EAAI,EAErB,MAAO,GAAI,QAAQ,KAAW,GAAK,EAAQ,GAG7C,KAAM,GAEF,GAOG,AAAM,mBAAmB,SAC9B,EACsB,CACtB,MAAI,GAAgB,eAAe,GAC1B,EAAgB,GAElB,MAQI,wBAAwB,SACnC,EACA,EACA,CACA,AAAI,EAAgB,eAAe,IACjC,EAAO,KACL,WACE,EACA,qFAGN,EAAgB,GAAc,GAOnB,sBAAsB,SAAU,EAAuB,CAClE,KAAM,GAAa,EAAM,MAAM,KAC/B,MAAI,GAAW,SAAW,EACjB,EAAK,eACV,SAAS,EAAW,GAAI,IACxB,SAAS,EAAW,GAAI,IACxB,SAAS,EAAW,GAAI,KAGrB,SAAS,EAAM,QAAQ,IAAK,MAAO,KA4CrC,OAA0D,CAE/D,WAAW,EAAuB,EAAgC,CAChE,KAAM,GAAa,KAAK,eAAe,EAAQ,GAC/C,MAAI,GAAO,iBAAmB,EAAO,mBACnC,GAAW,UAAY,EAAK,YAAY,KAEnC,GAAI,GAAW,EAAY,OAP/B,EAAe,oBAwCf,OAAmC,CAKxC,YACE,EACA,EACA,CACA,KAAK,WAAa,EAClB,KAAK,cAAgB,EAGvB,UAAU,EAAgC,CACxC,MAAO,MAAK,WAAW,QAGzB,WAAW,EAAuB,EAA2B,CAC3D,MAAQ,MAAK,WAAW,QAAU,EAGpC,YAAY,EAAgC,CAC1C,KAAM,GAAiB,EAAO,oBAI9B,MAAK,GAGL,GAAe,QAAW,GAAe,SAAW,IAAI,OACtD,KAAK,YAEA,IALE,GAQX,aAAa,EAAgC,CAC3C,KAAM,GAAiB,EAAO,oBAI9B,MAAK,GAGL,GAAe,QAAW,GAAe,SAAW,IAAI,OACtD,AAAC,GAAe,IAAe,KAAK,YAE/B,IALE,GAQX,gBAAgB,EAAiC,CAC/C,KAAK,cAAc,gBAAgB,KAAK,WAAY,GAGtD,sBAAsB,EAAuB,EAAqB,CAChE,KAAK,cAAc,sBACjB,KAAK,WACL,EACA,GAIJ,sBAAsB,EAAuB,EAAqB,CAChE,KAAK,cAAc,sBACjB,KAAK,WACL,EACA,GAIJ,uBAAuB,EAAuB,EAAsB,CAClE,KAAK,cAAc,uBACjB,KAAK,WACL,EACA,IAzEC,EAAM,eApJE,iDAJT",
  "names": []
}
