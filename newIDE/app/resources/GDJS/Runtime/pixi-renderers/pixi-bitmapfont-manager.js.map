{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/pixi-renderers/pixi-bitmapfont-manager.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2021-present Aur\u00E9lien Vivet (bouh.vivez@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Bitmap text');\n\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  const defaultBitmapFontKey = 'GDJS-DEFAULT-BITMAP-FONT';\n\n  // When a font is unused, we put it in a cache of unused fonts. It's unloaded\n  // from memory only when the cache is full and the font is at the last position\n  // in the cache.\n  // Set this to 0 to unload from memory (\"uninstall\") as soon as a font is unused.\n  const uninstallCacheSize = 5;\n\n  /**\n   * We patch the installed font to use a name that is unique for each font data and texture,\n   * to avoid conflicts between different font files using the same font name (by default, the\n   * font name used by Pixi is the one inside the font data, but this name is not necessarily unique.\n   * For example, 2 resources can use the same font, or we can have multiple objects with the same\n   * font data and different textures).\n   */\n  const patchInstalledBitmapFont = (\n    bitmapFont: PIXI.BitmapFont,\n    bitmapFontInstallKey: string\n  ) => {\n    const defaultName = bitmapFont.font;\n    // @ts-ignore - we \"hack\" into Pixi to change the font name\n    bitmapFont.font = bitmapFontInstallKey;\n    PIXI.BitmapFont.available[bitmapFontInstallKey] = bitmapFont;\n    delete PIXI.BitmapFont.available[defaultName];\n    return PIXI.BitmapFont.available[bitmapFontInstallKey];\n  };\n\n  /**\n   * PixiBitmapFontManager loads fnt/xml files (using `fetch`), from the \"bitmapFont\" resources of the game.\n   *\n   * It installs the \"BitmapFont\" with PixiJS to be used with PIXI.BitmapText.\n   */\n  export class PixiBitmapFontManager {\n    private _resources: ResourceData[];\n    private _imageManager: gdjs.PixiImageManager;\n\n    /** Pixi.BitmapFont used, indexed by their BitmapFont name. */\n    private _pixiBitmapFontsInUse: Record<\n      string,\n      { objectsUsingTheFont: number }\n    > = {};\n\n    /** Pixi.BitmapFont not used anymore, but not yet uninstalled, indexed by their BitmapFont name. */\n    private _pixiBitmapFontsToUninstall: string[] = [];\n\n    /** Loaded fonts data, indexed by resource name. */\n    private _loadedFontsData: Record<string, any> = {};\n\n    private _defaultSlugFontName: string | null = null;\n\n    _resourcesLoader: RuntimeGameResourcesLoader;\n\n    /**\n     * @param resources The resources data of the game.\n     * @param resourcesLoader The resources loader of the game.\n     * @param imageManager The image manager to be used to get textures used by fonts.\n     */\n    constructor(\n      resources: ResourceData[],\n      resourcesLoader: RuntimeGameResourcesLoader,\n      imageManager: gdjs.PixiImageManager\n    ) {\n      this._resources = resources;\n      this._imageManager = imageManager;\n      this._resourcesLoader = resourcesLoader;\n    }\n\n    /**\n     * Get the instance of the default `Pixi.BitmapFont`, always available.\n     */\n    getDefaultBitmapFont() {\n      if (this._defaultSlugFontName !== null) {\n        return PIXI.BitmapFont.available[this._defaultSlugFontName];\n      }\n\n      // Default bitmap font style\n      const fontFamily = 'Arial';\n      const bitmapFontStyle = new PIXI.TextStyle({\n        fontFamily: fontFamily,\n        fontSize: 20,\n        padding: 5,\n        align: 'left',\n        fill: '#ffffff',\n        wordWrap: true,\n        lineHeight: 20,\n      });\n\n      // Generate default bitmapFont, and replace the name of PIXI.BitmapFont by a unique name\n      const defaultBitmapFont = patchInstalledBitmapFont(\n        PIXI.BitmapFont.from(fontFamily, bitmapFontStyle, {\n          // All the printable ASCII characters\n          chars: [[' ', '~']],\n        }),\n        defaultBitmapFontKey\n      );\n\n      // Define the default name used for the default bitmap font.\n      this._defaultSlugFontName = defaultBitmapFont.font;\n      return defaultBitmapFont;\n    }\n\n    /**\n     * Update the resources data of the game. Useful for hot-reloading, should not be used otherwise.\n     * @param resources The resources data of the game.\n     */\n    setResources(resources: ResourceData[]): void {\n      this._resources = resources;\n    }\n\n    /**\n     * Called to specify that the bitmap font with the specified key is used by an object\n     * (i.e: this is reference counting).\n     * `releaseBitmapFont` *must* be called to mark the font as not used anymore when the\n     * object is destroyed or its font changed.\n     *\n     * @param bitmapFontInstallKey Name of the font of the BitmapFont (`bitmapFont.font`)\n     */\n    private _markBitmapFontAsUsed(bitmapFontInstallKey: string): void {\n      this._pixiBitmapFontsInUse[bitmapFontInstallKey] = this\n        ._pixiBitmapFontsInUse[bitmapFontInstallKey] || {\n        objectsUsingTheFont: 0,\n      };\n      this._pixiBitmapFontsInUse[bitmapFontInstallKey].objectsUsingTheFont++;\n\n      for (let i = 0; i < this._pixiBitmapFontsToUninstall.length; ) {\n        if (this._pixiBitmapFontsToUninstall[i] === bitmapFontInstallKey) {\n          // The font is in the cache of fonts to uninstall, because it was previously used and then marked as not used anymore.\n          // Remove it from the cache to avoid the font getting uninstalled.\n          this._pixiBitmapFontsToUninstall.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n    }\n\n    /**\n     * When a font is not used by an object anymore (object destroyed or font changed),\n     * call this function to decrease the internal count of objects using the font.\n     *\n     * When a font is not unused anymore, it goes in a temporary cache. The cache holds up to 10 fonts.\n     * If the cache reaches its maximum capacity, the oldest font is uninstalled from memory.\n     *\n     * @param bitmapFontInstallKey Name of the font of the BitmapFont (`bitmapFont.font`)\n     */\n    releaseBitmapFont(bitmapFontInstallKey: string) {\n      if (bitmapFontInstallKey === defaultBitmapFontKey) {\n        // Never uninstall the default font.\n        return;\n      }\n\n      if (!this._pixiBitmapFontsInUse[bitmapFontInstallKey]) {\n        logger.warn(\n          'BitmapFont with name ' +\n            bitmapFontInstallKey +\n            ' was tried to be released but was never marked as used.'\n        );\n        return;\n      }\n      this._pixiBitmapFontsInUse[bitmapFontInstallKey].objectsUsingTheFont--;\n\n      if (\n        this._pixiBitmapFontsInUse[bitmapFontInstallKey].objectsUsingTheFont ===\n        0\n      ) {\n        delete this._pixiBitmapFontsInUse[bitmapFontInstallKey];\n\n        // Add the font name at the last position of the cache.\n        if (!this._pixiBitmapFontsToUninstall.includes(bitmapFontInstallKey)) {\n          this._pixiBitmapFontsToUninstall.push(bitmapFontInstallKey);\n        }\n        if (this._pixiBitmapFontsToUninstall.length > uninstallCacheSize) {\n          // Remove the first font (i.e: the oldest one)\n          const oldestUnloadedPixiBitmapFontName = this._pixiBitmapFontsToUninstall.shift() as string;\n\n          PIXI.BitmapFont.uninstall(oldestUnloadedPixiBitmapFontName);\n          logger.log(\n            'Bitmap Text',\n            'Uninstalled BitmapFont \"' +\n              oldestUnloadedPixiBitmapFontName +\n              '\" from memory.'\n          );\n        }\n      }\n    }\n\n    /**\n     * Given a bitmap font resource name and a texture atlas resource name, returns the PIXI.BitmapFont\n     * for it.\n     * The font is register and should be released with `releaseBitmapFont` - so that it can be removed\n     * from memory when unused.\n     */\n    obtainBitmapFont(\n      bitmapFontResourceName: string,\n      textureAtlasResourceName: string\n    ): PIXI.BitmapFont {\n      const bitmapFontInstallKey =\n        bitmapFontResourceName + '@' + textureAtlasResourceName;\n\n      if (PIXI.BitmapFont.available[bitmapFontInstallKey]) {\n        // Return the existing BitmapFont that is already in memory and already installed.\n        this._markBitmapFontAsUsed(bitmapFontInstallKey);\n        return PIXI.BitmapFont.available[bitmapFontInstallKey];\n      }\n\n      // The Bitmap Font is not loaded, load it in memory.\n\n      // First get the font data:\n      const fontData = this._loadedFontsData[bitmapFontResourceName];\n      if (!fontData) {\n        logger.warn(\n          'Could not find Bitmap Font for resource named \"' +\n            bitmapFontResourceName +\n            '\". The default font will be used.'\n        );\n        return this.getDefaultBitmapFont();\n      }\n\n      // Get the texture to be used in the font:\n      const texture = this._imageManager.getPIXITexture(\n        textureAtlasResourceName\n      );\n\n      try {\n        // Create and install the Pixi.BitmapFont in memory:\n        const bitmapFont = patchInstalledBitmapFont(\n          PIXI.BitmapFont.install(fontData, texture),\n          bitmapFontInstallKey\n        );\n        this._markBitmapFontAsUsed(bitmapFontInstallKey);\n        return bitmapFont;\n      } catch (error) {\n        logger.error(\n          'Could not load the Bitmap Font for resource named \"' +\n            bitmapFontResourceName +\n            '\". The default font will be used. Error is: ' +\n            error\n        );\n        return this.getDefaultBitmapFont();\n      }\n    }\n\n    /**\n     * Load the \"bitmapFont\" resources of the game, so that they are ready\n     * to be used when `obtainBitmapFont` is called.\n     */\n    loadBitmapFontData(\n      onProgress: (count: integer, total: integer) => void\n    ): Promise<void[]> {\n      const bitmapFontResources = this._resources.filter(\n        (resource) => resource.kind === 'bitmapFont' && !resource.disablePreload\n      );\n      if (bitmapFontResources.length === 0) {\n        return Promise.resolve([]);\n      }\n\n      let loadedCount = 0;\n      return Promise.all(\n        bitmapFontResources.map((bitmapFontResource) => {\n          return fetch(\n            this._resourcesLoader.getFullUrl(bitmapFontResource.file),\n            {\n              credentials: this._resourcesLoader.checkIfCredentialsRequired(\n                bitmapFontResource.file\n              )\n                ? // Any resource stored on the GDevelop Cloud buckets needs the \"credentials\" of the user,\n                  // i.e: its gdevelop.io cookie, to be passed.\n                  'include'\n                : // For other resources, use \"same-origin\" as done by default by fetch.\n                  'same-origin',\n            }\n          )\n            .then((response) => response.text())\n            .then((fontData) => {\n              this._loadedFontsData[bitmapFontResource.name] = fontData;\n            })\n            .catch((error) => {\n              logger.error(\n                \"Can't fetch the bitmap font file \" +\n                  bitmapFontResource.file +\n                  ', error: ' +\n                  error\n              );\n            })\n            .then(() => {\n              loadedCount++;\n              onProgress(loadedCount, bitmapFontResources.length);\n            });\n        })\n      );\n    }\n  }\n\n  // Register the class to let the engine use it.\n  export const BitmapFontManager = gdjs.PixiBitmapFontManager;\n  export type BitmapFontManager = gdjs.PixiBitmapFontManager;\n}\n"],
  "mappings": "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",
  "names": []
}
