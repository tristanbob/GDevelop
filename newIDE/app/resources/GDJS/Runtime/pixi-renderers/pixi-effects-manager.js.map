{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/pixi-renderers/pixi-effects-manager.ts"],
  "sourcesContent": ["/*\n * GDevelop JS Platform\n * Copyright 2013-2021 Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  type RendererEffects = Record<string, gdjs.PixiFiltersTools.Filter>;\n\n  export interface EffectsTarget {\n    getRuntimeScene: () => gdjs.RuntimeInstanceContainer;\n    getElapsedTime: (\n      instanceContainer?: gdjs.RuntimeInstanceContainer\n    ) => number;\n    getHeight: () => number;\n    getWidth: () => number;\n    isLightingLayer?: () => boolean;\n    getName: () => string;\n    getRendererObject: () => RendererObjectInterface | null | undefined;\n    get3DRendererObject: () => THREE.Object3D | null | undefined;\n  }\n\n  /**\n   * Handle effects (aka PixiJS \"filters\") on PixiJS objects.\n   */\n  class PixiEffectsManager {\n    /**\n     * Initialize the renderer effect (PixiJS filter) from the effect data.\n     * Call the applyEffect method afterwards, to correctly apply the\n     * initialized effects on the object.\n     * @param effectData The effect data\n     * @param rendererEffects The collection of PixiJS filters\n     * @param target The effects target\n     */\n    initializeEffect(\n      effectData: EffectData,\n      rendererEffects: RendererEffects,\n      target: EffectsTarget\n    ): boolean {\n      const filterCreator = gdjs.PixiFiltersTools.getFilterCreator(\n        effectData.effectType\n      );\n      if (!filterCreator) {\n        console.warn(\n          `Effect: \"${\n            effectData.name\n          }\", on layer: \"${target.getName()}\", has an unknown effect type: \"${\n            effectData.effectType\n          }\". Was it registered properly? Is the effect type correct?`\n        );\n        return false;\n      }\n\n      rendererEffects[effectData.name] = filterCreator.makeFilter(\n        target,\n        effectData\n      );\n      return true;\n    }\n\n    /**\n     * Update the filters applied on a PixiJS DisplayObject.\n     * This must be called after the events and before the rendering.\n     *\n     * This allows effects to be sure that they are up to date and ready\n     * to render. This is not called on objects that are not rendered on screen\n     * (\"culling\"). This is always called on layers.\n     */\n    updatePreRender(rendererEffects: RendererEffects, target: EffectsTarget) {\n      for (const filterName in rendererEffects) {\n        const filter = rendererEffects[filterName];\n        filter.updatePreRender(target);\n      }\n    }\n\n    /**\n     * Add a new effect on a PixiJS DisplayObject, or replace the one\n     * with the same name.\n     * @param effectData The effect data\n     * @param rendererEffects The renderer effects\n     * @param target The effects target\n     */\n    addEffect(\n      effectData: EffectData,\n      rendererEffects: RendererEffects,\n      target: EffectsTarget\n    ): boolean {\n      let effectAdded = true;\n      effectAdded =\n        this.initializeEffect(effectData, rendererEffects, target) &&\n        effectAdded;\n      effectAdded =\n        this.updateAllEffectParameters(rendererEffects, effectData) &&\n        effectAdded;\n\n      if (rendererEffects[effectData.name]) {\n        effectAdded =\n          rendererEffects[effectData.name].applyEffect(target) && effectAdded;\n      }\n      return effectAdded;\n    }\n\n    /**\n     * Remove the effect with the specified name from a PixiJS DisplayObject.\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param rendererObject The renderer object.\n     * @param effectName The name of the effect.\n     */\n    removeEffect(\n      rendererEffects: RendererEffects,\n      target: EffectsTarget,\n      effectName: string\n    ): boolean {\n      const filter = rendererEffects[effectName];\n      if (!filter) return false;\n\n      filter.removeEffect(target);\n\n      delete rendererEffects[effectName];\n      return true;\n    }\n\n    /**\n     * Remove all effects from a PixiJS DisplayObject.\n     * @param rendererObject The renderer object.\n     */\n    clearEffects(rendererObject: PIXI.DisplayObject): boolean {\n      if (rendererObject) {\n        rendererObject.filters = [];\n      }\n      return true;\n    }\n\n    /**\n     * Update the parameter of an effect (with a number).\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @param parameterName The parameter name\n     * @param value The new value for the parameter\n     */\n    setEffectDoubleParameter(\n      rendererEffects: RendererEffects,\n      name: string,\n      parameterName: string,\n      value: float\n    ): boolean {\n      const filter = rendererEffects[name];\n      if (!filter) return false;\n      filter.updateDoubleParameter(parameterName, value);\n      return true;\n    }\n\n    /**\n     * Update the parameter of an effect (with a string).\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @param parameterName The parameter name\n     * @param value The new value for the parameter\n     */\n    setEffectStringParameter(\n      rendererEffects: RendererEffects,\n      name: string,\n      parameterName: string,\n      value: string\n    ): boolean {\n      const filter = rendererEffects[name];\n      if (!filter) return false;\n      filter.updateStringParameter(parameterName, value);\n      return true;\n    }\n\n    /**\n     * Enable or disable the parameter of an effect (boolean).\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @param parameterName The parameter name\n     * @param value The new value for the parameter\n     */\n    setEffectBooleanParameter(\n      rendererEffects: RendererEffects,\n      name: string,\n      parameterName: string,\n      value: boolean\n    ): boolean {\n      const filter = rendererEffects[name];\n      if (!filter) return false;\n      filter.updateBooleanParameter(parameterName, value);\n      return true;\n    }\n\n    /**\n     * Updates all the effect parameters.\n     * @param rendererEffects\n     * @param effectData\n     */\n    updateAllEffectParameters(\n      rendererEffects: RendererEffects,\n      effectData: EffectData\n    ): boolean {\n      let updatedDoubles = true;\n      let updatedStrings = true;\n      let updatedBooleans = true;\n      for (let name in effectData.doubleParameters) {\n        updatedDoubles =\n          this.setEffectDoubleParameter(\n            rendererEffects,\n            effectData.name,\n            name,\n            effectData.doubleParameters[name]\n          ) && updatedDoubles;\n      }\n      for (let name in effectData.stringParameters) {\n        updatedStrings =\n          this.setEffectStringParameter(\n            rendererEffects,\n            effectData.name,\n            name,\n            effectData.stringParameters[name]\n          ) && updatedStrings;\n      }\n      for (let name in effectData.booleanParameters) {\n        updatedBooleans =\n          this.setEffectBooleanParameter(\n            rendererEffects,\n            effectData.name,\n            name,\n            effectData.booleanParameters[name]\n          ) && updatedBooleans;\n      }\n\n      return updatedDoubles && updatedStrings && updatedBooleans;\n    }\n\n    /**\n     * Check if an effect exists.\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @returns True if the effect exists, false otherwise\n     */\n    hasEffect(rendererEffects: RendererEffects, name: string): boolean {\n      return !!rendererEffects[name];\n    }\n\n    /**\n     * Enable an effect.\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @param value Set to true to enable, false to disable\n     */\n    enableEffect(\n      rendererEffects: RendererEffects,\n      target: EffectsTarget,\n      name: string,\n      value: boolean\n    ): void {\n      const filter = rendererEffects[name];\n      if (!filter) return;\n      filter.setEnabled(target, value);\n    }\n\n    /**\n     * Check if an effect is enabled.\n     * @param rendererEffects The collection of PixiJS filters.\n     * @param name The effect name\n     * @return true if the filter is enabled\n     */\n    isEffectEnabled(\n      rendererEffects: RendererEffects,\n      target: EffectsTarget,\n      name: string\n    ): boolean {\n      const filter = rendererEffects[name];\n      if (!filter) return false;\n      return filter.isEnabled(target);\n    }\n  }\n\n  // Expose the effect manager to the game engine.\n  export const EffectsManager = PixiEffectsManager;\n  export type EffectsManager = PixiEffectsManager;\n}\n"],
  "mappings": "AAKA,GAAU,MAAV,UAAU,EAAV,CACE,KAAO,GAAO,iBAAiB,KAoB/B,OAAyB,CASvB,iBACE,EACA,EACA,EACS,CACT,KAAM,GAAgB,EAAK,iBAAiB,iBAC1C,EAAW,YAEb,MAAK,GAWL,GAAgB,EAAW,MAAQ,EAAc,WAC/C,EACA,GAEK,IAdL,SAAQ,KACN,YACE,EAAW,qBACI,EAAO,4CACtB,EAAW,wEAGR,IAkBX,gBAAgB,EAAkC,EAAuB,CACvE,SAAW,KAAc,GAEvB,AADe,EAAgB,GACxB,gBAAgB,GAW3B,UACE,EACA,EACA,EACS,CACT,GAAI,GAAc,GAClB,SACE,KAAK,iBAAiB,EAAY,EAAiB,IACnD,EACF,EACE,KAAK,0BAA0B,EAAiB,IAChD,EAEE,EAAgB,EAAW,OAC7B,GACE,EAAgB,EAAW,MAAM,YAAY,IAAW,GAErD,EAST,aACE,EACA,EACA,EACS,CACT,KAAM,GAAS,EAAgB,GAC/B,MAAK,GAEL,GAAO,aAAa,GAEpB,MAAO,GAAgB,GAChB,IALa,GAYtB,aAAa,EAA6C,CACxD,MAAI,IACF,GAAe,QAAU,IAEpB,GAUT,yBACE,EACA,EACA,EACA,EACS,CACT,KAAM,GAAS,EAAgB,GAC/B,MAAK,GACL,GAAO,sBAAsB,EAAe,GACrC,IAFa,GAYtB,yBACE,EACA,EACA,EACA,EACS,CACT,KAAM,GAAS,EAAgB,GAC/B,MAAK,GACL,GAAO,sBAAsB,EAAe,GACrC,IAFa,GAYtB,0BACE,EACA,EACA,EACA,EACS,CACT,KAAM,GAAS,EAAgB,GAC/B,MAAK,GACL,GAAO,uBAAuB,EAAe,GACtC,IAFa,GAUtB,0BACE,EACA,EACS,CACT,GAAI,GAAiB,GACjB,EAAiB,GACjB,EAAkB,GACtB,OAAS,KAAQ,GAAW,iBAC1B,EACE,KAAK,yBACH,EACA,EAAW,KACX,EACA,EAAW,iBAAiB,KACzB,EAET,OAAS,KAAQ,GAAW,iBAC1B,EACE,KAAK,yBACH,EACA,EAAW,KACX,EACA,EAAW,iBAAiB,KACzB,EAET,OAAS,KAAQ,GAAW,kBAC1B,EACE,KAAK,0BACH,EACA,EAAW,KACX,EACA,EAAW,kBAAkB,KAC1B,EAGT,MAAO,IAAkB,GAAkB,EAS7C,UAAU,EAAkC,EAAuB,CACjE,MAAO,CAAC,CAAC,EAAgB,GAS3B,aACE,EACA,EACA,EACA,EACM,CACN,KAAM,GAAS,EAAgB,GAC/B,AAAI,CAAC,GACL,EAAO,WAAW,EAAQ,GAS5B,gBACE,EACA,EACA,EACS,CACT,KAAM,GAAS,EAAgB,GAC/B,MAAK,GACE,EAAO,UAAU,GADJ,IAMjB,AAAM,iBAAiB,IAlRtB",
  "names": []
}
