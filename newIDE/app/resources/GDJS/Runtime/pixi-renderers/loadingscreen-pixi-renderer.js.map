{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/pixi-renderers/loadingscreen-pixi-renderer.ts"],
  "sourcesContent": ["namespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  enum LoadingScreenState {\n    NOT_STARTED,\n    STARTED,\n    FINISHED,\n  }\n\n  const fadeIn = (\n    object: PIXI.DisplayObject | null,\n    duration: float,\n    deltaTimeInMs: float\n  ) => {\n    if (!object) return;\n    if (duration > 0) {\n      object.alpha += ((1 / duration) * deltaTimeInMs) / 1000;\n      if (object.alpha > 1) object.alpha = 1;\n    } else {\n      object.alpha = 1;\n    }\n  };\n  const hasFadedIn = (object: PIXI.DisplayObject | null) => {\n    return !object || object.alpha >= 1;\n  };\n\n  class LoadingScreenPixiRenderer {\n    _pixiRenderer: PIXI.Renderer | null;\n    _loadingScreenData: LoadingScreenData;\n\n    _loadingScreenContainer: PIXI.Container;\n    _backgroundSprite: PIXI.Sprite | null = null;\n    _gdevelopLogoSprite: PIXI.Sprite | null = null;\n    _progressBarGraphics: PIXI.Graphics | null = null;\n\n    _state: LoadingScreenState = LoadingScreenState.NOT_STARTED;\n    _startTimeInMs: float = 0;\n    _backgroundReadyTimeInMs: float = 0;\n    _lastFrameTimeInMs: float = 0;\n    _progressPercent: float = 0;\n\n    constructor(\n      runtimeGamePixiRenderer: gdjs.RuntimeGamePixiRenderer,\n      imageManager: gdjs.PixiImageManager,\n      loadingScreenData: LoadingScreenData\n    ) {\n      this._loadingScreenData = loadingScreenData;\n      this._loadingScreenContainer = new PIXI.Container();\n      this._pixiRenderer = runtimeGamePixiRenderer.getPIXIRenderer();\n      if (!this._pixiRenderer) {\n        // A PIXI Renderer can be missing during tests, when creating a runtime game\n        // without a canvas.\n        return;\n      }\n      this._pixiRenderer.backgroundColor = this._loadingScreenData.backgroundColor;\n\n      const backgroundTexture = imageManager.getPIXITexture(\n        loadingScreenData.backgroundImageResourceName\n      );\n      if (backgroundTexture !== imageManager.getInvalidPIXITexture()) {\n        this._backgroundSprite = PIXI.Sprite.from(backgroundTexture);\n        this._backgroundSprite.alpha = 0;\n        this._backgroundSprite.anchor.x = 0.5;\n        this._backgroundSprite.anchor.y = 0.5;\n        this._loadingScreenContainer.addChild(this._backgroundSprite);\n      }\n\n      if (loadingScreenData.showGDevelopSplash) {\n        this._gdevelopLogoSprite = PIXI.Sprite.from(gdjs.gdevelopLogo);\n        this._gdevelopLogoSprite.alpha = 0;\n        this._gdevelopLogoSprite.anchor.x = 0.5;\n        this._gdevelopLogoSprite.anchor.y = 0.5;\n        this._loadingScreenContainer.addChild(this._gdevelopLogoSprite);\n      }\n      if (loadingScreenData.showProgressBar) {\n        this._progressBarGraphics = new PIXI.Graphics();\n        this._progressBarGraphics.alpha = 0;\n        this._loadingScreenContainer.addChild(this._progressBarGraphics);\n      }\n\n      this._render(performance.now());\n    }\n\n    setPercent(percent: number) {\n      this._progressPercent = percent;\n    }\n\n    private _startLoadingScreen() {\n      if (!this._pixiRenderer) return;\n      this._state = LoadingScreenState.STARTED;\n      this._startTimeInMs = performance.now();\n    }\n\n    private _updatePositions() {\n      if (!this._pixiRenderer) return;\n\n      if (this._backgroundSprite && this._backgroundSprite.texture.valid) {\n        this._backgroundSprite.position.x = this._pixiRenderer.width / 2;\n        this._backgroundSprite.position.y = this._pixiRenderer.height / 2;\n        const scale = Math.max(\n          this._pixiRenderer.width / this._backgroundSprite.texture.width,\n          this._pixiRenderer.height / this._backgroundSprite.texture.height\n        );\n        this._backgroundSprite.scale.x = scale;\n        this._backgroundSprite.scale.y = scale;\n      }\n\n      if (this._gdevelopLogoSprite) {\n        this._gdevelopLogoSprite.position.x = this._pixiRenderer.width / 2;\n        this._gdevelopLogoSprite.position.y = this._pixiRenderer.height / 2;\n        const logoWidth = 680;\n        const border =\n          this._pixiRenderer.width > this._pixiRenderer.height &&\n          this._pixiRenderer.width > 500\n            ? 150\n            : 35;\n        const desiredWidth = Math.min(\n          logoWidth,\n          Math.max(1, this._pixiRenderer.width - border * 2)\n        );\n        const scale = desiredWidth / logoWidth;\n        this._gdevelopLogoSprite.scale.x = scale;\n        this._gdevelopLogoSprite.scale.y = scale;\n\n        // Give up trying to show the logo if the resolution is really too small.\n        // TODO: use a low resolution logo instead.\n        this._gdevelopLogoSprite.visible =\n          this._pixiRenderer.width > 200 && this._pixiRenderer.height > 200;\n      }\n    }\n\n    private _render(timeInMs: float) {\n      if (!this._pixiRenderer) {\n        return;\n      }\n\n      // Continue the rendering loop as long as the loading screen is not finished.\n      if (this._state !== LoadingScreenState.FINISHED) {\n        requestAnimationFrame(() => this._render(performance.now()));\n      }\n\n      const deltaTimeInMs = this._lastFrameTimeInMs\n        ? timeInMs - this._lastFrameTimeInMs\n        : 0;\n      this._lastFrameTimeInMs = timeInMs;\n\n      this._updatePositions();\n\n      if (this._state == LoadingScreenState.NOT_STARTED) {\n        if (!this._backgroundSprite || this._backgroundSprite.texture.valid) {\n          this._startLoadingScreen();\n        }\n      } else if (this._state == LoadingScreenState.STARTED) {\n        const backgroundFadeInDuration = this._loadingScreenData\n          .backgroundFadeInDuration;\n        fadeIn(this._backgroundSprite, backgroundFadeInDuration, deltaTimeInMs);\n\n        if (hasFadedIn(this._backgroundSprite)) {\n          if (!this._backgroundReadyTimeInMs)\n            this._backgroundReadyTimeInMs = timeInMs;\n\n          const logoAndProgressFadeInDuration = this._loadingScreenData\n            .logoAndProgressFadeInDuration;\n          const logoAndProgressLogoFadeInDelay = this._loadingScreenData\n            .logoAndProgressLogoFadeInDelay;\n\n          if (\n            timeInMs - this._backgroundReadyTimeInMs >\n            logoAndProgressLogoFadeInDelay * 1000\n          ) {\n            fadeIn(\n              this._gdevelopLogoSprite,\n              logoAndProgressFadeInDuration,\n              deltaTimeInMs\n            );\n            fadeIn(\n              this._progressBarGraphics,\n              logoAndProgressFadeInDuration,\n              deltaTimeInMs\n            );\n          }\n        }\n\n        if (this._progressBarGraphics) {\n          const color = this._loadingScreenData.progressBarColor;\n          let progressBarWidth =\n            (this._loadingScreenData.progressBarWidthPercent / 100) *\n            this._pixiRenderer.width;\n          if (this._loadingScreenData.progressBarMaxWidth > 0) {\n            if (progressBarWidth > this._loadingScreenData.progressBarMaxWidth)\n              progressBarWidth = this._loadingScreenData.progressBarMaxWidth;\n          }\n          if (this._loadingScreenData.progressBarMinWidth > 0) {\n            if (progressBarWidth < this._loadingScreenData.progressBarMinWidth)\n              progressBarWidth = this._loadingScreenData.progressBarMinWidth;\n          }\n\n          const progressBarHeight = this._loadingScreenData.progressBarHeight;\n          const progressBarX = Math.floor(\n            this._pixiRenderer.width / 2 - progressBarWidth / 2\n          );\n          const progressBarY =\n            this._pixiRenderer.height < 350\n              ? Math.floor(this._pixiRenderer.height - 10 - progressBarHeight)\n              : Math.floor(this._pixiRenderer.height - 90 - progressBarHeight);\n          const lineWidth = 1;\n          // Display bar with an additional 1% to ensure it's filled at the end.\n          const progress = Math.min(1, (this._progressPercent + 1) / 100);\n          this._progressBarGraphics.clear();\n          this._progressBarGraphics.lineStyle(lineWidth, color, 1, 0);\n          this._progressBarGraphics.drawRect(\n            progressBarX,\n            progressBarY,\n            progressBarWidth,\n            progressBarHeight\n          );\n\n          this._progressBarGraphics.beginFill(color, 1);\n          this._progressBarGraphics.lineStyle(0, color, 1);\n          this._progressBarGraphics.drawRect(\n            progressBarX + lineWidth,\n            progressBarY + lineWidth,\n            progressBarWidth * progress - lineWidth * 2,\n            progressBarHeight - lineWidth * 2\n          );\n          this._progressBarGraphics.endFill();\n        }\n      }\n\n      this._pixiRenderer.render(this._loadingScreenContainer);\n    }\n\n    unload(): Promise<void> {\n      const totalElapsedTime = (performance.now() - this._startTimeInMs) / 1000;\n      const remainingTime =\n        this._loadingScreenData.minDuration - totalElapsedTime;\n      this.setPercent(100);\n\n      // Ensure we have shown the loading screen for at least minDuration.\n      if (remainingTime <= 0) {\n        this._state = LoadingScreenState.FINISHED;\n        return Promise.resolve();\n      }\n      return new Promise((resolve) =>\n        setTimeout(() => {\n          this._state = LoadingScreenState.FINISHED;\n          resolve();\n        }, remainingTime * 1000)\n      );\n    }\n  }\n\n  //Register the class to let the engine use it.\n  export const LoadingScreenRenderer = LoadingScreenPixiRenderer;\n}\n"],
  "mappings": "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",
  "names": []
}
