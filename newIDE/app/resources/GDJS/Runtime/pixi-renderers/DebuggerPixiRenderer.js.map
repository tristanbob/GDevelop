{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/pixi-renderers/DebuggerPixiRenderer.ts"],
  "sourcesContent": ["namespace gdjs {\n  import PIXI = GlobalPIXIModule.PIXI;\n\n  /**\n   * A renderer for debug instances location of a container using Pixi.js.\n   *\n   * @see gdjs.CustomObjectPixiRenderer\n   */\n  export class DebuggerPixiRenderer {\n    _instanceContainer: gdjs.RuntimeInstanceContainer;\n    _debugDraw: PIXI.Graphics | null = null;\n    _debugDrawContainer: PIXI.Container | null = null;\n    _debugDrawRenderedObjectsPoints: Record<\n      number,\n      {\n        wasRendered: boolean;\n        points: Record<string, PIXI.Text>;\n      }\n    >;\n\n    constructor(instanceContainer: gdjs.RuntimeInstanceContainer) {\n      this._instanceContainer = instanceContainer;\n      this._debugDrawRenderedObjectsPoints = {};\n      this._debugDraw = null;\n    }\n\n    getRendererObject() {\n      return this._debugDrawContainer;\n    }\n\n    /**\n     * Render graphics for debugging purpose. Activate this in `gdjs.RuntimeScene`,\n     * in the `renderAndStep` method.\n     * @see gdjs.RuntimeInstanceContainer#enableDebugDraw\n     */\n    renderDebugDraw(\n      instances: gdjs.RuntimeObject[],\n      showHiddenInstances: boolean,\n      showPointsNames: boolean,\n      showCustomPoints: boolean\n    ) {\n      const pixiContainer = this._instanceContainer\n        .getRenderer()\n        .getRendererObject();\n      if (!this._debugDraw || !this._debugDrawContainer) {\n        this._debugDrawContainer = new PIXI.Container();\n        this._debugDraw = new PIXI.Graphics();\n\n        // Add on top of all layers:\n        this._debugDrawContainer.addChild(this._debugDraw);\n        pixiContainer.addChild(this._debugDrawContainer);\n      }\n      const debugDraw = this._debugDraw;\n\n      // Reset the boolean \"wasRendered\" of all points of objects to false:\n      for (let id in this._debugDrawRenderedObjectsPoints) {\n        this._debugDrawRenderedObjectsPoints[id].wasRendered = false;\n      }\n\n      const renderObjectPoint = (\n        points: Record<string, PIXI.Text>,\n        name: string,\n        fillColor: integer,\n        x: float,\n        y: float\n      ) => {\n        debugDraw.line.color = fillColor;\n        debugDraw.fill.color = fillColor;\n        debugDraw.drawCircle(x, y, 3);\n\n        if (showPointsNames) {\n          if (!points[name]) {\n            points[name] = new PIXI.Text(name, {\n              fill: fillColor,\n              fontSize: 12,\n            });\n\n            this._debugDrawContainer!.addChild(points[name]);\n          }\n\n          points[name].position.set(x, y);\n        }\n      };\n\n      debugDraw.clear();\n      debugDraw.beginFill();\n      debugDraw.alpha = 0.8;\n      debugDraw.lineStyle(2, 0x0000ff, 1);\n\n      // Draw AABB\n      const workingPoint: FloatPoint = [0, 0];\n      for (let i = 0; i < instances.length; i++) {\n        const object = instances[i];\n        const layer = this._instanceContainer.getLayer(object.getLayer());\n\n        if (\n          (!object.isVisible() || !layer.isVisible()) &&\n          !showHiddenInstances\n        ) {\n          continue;\n        }\n\n        const rendererObject = object.getRendererObject();\n        if (!rendererObject) {\n          continue;\n        }\n        const aabb = object.getAABB();\n        debugDraw.fill.alpha = 0.2;\n        debugDraw.line.color = 0x778ee8;\n        debugDraw.fill.color = 0x778ee8;\n\n        const polygon: float[] = [];\n        polygon.push.apply(\n          polygon,\n          layer.applyLayerTransformation(\n            aabb.min[0],\n            aabb.min[1],\n            0,\n            workingPoint\n          )\n        );\n        polygon.push.apply(\n          polygon,\n          layer.applyLayerTransformation(\n            aabb.max[0],\n            aabb.min[1],\n            0,\n            workingPoint\n          )\n        );\n        polygon.push.apply(\n          polygon,\n          layer.applyLayerTransformation(\n            aabb.max[0],\n            aabb.max[1],\n            0,\n            workingPoint\n          )\n        );\n        polygon.push.apply(\n          polygon,\n          layer.applyLayerTransformation(\n            aabb.min[0],\n            aabb.max[1],\n            0,\n            workingPoint\n          )\n        );\n\n        debugDraw.drawPolygon(polygon);\n      }\n\n      // Draw hitboxes and points\n      for (let i = 0; i < instances.length; i++) {\n        const object = instances[i];\n        const layer = this._instanceContainer.getLayer(object.getLayer());\n\n        if (\n          (!object.isVisible() || !layer.isVisible()) &&\n          !showHiddenInstances\n        ) {\n          continue;\n        }\n\n        const rendererObject = object.getRendererObject();\n        if (!rendererObject) {\n          continue;\n        }\n\n        // Create the structure to store the points in memory\n        const id = object.id;\n        if (!this._debugDrawRenderedObjectsPoints[id]) {\n          this._debugDrawRenderedObjectsPoints[id] = {\n            wasRendered: true,\n            points: {},\n          };\n        }\n        const renderedObjectPoints = this._debugDrawRenderedObjectsPoints[id];\n        renderedObjectPoints.wasRendered = true;\n\n        // Draw hitboxes (sub-optimal performance)\n        const hitboxes = object.getHitBoxes();\n        for (let j = 0; j < hitboxes.length; j++) {\n          // Note that this conversion is sub-optimal, but we don't care\n          // as this is for debug draw.\n          const polygon: float[] = [];\n          hitboxes[j].vertices.forEach((point) => {\n            point = layer.applyLayerTransformation(\n              point[0],\n              point[1],\n              0,\n              workingPoint\n            );\n\n            polygon.push(point[0]);\n            polygon.push(point[1]);\n          });\n          debugDraw.fill.alpha = 0;\n          debugDraw.line.alpha = 0.5;\n          debugDraw.line.color = 0xff0000;\n          debugDraw.drawPolygon(polygon);\n        }\n\n        // Draw points\n        debugDraw.fill.alpha = 0.3;\n\n        // Draw Center point\n        const centerPoint = layer.applyLayerTransformation(\n          object.getCenterXInScene(),\n          object.getCenterYInScene(),\n          0,\n          workingPoint\n        );\n\n        renderObjectPoint(\n          renderedObjectPoints.points,\n          'Center',\n          0xffff00,\n          centerPoint[0],\n          centerPoint[1]\n        );\n\n        // Draw position point\n        const positionPoint = layer.applyLayerTransformation(\n          object.getX(),\n          object.getY(),\n          0,\n          workingPoint\n        );\n\n        renderObjectPoint(\n          renderedObjectPoints.points,\n          'Position',\n          0xff0000,\n          positionPoint[0],\n          positionPoint[1]\n        );\n\n        // Draw Origin point\n        if (object instanceof gdjs.SpriteRuntimeObject) {\n          let originPoint = object.getPointPosition('origin');\n          // When there is neither rotation nor flipping,\n          // the origin point is over the position point.\n          if (\n            Math.abs(originPoint[0] - positionPoint[0]) >= 1 ||\n            Math.abs(originPoint[1] - positionPoint[1]) >= 1\n          ) {\n            originPoint = layer.applyLayerTransformation(\n              originPoint[0],\n              originPoint[1],\n              0,\n              workingPoint\n            );\n\n            renderObjectPoint(\n              renderedObjectPoints.points,\n              'Origin',\n              0xff0000,\n              originPoint[0],\n              originPoint[1]\n            );\n          }\n        }\n\n        // Draw custom point\n        if (showCustomPoints && object instanceof gdjs.SpriteRuntimeObject) {\n          if (!object._animationFrame) continue;\n\n          for (const customPointName in object._animationFrame.points.items) {\n            let customPoint = object.getPointPosition(customPointName);\n\n            customPoint = layer.applyLayerTransformation(\n              customPoint[0],\n              customPoint[1],\n              0,\n              workingPoint\n            );\n\n            renderObjectPoint(\n              renderedObjectPoints.points,\n              customPointName,\n              0x0000ff,\n              customPoint[0],\n              customPoint[1]\n            );\n          }\n        }\n      }\n\n      // Clean any point text from an object that is not rendered.\n      for (const objectID in this._debugDrawRenderedObjectsPoints) {\n        const renderedObjectPoints = this._debugDrawRenderedObjectsPoints[\n          objectID\n        ];\n        if (renderedObjectPoints.wasRendered) continue;\n\n        const points = renderedObjectPoints.points;\n        for (const name in points) {\n          this._debugDrawContainer.removeChild(points[name]);\n        }\n      }\n\n      debugDraw.endFill();\n    }\n\n    clearDebugDraw(): void {\n      if (this._debugDraw) {\n        this._debugDraw.clear();\n      }\n\n      if (this._debugDrawContainer) {\n        this._debugDrawContainer.destroy({\n          children: true,\n        });\n        const pixiContainer: PIXI.Container = this._instanceContainer\n          .getRenderer()\n          .getRendererObject();\n        pixiContainer.removeChild(this._debugDrawContainer);\n      }\n      this._debugDraw = null;\n      this._debugDrawContainer = null;\n      this._debugDrawRenderedObjectsPoints = {};\n    }\n  }\n\n  // Register the class to let the engine use it.\n  export type DebuggerRenderer = gdjs.DebuggerPixiRenderer;\n  export const DebuggerRenderer = gdjs.DebuggerPixiRenderer;\n}\n"],
  "mappings": "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",
  "names": []
}
