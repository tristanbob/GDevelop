{
  "version": 3,
  "sources": ["../../../../../GDJS/Runtime/affinetransformation.ts"],
  "sourcesContent": ["namespace gdjs {\n  /**\n   * An affine transformation that can transform points.\n   */\n  export class AffineTransformation {\n    private matrix: Float32Array;\n\n    /**\n     * Initialize to the identity.\n     */\n    constructor() {\n      // | 1 0 0 |\n      // | 0 1 0 |\n      // | 0 0 1 |\n      this.matrix = new Float32Array([1, 0, 0, 1, 0, 0]);\n    }\n\n    /**\n     * Reset to the identity.\n     */\n    setToIdentity() {\n      const matrix = this.matrix;\n      // | 1 0 0 |\n      // | 0 1 0 |\n      // | 0 0 1 |\n      matrix[0] = 1;\n      matrix[1] = 0;\n      matrix[2] = 0;\n      matrix[3] = 1;\n      matrix[4] = 0;\n      matrix[5] = 0;\n    }\n\n    /**\n     * Check if this transformation is the identity.\n     */\n    isIdentity(): boolean {\n      const matrix = this.matrix;\n      return (\n        matrix[0] === 1 &&\n        matrix[1] === 0 &&\n        matrix[2] === 0 &&\n        matrix[3] === 1 &&\n        matrix[4] === 0 &&\n        matrix[5] === 0\n      );\n    }\n\n    /**\n     * Check if this is equals to another transformation.\n     * @param other The transformation to check.\n     */\n    equals(other: AffineTransformation): boolean {\n      const matrix = this.matrix;\n      const otherMatrix = other.matrix;\n      return (\n        this === other ||\n        (matrix[0] === otherMatrix[0] &&\n          matrix[1] === otherMatrix[1] &&\n          matrix[2] === otherMatrix[2] &&\n          matrix[3] === otherMatrix[3] &&\n          matrix[4] === otherMatrix[4] &&\n          matrix[5] === otherMatrix[5])\n      );\n    }\n\n    /**\n     * Check if this is almost equals to another transformation.\n     * @param other The transformation to check.\n     * @param epsilon The relative margin error.\n     */\n    nearlyEquals(other: AffineTransformation, epsilon: float): boolean {\n      const matrix = this.matrix;\n      const otherMatrix = other.matrix;\n      return (\n        this === other ||\n        (gdjs.nearlyEqual(matrix[0], otherMatrix[0], epsilon) &&\n          gdjs.nearlyEqual(matrix[1], otherMatrix[1], epsilon) &&\n          gdjs.nearlyEqual(matrix[2], otherMatrix[2], epsilon) &&\n          gdjs.nearlyEqual(matrix[3], otherMatrix[3], epsilon) &&\n          gdjs.nearlyEqual(matrix[4], otherMatrix[4], epsilon) &&\n          gdjs.nearlyEqual(matrix[5], otherMatrix[5], epsilon))\n      );\n    }\n\n    /**\n     * Copy a transformation.\n     * @param other The transformation to copy.\n     */\n    copyFrom(other: AffineTransformation) {\n      const matrix = this.matrix;\n      const otherMatrix = other.matrix;\n\n      matrix[0] = otherMatrix[0];\n      matrix[1] = otherMatrix[1];\n      matrix[2] = otherMatrix[2];\n      matrix[3] = otherMatrix[3];\n      matrix[4] = otherMatrix[4];\n      matrix[5] = otherMatrix[5];\n\n      return this;\n    }\n\n    /**\n     * Reset to a translation.\n     *\n     * @param x The horizontal translation value.\n     * @param y The vertical translation value.\n     */\n    setToTranslation(tx: float, ty: float) {\n      const matrix = this.matrix;\n      // | m0 m2 m4 |   | 1 0 tx |\n      // | m1 m3 m5 | = | 0 1 ty |\n      // |  0  0  1 |   | 0 0  1 |\n      matrix[0] = 1;\n      matrix[1] = 0;\n      matrix[2] = 0;\n      matrix[3] = 1;\n      matrix[4] = tx;\n      matrix[5] = ty;\n    }\n\n    /**\n     * Concatenate a translation.\n     *\n     * @param tx The horizontal translation value.\n     * @param ty The vertical translation value.\n     */\n    translate(tx: float, ty: float) {\n      var matrix = this.matrix;\n      //          1 0 tx\n      //          0 1 ty\n      //          0 0  1\n      // m0 m2 m4\n      // m1 m3 m5\n      //  0  0  1\n      matrix[4] = matrix[0] * tx + matrix[2] * ty + matrix[4];\n      matrix[5] = matrix[1] * tx + matrix[3] * ty + matrix[5];\n    }\n\n    /**\n     * Reset to a scale.\n     *\n     * @param sx The horizontal scale value.\n     * @param sy The vertical scale value.\n     */\n    setToScale(sx: float, sy: float) {\n      const matrix = this.matrix;\n      // | m0 m2 m4 |   | sx 0  0 |\n      // | m1 m3 m5 | = | 0  sy 0 |\n      // |  0  0  1 |   | 0  0  1 |\n      matrix[0] = sx;\n      matrix[1] = 0;\n      matrix[2] = 0;\n      matrix[3] = sy;\n      matrix[4] = 0;\n      matrix[5] = 0;\n    }\n\n    /**\n     * Concatenate a scale.\n     *\n     * @param sx The horizontal scale value.\n     * @param sy The vertical scale value.\n     */\n    scale(sx: float, sy: float) {\n      const matrix = this.matrix;\n      //          sx  0 0\n      //           0 sy 0\n      //           0  0 1\n      // m0 m2 m4\n      // m1 m3 m5\n      //  0  0  1\n      matrix[0] *= sx;\n      matrix[1] *= sx;\n      matrix[2] *= sy;\n      matrix[3] *= sy;\n    }\n\n    /**\n     * Reset to a rotation.\n     *\n     * @param angle The angle of rotation in radians.\n     */\n    setToRotation(theta: float) {\n      const matrix = this.matrix;\n      let cost = Math.cos(theta);\n      let sint = Math.sin(theta);\n\n      // Avoid rounding errors around 0.\n      if (cost === -1 || cost === 1) {\n        sint = 0;\n      }\n      if (sint === -1 || sint === 1) {\n        cost = 0;\n      }\n\n      // | m0 m2 m4 |   | cost -sint 0 |\n      // | m1 m3 m5 | = | sint  cost 0 |\n      // |  0  0  1 |   |  0     0   1 |\n      matrix[0] = cost;\n      matrix[1] = sint;\n      matrix[2] = -sint;\n      matrix[3] = cost;\n      matrix[4] = 0;\n      matrix[5] = 0;\n    }\n\n    /**\n     * Concatenate a rotation.\n     *\n     * @param angle The angle of rotation in radians.\n     */\n    rotate(angle: float) {\n      const matrix = this.matrix;\n      let cost = Math.cos(angle);\n      let sint = Math.sin(angle);\n\n      // Avoid rounding errors around 0.\n      if (cost === -1 || cost === 1) {\n        sint = 0;\n      }\n      if (sint === -1 || sint === 1) {\n        cost = 0;\n      }\n\n      //           cost -sint 0\n      //           sint  cost 0\n      //            0     0   1\n      //  m0 m2 m4\n      //  m1 m3 m5\n      //   0  0  1\n\n      const m0 = matrix[0];\n      const m1 = matrix[1];\n      const m2 = matrix[2];\n      const m3 = matrix[3];\n\n      matrix[0] = m0 * cost + m2 * sint;\n      matrix[1] = m1 * cost + m3 * sint;\n      matrix[2] = m0 * -sint + m2 * cost;\n      matrix[3] = m1 * -sint + m3 * cost;\n    }\n\n    /**\n     * Reset to a rotation.\n     *\n     * @param angle The angle of rotation in radians.\n     * @param anchorX The rotation anchor point X.\n     * @param anchorY The rotation anchor point Y.\n     */\n    setToRotationAround(angle: float, anchorX: float, anchorY: float) {\n      const matrix = this.matrix;\n      let cost = Math.cos(angle);\n      let sint = Math.sin(angle);\n\n      // Avoid rounding errors around 0.\n      if (cost === -1 || cost === 1) {\n        sint = 0;\n      }\n      if (sint === -1 || sint === 1) {\n        cost = 0;\n      }\n\n      // | m0 m2 m4 |   | cost -sint x-x*cost+y*sint |\n      // | m1 m3 m5 | = | sint  cost y-x*sint-y*cost |\n      // |  0  0  1 |   |  0     0          1        |\n      matrix[0] = cost;\n      matrix[1] = sint;\n      matrix[2] = -sint;\n      matrix[3] = cost;\n      matrix[4] = anchorX - anchorX * cost + anchorY * sint;\n      matrix[5] = anchorY - anchorX * sint + anchorY * cost;\n    }\n\n    /**\n     * Concatenate a rotation.\n     *\n     * @param angle The angle of rotation in radians.\n     * @param anchorX The rotation anchor point X.\n     * @param anchorY The rotation anchor point Y.\n     */\n    rotateAround(angle: float, anchorX: float, anchorY: float) {\n      this.translate(anchorX, anchorY);\n      this.rotate(angle);\n      // First: translate anchor to origin\n      this.translate(-anchorX, -anchorY);\n    }\n\n    /**\n     * Reset to an horizontal flip.\n     *\n     * @param anchorX The flip anchor point X.\n     */\n    setToFlipX(anchorX: float) {\n      const matrix = this.matrix;\n      // | m0 m2 m4 |   | -1  0 2x |\n      // | m1 m3 m5 | = |  0  1  0 |\n      // |  0  0  1 |   |  0  0  1 |\n      matrix[0] = -1;\n      matrix[1] = 0;\n      matrix[2] = 0;\n      matrix[3] = 1;\n      matrix[4] = 2 * anchorX;\n      matrix[5] = 0;\n    }\n\n    /**\n     * Concatenate an horizontal flip.\n     *\n     * @param anchorX The flip anchor point X.\n     */\n    flipX(anchorX: float) {\n      this.translate(anchorX, 0);\n      this.scale(-1, 1);\n      // First: translate anchor to origin\n      this.translate(-anchorX, 0);\n    }\n\n    /**\n     * Reset to an vertical flip.\n     *\n     * @param anchorY The flip anchor point Y.\n     */\n    setToFlipY(anchorY: float) {\n      const matrix = this.matrix;\n      // | m0 m2 m4 |   | 1  0  0 |\n      // | m1 m3 m5 | = | 0 -1 2x |\n      // |  0  0  1 |   | 0  0  1 |\n      matrix[0] = -1;\n      matrix[1] = 0;\n      matrix[2] = 0;\n      matrix[3] = 1;\n      matrix[4] = 0;\n      matrix[5] = 2 * anchorY;\n    }\n\n    /**\n     * Concatenate an vertical flip.\n     *\n     * @param anchorY The flip anchor point Y.\n     */\n    flipY(anchorY: float) {\n      this.translate(0, anchorY);\n      this.scale(1, -1);\n      // First: translate anchor to origin\n      this.translate(0, -anchorY);\n    }\n\n    /**\n     * Concatenate a transformation after this one.\n     * @param other The transformation to concatenate.\n     */\n    concatenate(other: AffineTransformation) {\n      const matrix = this.matrix;\n      const otherMatrix = other.matrix;\n\n      const m0 = matrix[0];\n      const m1 = matrix[1];\n      const m2 = matrix[2];\n      const m3 = matrix[3];\n      const m4 = matrix[4];\n      const m5 = matrix[5];\n\n      const o0 = otherMatrix[0];\n      const o1 = otherMatrix[1];\n      const o2 = otherMatrix[2];\n      const o3 = otherMatrix[3];\n      const o4 = otherMatrix[4];\n      const o5 = otherMatrix[5];\n\n      //          o0 o2 o4\n      //          o1 o3 o5\n      //           0  0  1\n      // m0 m2 m4\n      // m1 m3 m5\n      //  0  0  1\n      matrix[0] = o0 * m0 + o1 * m2;\n      matrix[1] = o0 * m1 + o1 * m3;\n      matrix[2] = o2 * m0 + o3 * m2;\n      matrix[3] = o2 * m1 + o3 * m3;\n      matrix[4] = o4 * m0 + o5 * m2 + m4;\n      matrix[5] = o4 * m1 + o5 * m3 + m5;\n    }\n\n    /**\n     * Concatenate a transformation before this one.\n     * @param other The transformation to concatenate.\n     */\n    preConcatenate(other: AffineTransformation) {\n      const matrix = this.matrix;\n      const otherMatrix = other.matrix;\n\n      const m0 = matrix[0];\n      const m1 = matrix[1];\n      const m2 = matrix[2];\n      const m3 = matrix[3];\n      const m4 = matrix[4];\n      const m5 = matrix[5];\n\n      const o0 = otherMatrix[0];\n      const o1 = otherMatrix[1];\n      const o2 = otherMatrix[2];\n      const o3 = otherMatrix[3];\n      const o4 = otherMatrix[4];\n      const o5 = otherMatrix[5];\n\n      //          m0 m2 m4\n      //          m1 m3 m5\n      //           0  0  1\n      // o0 o2 o4\n      // o1 o3 o5\n      //  0  0  1\n      matrix[0] = m0 * o0 + m1 * o2;\n      matrix[1] = m0 * o1 + m1 * o3;\n      matrix[2] = m2 * o0 + m3 * o2;\n      matrix[3] = m2 * o1 + m3 * o3;\n      matrix[4] = m4 * o0 + m5 * o2 + o4;\n      matrix[5] = m4 * o1 + m5 * o3 + o5;\n    }\n\n    /**\n     * Transform a point.\n     *\n     * @param source The point to transform.\n     * @param destination The Point to store the transformed coordinates.\n     */\n    transform(source: FloatPoint, destination: FloatPoint) {\n      const matrix = this.matrix;\n      //          x\n      //          y\n      //          1\n      // m0 m2 m4\n      // m1 m3 m5\n      //  0  0  1\n      const x = matrix[0] * source[0] + matrix[2] * source[1] + matrix[4];\n      const y = matrix[1] * source[0] + matrix[3] * source[1] + matrix[5];\n      destination[0] = x;\n      destination[1] = y;\n    }\n\n    /**\n     * Invert the matrix.\n     */\n    invert() {\n      const matrix = this.matrix;\n\n      const m0 = matrix[0];\n      const m1 = matrix[1];\n      const m2 = matrix[2];\n      const m3 = matrix[3];\n      const m4 = matrix[4];\n      const m5 = matrix[5];\n\n      const n = m0 * m3 - m1 * m2;\n\n      matrix[0] = m3 / n;\n      matrix[1] = -m1 / n;\n      matrix[2] = -m2 / n;\n      matrix[3] = m0 / n;\n      matrix[4] = (m2 * m5 - m3 * m4) / n;\n      matrix[5] = -(m0 * m5 - m1 * m4) / n;\n\n      return this;\n    }\n\n    toString() {\n      const matrix = this.matrix;\n      return `[[${matrix[0]} ${matrix[1]}] [${matrix[2]} ${matrix[3]}] [${matrix[4]} ${matrix[5]}]]`;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
