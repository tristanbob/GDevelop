{
  "version": 3,
  "sources": ["../../../../../../GDJS/Runtime/howler-sound-manager/howler-sound-manager.ts"],
  "sourcesContent": ["///<reference path='../types/howler'>\n/*\n * GDevelop JS Platform\n * Copyright 2013-present Florian Rival (Florian.Rival@gmail.com). All rights reserved.\n * This project is released under the MIT License.\n */\nnamespace gdjs {\n  const logger = new gdjs.Logger('Audio manager');\n\n  const HowlParameters: HowlOptions = {\n    preload: true,\n    onplayerror: (_, error) =>\n      logger.error(\"Can't play an audio file: \" + error),\n    onloaderror: (_, error) =>\n      logger.error('Error while loading an audio file: ' + error),\n  };\n\n  /**\n   * Ensure the volume is between 0 and 1.\n   */\n  const clampVolume = (volume: float): float => {\n    if (volume > 1.0) {\n      return 1.0;\n    }\n    if (volume < 0) {\n      return 0;\n    }\n    return volume;\n  };\n\n  /**\n   * A thin wrapper around a Howl object with:\n   * * Handling of callbacks when the sound is not yet loaded.\n   * * Automatic clamping when calling `setRate` to ensure a valid value is passed to Howler.js.\n   * * Automatic clamping when calling `setVolume` so that the volume is always between 0 and 1.\n   *\n   * @memberof gdjs\n   * @class HowlerSound\n   */\n  export class HowlerSound {\n    /**\n     * The ID of the played sound.\n     */\n    private _id: integer | null = null;\n\n    /**\n     * The Howl passed to the constructor.\n     * It defines the sound file that is being played.\n     */\n    private _howl: Howl;\n\n    /**\n     * The **initial** volume at which the sound is being played.\n     * Once the sound is started, this volume can be not in sync\n     * (in the case the sound is faded by Howler), so volume must\n     * be gotten from `this._howl` directly.\n     *\n     * This value is clamped between 0 and 1.\n     */\n    private _initialVolume: float;\n\n    /**\n     * Whether the sound is being played in a loop or not.\n     */\n    private _loop: boolean;\n\n    /**\n     * The rate (speed) the sound is being played at.\n     * This value is not clamped, though technically Howler.js will only\n     * accepts values between a specific range (so we clamp this when\n     * passing it to Howler.js, but keep the original value here).\n     */\n    private _rate: float;\n\n    /**\n     * An array of callbacks to call once the sound starts to play.\n     */\n    private _oncePlay: Array<HowlCallback> = [];\n\n    /**\n     * An array of callbacks to call everytime the sound starts to play.\n     */\n    private _onPlay: Array<HowlCallback> = [];\n\n    constructor(howl: Howl, volume: float, loop: boolean, rate: float) {\n      this._howl = howl;\n      this._initialVolume = clampVolume(volume);\n      this._loop = loop;\n      this._rate = rate;\n    }\n\n    /**\n     * Returns true if the associated howl is fully loaded.\n     */\n    isLoaded(): boolean {\n      return this._howl.state() === 'loaded';\n    }\n\n    /**\n     * Begins playback of the sound, or if the Howl is still loading, schedule playing for once it loads.\n     * @returns The current instance for chaining.\n     */\n    play(): this {\n      if (this.isLoaded()) {\n        const newID = this._howl.play(\n          this._id === null ? '__default' : this._id\n        );\n        this._id = newID;\n\n        // Set the howl properties as soon as the sound is played and we have its ID.\n        this._howl.volume(this._initialVolume, newID); // this._initialVolume is already clamped between 0 and 1.\n        this._howl.loop(this._loop, newID);\n        // this._rate is not clamped, but we need to clamp it when passing it to Howler.js as it\n        // only supports a specific range.\n        this._howl.rate(gdjs.HowlerSoundManager.clampRate(this._rate), newID);\n\n        // Manually handle the play event before we have an ID.\n        // Before loading, howler won't register events as without an ID we cannot set a listener.\n        // Once we have an ID, we can transfer control of the events to howler.\n        // We also need to call them once as Howler doesn't for the first play event.\n        this._onPlay.forEach((func) => {\n          // Transfer the event to howler now that we have an ID\n          this.on('play', func);\n          func(newID);\n        });\n        this._oncePlay.forEach((func) => func(newID));\n        this._onPlay = [];\n        this._oncePlay = [];\n      } else this._howl.once('load', () => this.play()); // Play only once the howl is fully loaded\n\n      return this;\n    }\n\n    /**\n     * Pauses playback of the sound, saving the seek of playback.\n     * @returns The current instance for chaining.\n     */\n    pause(): this {\n      if (this._id !== null) this._howl.pause(this._id);\n      return this;\n    }\n\n    /**\n     * Stops playback of the sound, resetting seek to 0.\n     * @returns The current instance for chaining.\n     */\n    stop(): this {\n      if (this._id !== null) this._howl.stop(this._id);\n      return this;\n    }\n\n    /**\n     * Check if the sound is currently playing.\n     * Note that a loading sound is considered as playing (as it will be\n     * played as soon as it's loaded). To avoid loading at runtime, prefer\n     * to preload the sounds.\n     */\n    playing(): boolean {\n      return (\n        (this._id !== null ? this._howl.playing(this._id) : true) ||\n        !this.isLoaded() // Loading is considered playing\n      );\n    }\n\n    /**\n     * Check if the sound is currently paused.\n     */\n    paused(): boolean {\n      return !this.playing();\n    }\n\n    /**\n     * Check if the sound is currently stopped.\n     */\n    stopped(): boolean {\n      return this.paused() && this.getSeek() === 0;\n    }\n\n    /**\n     * Get the sound playback rate. This 1 for the default speed.\n     * This value is not clamped (any value greater than 0 is valid),\n     * but the underlying audio system might not play the sound at the required\n     * rate if it's very low or very high.\n     */\n    getRate(): float {\n      return this._rate;\n    }\n\n    /**\n     * Set the playback rate.\n     * This value is not clamped (any value greater than 0 is valid),\n     * but the underlying audio system might not play the sound at the required\n     * rate if it's very low or very high.\n     * @returns The current instance for chaining.\n     */\n    setRate(rate: float): this {\n      this._rate = rate;\n      // If the sound has already started playing, then change the value directly.\n      if (this._id !== null) {\n        rate = gdjs.HowlerSoundManager.clampRate(rate);\n        this._howl.rate(rate, this._id);\n      }\n      return this;\n    }\n\n    /**\n     * Get if the sound is looping.\n     */\n    getLoop(): boolean {\n      return this._loop;\n    }\n\n    /**\n     * Set if the sound is looping.\n     * @returns The current instance for chaining.\n     */\n    setLoop(loop: boolean): this {\n      this._loop = loop;\n      // If the sound has already started playing, then change the value directly.\n      if (this._id !== null) this._howl.loop(loop, this._id);\n      return this;\n    }\n\n    //TODO: Replace float type in those 2 methods with RangeOf<0..1> once it is standardized (https://github.com/Microsoft/TypeScript/issues/15480)\n    /**\n     * Get the sound volume.\n     * @returns A float from 0 to 1.\n     */\n    getVolume(): float {\n      if (this._id === null) return this._initialVolume;\n      return this._howl.volume(this._id);\n    }\n\n    /**\n     * Set the sound volume.\n     * @param volume A float from 0 to 1. The value is clamped if too high or too low.\n     * @returns The current instance for chaining.\n     */\n    setVolume(volume: float): this {\n      this._initialVolume = clampVolume(volume);\n\n      // If the sound has already started playing, then change the value directly.\n      if (this._id !== null) this._howl.volume(this._initialVolume, this._id);\n      return this;\n    }\n\n    /**\n     * Get if the sound is muted.\n     */\n    getMute(): boolean {\n      if (this._id === null) return false;\n      return this._howl.mute(this._id);\n    }\n\n    /**\n     * Set if the sound is muted.\n     * @returns The current instance for chaining.\n     */\n    setMute(mute: boolean): this {\n      if (this._id !== null) this._howl.mute(mute, this._id);\n      return this;\n    }\n\n    /**\n     * Get the sound seek.\n     */\n    getSeek(): float {\n      if (this._id === null) return 0;\n      return this._howl.seek(this._id);\n    }\n\n    /**\n     * Set the sound seek.\n     * @returns The current instance for chaining.\n     */\n    setSeek(seek: float): this {\n      if (this._id !== null) this._howl.seek(seek, this._id);\n      return this;\n    }\n\n    /**\n     * Get the sound spatial position.\n     */\n    getSpatialPosition(axis: 'x' | 'y' | 'z'): float {\n      if (this._id === null) return 0;\n      return this._howl.pos(this._id)[axis === 'x' ? 0 : axis === 'y' ? 1 : 2];\n    }\n\n    /**\n     * Set the sound spatial position.\n     * @returns The current instance for chaining.\n     */\n    setSpatialPosition(x: float, y: float, z: float): this {\n      if (this._id !== null) this._howl.pos(x, y, z, this._id);\n      return this;\n    }\n\n    /**\n     * Fade the volume sound.\n     * @returns The current instance for chaining.\n     */\n    fade(from: float, to: float, duration: float): this {\n      if (this._id !== null)\n        this._howl.fade(clampVolume(from), clampVolume(to), duration, this._id);\n      return this;\n    }\n\n    /**\n     * Adds an event listener to the howl.\n     */\n    on(event: HowlEvent, handler: HowlCallback): this {\n      if (event === 'play') {\n        if (this._id === null) {\n          this._onPlay.push(handler);\n        } else {\n          this._howl.on(event, handler, this._id);\n        }\n      } else if (this._id === null)\n        this.once('play', () => this.on(event, handler));\n      else this._howl.on(event, handler, this._id);\n\n      return this;\n    }\n\n    /**\n     * Adds an event listener to the howl that removes itself after being called.\n     * If the event is `play` and the sound is being played, the handler is\n     * called synchronously.\n     */\n    once(event: HowlEvent, handler: HowlCallback): this {\n      if (event === 'play') {\n        if (this._id === null) {\n          this._oncePlay.push(handler);\n        } else if (this.playing()) {\n          // Immediately call the handler if the sound is already playing.\n          // This is useful for sounds that were just started and have a `.once('play', ...)`\n          // handler added on them to set up the volume/rate/loop. If we don't do it\n          // synchronously, the sound can play for a tiny bit at the default volume and rate.\n          // See https://github.com/4ian/GDevelop/issues/2490.\n          handler(this._id);\n        } else {\n          this._howl.once(event, handler, this._id);\n        }\n      } else if (this._id === null)\n        this.once('play', () => this.once(event, handler));\n      else this._howl.once(event, handler, this._id);\n\n      return this;\n    }\n\n    /**\n     * Removes an event listener to the howl.\n     */\n    off(event: HowlEvent, handler: HowlCallback): this {\n      if (this._id !== null) this._howl.off(event, handler, this._id);\n      return this;\n    }\n  }\n\n  /**\n   * HowlerSoundManager is used to manage the sounds and musics of a RuntimeScene.\n   *\n   * It is basically a container to associate channels to sounds and keep a list\n   * of all sounds being played.\n   */\n  export class HowlerSoundManager {\n    _loadedMusics: Record<string, Howl> = {};\n    _loadedSounds: Record<string, Howl> = {};\n    _resources: ResourceData[];\n    _availableResources: Record<string, ResourceData> = {};\n    _globalVolume: float = 100;\n    _sounds: Record<integer, HowlerSound> = {};\n    _musics: Record<integer, HowlerSound> = {};\n    _freeSounds: HowlerSound[] = []; // Sounds without an assigned channel.\n    _freeMusics: HowlerSound[] = []; // Musics without an assigned channel.\n\n    /** Paused sounds or musics that should be played once the game is resumed.  */\n    _pausedSounds: HowlerSound[] = [];\n    _paused: boolean = false;\n\n    _resourcesLoader: RuntimeGameResourcesLoader;\n\n    /**\n     * @param resources The resources data of the game.\n     * @param resourcesLoader The resources loader of the game.\n     */\n    constructor(\n      resources: ResourceData[],\n      resourcesLoader: RuntimeGameResourcesLoader\n    ) {\n      this._resources = resources;\n      this._resourcesLoader = resourcesLoader;\n\n      const that = this;\n      document.addEventListener('deviceready', function () {\n        // pause/resume sounds in Cordova when the app is being paused/resumed\n        document.addEventListener(\n          'pause',\n          function () {\n            const soundList = that._freeSounds.concat(that._freeMusics);\n            for (let key in that._sounds) {\n              if (that._sounds.hasOwnProperty(key)) {\n                soundList.push(that._sounds[key]);\n              }\n            }\n            for (let key in that._musics) {\n              if (that._musics.hasOwnProperty(key)) {\n                soundList.push(that._musics[key]);\n              }\n            }\n            for (let i = 0; i < soundList.length; i++) {\n              const sound = soundList[i];\n              if (!sound.paused() && !sound.stopped()) {\n                sound.pause();\n                that._pausedSounds.push(sound);\n              }\n            }\n            that._paused = true;\n          },\n          false\n        );\n        document.addEventListener(\n          'resume',\n          function () {\n            for (let i = 0; i < that._pausedSounds.length; i++) {\n              const sound = that._pausedSounds[i];\n              if (!sound.stopped()) {\n                sound.play();\n              }\n            }\n            that._pausedSounds.length = 0;\n            that._paused = false;\n          },\n          false\n        );\n      });\n    }\n\n    /**\n     * Update the resources data of the game. Useful for hot-reloading, should not be used otherwise.\n     *\n     * @param resources The resources data of the game.\n     */\n    setResources(resources: ResourceData[]): void {\n      this._resources = resources;\n    }\n\n    /**\n     * Ensure rate is in a range valid for Howler.js\n     * @return The clamped rate\n     */\n    static clampRate(rate: float): float {\n      if (rate > 4.0) {\n        return 4.0;\n      }\n      if (rate < 0.5) {\n        return 0.5;\n      }\n      return rate;\n    }\n\n    /**\n     * Return the file associated to the given sound name.\n     *\n     * Names and files are loaded from resources when preloadAudio is called. If no\n     * file is associated to the given name, then the name will be considered as a\n     * filename and will be returned.\n     *\n     * @return The associated filename\n     */\n    private _getFileFromSoundName(soundName: string): string {\n      if (\n        this._availableResources.hasOwnProperty(soundName) &&\n        this._availableResources[soundName].file\n      ) {\n        return this._availableResources[soundName].file;\n      }\n      return soundName;\n    }\n\n    /**\n     * Store the sound in the specified array, put it at the first index that\n     * is free, or add it at the end if no element is free\n     * (\"free\" means that the gdjs.HowlerSound can be destroyed).\n     *\n     * @param arr The array containing the sounds.\n     * @param arr The gdjs.HowlerSound to add.\n     * @return The gdjs.HowlerSound that have been added (i.e: the second parameter).\n     */\n    private _storeSoundInArray(\n      arr: Array<HowlerSound>,\n      sound: HowlerSound\n    ): HowlerSound {\n      // Try to recycle an old sound.\n      for (let i = 0, len = arr.length; i < len; ++i) {\n        if (arr[i] !== null && arr[i].stopped()) {\n          arr[i] = sound;\n          return sound;\n        }\n      }\n\n      arr.push(sound);\n      return sound;\n    }\n\n    /**\n     * Creates a new gdjs.HowlerSound using preloaded/cached Howl instances.\n     * @param soundName The name of the file or resource to play.\n     * @param isMusic True if a music, false if a sound.\n     * @param volume Between 0 and 1.\n     * @param loop True if it should be played looping.\n     * @param rate speed at which it is played.\n     */\n    createHowlerSound(\n      soundName: string,\n      isMusic: boolean,\n      volume: float,\n      loop: boolean,\n      rate: float\n    ): HowlerSound {\n      const soundFile = this._getFileFromSoundName(soundName);\n      const cacheContainer = isMusic ? this._loadedMusics : this._loadedSounds;\n\n      if (!cacheContainer.hasOwnProperty(soundFile)) {\n        cacheContainer[soundFile] = new Howl(\n          Object.assign(\n            {\n              src: [this._resourcesLoader.getFullUrl(soundFile)],\n              html5: isMusic,\n              xhr: {\n                withCredentials: this._resourcesLoader.checkIfCredentialsRequired(\n                  soundFile\n                ),\n              },\n              // Cache the sound with no volume. This avoids a bug where it plays at full volume\n              // for a split second before setting its correct volume.\n              volume: 0,\n            },\n            HowlParameters\n          )\n        );\n      }\n\n      return new gdjs.HowlerSound(\n        cacheContainer[soundFile],\n        volume,\n        loop,\n        rate\n      );\n    }\n\n    /**\n     * Preloads a sound or a music in memory.\n     * @param soundName The name of the file or resource to preload.\n     * @param isMusic True if a music, false if a sound.\n     */\n    loadAudio(soundName: string, isMusic: boolean) {\n      const soundFile = this._getFileFromSoundName(soundName);\n      const cacheContainer = isMusic ? this._loadedMusics : this._loadedSounds;\n\n      // Do not reload if it is already loaded.\n      if (cacheContainer.hasOwnProperty(soundFile)) return;\n\n      cacheContainer[soundFile] = new Howl(\n        Object.assign(\n          {\n            src: [this._resourcesLoader.getFullUrl(soundFile)],\n            html5: isMusic,\n            xhr: {\n              withCredentials: this._resourcesLoader.checkIfCredentialsRequired(\n                soundFile\n              ),\n            },\n            // Cache the sound with no volume. This avoids a bug where it plays at full volume\n            // for a split second before setting its correct volume.\n            volume: 0,\n          },\n          HowlParameters\n        )\n      );\n    }\n\n    /**\n     * Unloads a sound or a music from memory. This will stop any sound/music using it.\n     * @param soundName The name of the file or resource to unload.\n     * @param isMusic True if a music, false if a sound.\n     */\n    unloadAudio(soundName: string, isMusic: boolean) {\n      const soundFile = this._getFileFromSoundName(soundName);\n      const cacheContainer = isMusic ? this._loadedMusics : this._loadedSounds;\n\n      if (!cacheContainer[soundFile]) return;\n\n      // Make sure any sound using the howl is deleted so\n      // that the howl can be garbage collected\n      // and no weird \"zombies\" using the unloaded howl can exist.\n      const howl = cacheContainer[soundFile];\n      function clearContainer(howlerSoundContainer: HowlerSound[]) {\n        for (let i in howlerSoundContainer) {\n          if (\n            howlerSoundContainer[i] &&\n            //@ts-ignore We really need to access the raw howl here.\n            howlerSoundContainer[i]._howl === howl\n          ) {\n            howlerSoundContainer[i].stop();\n            delete howlerSoundContainer[i];\n          }\n        }\n      }\n\n      clearContainer(this._freeMusics);\n      clearContainer(this._freeSounds);\n      clearContainer(Object.values(this._musics));\n      clearContainer(Object.values(this._sounds));\n      clearContainer(this._pausedSounds);\n\n      cacheContainer[soundFile].unload();\n      delete cacheContainer[soundFile];\n    }\n\n    /**\n     * Unloads all audio from memory.\n     * This will clear the Howl cache.\n     * This will also stop any running music or sounds.\n     */\n    unloadAll() {\n      Howler.unload();\n\n      // Clean up old sounds that still have the dead Howl instances.\n      this._freeSounds.length = 0;\n      this._freeMusics.length = 0;\n      this._sounds = {};\n      this._musics = {};\n      this._pausedSounds.length = 0;\n      this._loadedMusics = {};\n      this._loadedSounds = {};\n    }\n\n    playSound(soundName: string, loop: boolean, volume: float, pitch: float) {\n      const sound = this.createHowlerSound(\n        soundName,\n        /* isMusic= */ false,\n        volume / 100,\n        loop,\n        pitch\n      );\n      this._storeSoundInArray(this._freeSounds, sound);\n      sound.once('play', () => {\n        if (this._paused) {\n          sound.pause();\n          this._pausedSounds.push(sound);\n        }\n      });\n      sound.play();\n    }\n\n    playSoundOnChannel(\n      soundName: string,\n      channel: integer,\n      loop: boolean,\n      volume: float,\n      pitch: float\n    ) {\n      if (this._sounds[channel]) this._sounds[channel].stop();\n\n      const sound = this.createHowlerSound(\n        soundName,\n        /* isMusic= */ false,\n        volume / 100,\n        loop,\n        pitch\n      );\n      this._sounds[channel] = sound;\n      sound.once('play', () => {\n        if (this._paused) {\n          sound.pause();\n          this._pausedSounds.push(sound);\n        }\n      });\n      sound.play();\n    }\n\n    getSoundOnChannel(channel: integer): HowlerSound | null {\n      return this._sounds[channel] || null;\n    }\n\n    playMusic(soundName: string, loop: boolean, volume: float, pitch: float) {\n      const music = this.createHowlerSound(\n        soundName,\n        /* isMusic= */ true,\n        volume / 100,\n        loop,\n        pitch\n      );\n      this._storeSoundInArray(this._freeMusics, music);\n      music.once('play', () => {\n        if (this._paused) {\n          music.pause();\n          this._pausedSounds.push(music);\n        }\n      });\n      music.play();\n    }\n\n    playMusicOnChannel(\n      soundName: string,\n      channel: integer,\n      loop: boolean,\n      volume: float,\n      pitch: float\n    ) {\n      if (this._musics[channel]) this._musics[channel].stop();\n\n      const music = this.createHowlerSound(\n        soundName,\n        /* isMusic= */ true,\n        volume / 100,\n        loop,\n        pitch\n      );\n      this._musics[channel] = music;\n      music.once('play', () => {\n        if (this._paused) {\n          music.pause();\n          this._pausedSounds.push(music);\n        }\n      });\n      music.play();\n    }\n\n    getMusicOnChannel(channel: integer): HowlerSound | null {\n      return this._musics[channel] || null;\n    }\n\n    setGlobalVolume(volume: float): void {\n      this._globalVolume = volume;\n      if (this._globalVolume > 100) {\n        this._globalVolume = 100;\n      }\n      if (this._globalVolume < 0) {\n        this._globalVolume = 0;\n      }\n      Howler.volume(this._globalVolume / 100);\n    }\n\n    getGlobalVolume(): float {\n      return this._globalVolume;\n    }\n\n    clearAll() {\n      Howler.stop();\n\n      this._freeSounds.length = 0;\n      this._freeMusics.length = 0;\n      this._sounds = {};\n      this._musics = {};\n      this._pausedSounds.length = 0;\n    }\n\n    preloadAudio(\n      onProgress: (loadedCount: integer, totalCount: integer) => void,\n      onComplete: (totalCount: integer) => void,\n      resources?: ResourceData[]\n    ) {\n      resources = resources || this._resources;\n\n      // Construct the list of files to be loaded.\n      // For one loaded file, it can have one or more resources\n      // that use it.\n      const files = {};\n      for (let i = 0, len = resources.length; i < len; ++i) {\n        let res = resources[i];\n        if (res.file && res.kind === 'audio') {\n          if (!!this._availableResources[res.name]) {\n            continue;\n          }\n\n          this._availableResources[res.name] = res;\n\n          files[res.file] = (files[res.file] || []).concat(res);\n        }\n      }\n\n      const filesToLoad = Object.keys(files);\n      const totalCount = filesToLoad.length;\n      if (totalCount === 0) return onComplete(totalCount); // Nothing to load.\n\n      let loadedCount: integer = 0;\n      const onLoad = (_?: any, error?: string) => {\n        if (error)\n          logger.warn(\n            'There was an error while preloading an audio file: ' + error\n          );\n\n        loadedCount++;\n        if (loadedCount === totalCount) return onComplete(totalCount);\n\n        onProgress(loadedCount, totalCount);\n        loadNextFile();\n      };\n\n      const preloadAudioFile = (\n        file: string,\n        onLoadCallback: HowlCallback,\n        isMusic: boolean\n      ) => {\n        const container = isMusic ? this._loadedMusics : this._loadedSounds;\n        container[file] = new Howl(\n          Object.assign({}, HowlParameters, {\n            src: [this._resourcesLoader.getFullUrl(file)],\n            onload: onLoadCallback,\n            onloaderror: onLoadCallback,\n            html5: isMusic,\n            xhr: {\n              withCredentials: this._resourcesLoader.checkIfCredentialsRequired(\n                file\n              ),\n            },\n            // Cache the sound with no volume. This avoids a bug where it plays at full volume\n            // for a split second before setting its correct volume.\n            volume: 0,\n          })\n        );\n      };\n\n      const loadNextFile = () => {\n        if (!filesToLoad.length) return;\n        const file = filesToLoad.shift()!;\n        const fileData = files[file][0];\n\n        let loadCounter = 0;\n        const callback = (_?: any, error?: string) => {\n          loadCounter--;\n          if (!loadCounter) {\n            onLoad(_, error);\n          }\n        };\n\n        if (fileData.preloadAsMusic) {\n          loadCounter++;\n          preloadAudioFile(file, callback, /* isMusic= */ true);\n        }\n\n        if (fileData.preloadAsSound) {\n          loadCounter++;\n          preloadAudioFile(file, callback, /* isMusic= */ false);\n        } else if (fileData.preloadInCache) {\n          // preloading as sound already does a XHR request, hence \"else if\"\n          loadCounter++;\n          const sound = new XMLHttpRequest();\n          sound.withCredentials = this._resourcesLoader.checkIfCredentialsRequired(\n            file\n          );\n          sound.addEventListener('load', callback);\n          sound.addEventListener('error', (_) =>\n            callback(_, 'XHR error: ' + file)\n          );\n          sound.addEventListener('abort', (_) =>\n            callback(_, 'XHR abort: ' + file)\n          );\n          sound.open('GET', this._resourcesLoader.getFullUrl(file));\n          sound.send();\n        }\n\n        if (!loadCounter) {\n          onLoad();\n        }\n      };\n      loadNextFile();\n    }\n  }\n\n  // Register the class to let the engine use it.\n  export const SoundManager = HowlerSoundManager;\n  export type SoundManager = HowlerSoundManager;\n}\n"],
  "mappings": "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",
  "names": []
}
